declare module ASModule {
  type i8 = number;
  type i16 = number;
  type i32 = number;
  type i64 = bigint;
  type isize = number;
  type u8 = number;
  type u16 = number;
  type u32 = number;
  type u64 = bigint;
  type usize = number;
  type f32 = number;
  type f64 = number;
  type bool = boolean | number;
  export namespace glMatrix {
    export var EPSILON: f64;
    export var RANDOM: usize;
    export var ANGLE_ORDER: usize;
    export function setMatrixArrayType(type: usize): void;
    export function toRadian(a: f64): f64;
    export function equals(a: f64, b: f64): bool;
  }
  export namespace mat2 {
    export function create(): usize;
    export function clone(a: usize): usize;
    export function copy(out: usize, a: usize): usize;
    export function identity(out: usize): usize;
    export function fromValues(m00: f64, m01: f64, m10: f64, m11: f64): usize;
    export function set(out: usize, m00: f64, m01: f64, m10: f64, m11: f64): usize;
    export function transpose(out: usize, a: usize): usize;
    export function invert(out: usize, a: usize): usize;
    export function adjoint(out: usize, a: usize): usize;
    export function determinant(a: usize): f64;
    export function multiply(out: usize, a: usize, b: usize): usize;
    export function rotate(out: usize, a: usize, rad: f64): usize;
    export function scale(out: usize, a: usize, v: usize): usize;
    export function fromRotation(out: usize, rad: f64): usize;
    export function fromScaling(out: usize, v: usize): usize;
    export function str(a: usize): usize;
    export function frob(a: usize): f64;
    export function LDU(L: usize, D: usize, U: usize, a: usize): usize;
    export function add(out: usize, a: usize, b: usize): usize;
    export function subtract(out: usize, a: usize, b: usize): usize;
    export function exactEquals(a: usize, b: usize): bool;
    export function equals(a: usize, b: usize): bool;
    export function multiplyScalar(out: usize, a: usize, b: f64): usize;
    export function multiplyScalarAndAdd(out: usize, a: usize, b: usize, scale: f64): usize;
    export var mul: usize;
    export var sub: usize;
  }
  export namespace mat2d {
    export function create(): usize;
    export function clone(a: usize): usize;
    export function copy(out: usize, a: usize): usize;
    export function identity(out: usize): usize;
    export function fromValues(a: f64, b: f64, c: f64, d: f64, tx: f64, ty: f64): usize;
    export function set(out: usize, a: f64, b: f64, c: f64, d: f64, tx: f64, ty: f64): usize;
    export function invert(out: usize, a: usize): usize;
    export function determinant(a: usize): f64;
    export function multiply(out: usize, a: usize, b: usize): usize;
    export function rotate(out: usize, a: usize, rad: f64): usize;
    export function scale(out: usize, a: usize, v: usize): usize;
    export function translate(out: usize, a: usize, v: usize): usize;
    export function fromRotation(out: usize, rad: f64): usize;
    export function fromScaling(out: usize, v: usize): usize;
    export function fromTranslation(out: usize, v: usize): usize;
    export function str(a: usize): usize;
    export function frob(a: usize): f64;
    export function add(out: usize, a: usize, b: usize): usize;
    export function subtract(out: usize, a: usize, b: usize): usize;
    export function multiplyScalar(out: usize, a: usize, b: f64): usize;
    export function multiplyScalarAndAdd(out: usize, a: usize, b: usize, scale: f64): usize;
    export function exactEquals(a: usize, b: usize): bool;
    export function equals(a: usize, b: usize): bool;
    export var mul: usize;
    export var sub: usize;
  }
  export namespace mat3 {
    export function create(): usize;
    export function fromMat4(out: usize, a: usize): usize;
    export function clone(a: usize): usize;
    export function copy(out: usize, a: usize): usize;
    export function fromValues(m00: f64, m01: f64, m02: f64, m10: f64, m11: f64, m12: f64, m20: f64, m21: f64, m22: f64): usize;
    export function set(out: usize, m00: f64, m01: f64, m02: f64, m10: f64, m11: f64, m12: f64, m20: f64, m21: f64, m22: f64): usize;
    export function identity(out: usize): usize;
    export function transpose(out: usize, a: usize): usize;
    export function invert(out: usize, a: usize): usize;
    export function adjoint(out: usize, a: usize): usize;
    export function determinant(a: usize): f64;
    export function multiply(out: usize, a: usize, b: usize): usize;
    export function translate(out: usize, a: usize, v: usize): usize;
    export function rotate(out: usize, a: usize, rad: f64): usize;
    export function scale(out: usize, a: usize, v: usize): usize;
    export function fromTranslation(out: usize, v: usize): usize;
    export function fromRotation(out: usize, rad: f64): usize;
    export function fromScaling(out: usize, v: usize): usize;
    export function fromMat2d(out: usize, a: usize): usize;
    export function fromQuat(out: usize, q: usize): usize;
    export function normalFromMat4(out: usize, a: usize): usize;
    export function projection(out: usize, width: f64, height: f64): usize;
    export function str(a: usize): usize;
    export function frob(a: usize): f64;
    export function add(out: usize, a: usize, b: usize): usize;
    export function subtract(out: usize, a: usize, b: usize): usize;
    export function multiplyScalar(out: usize, a: usize, b: f64): usize;
    export function multiplyScalarAndAdd(out: usize, a: usize, b: usize, scale: f64): usize;
    export function exactEquals(a: usize, b: usize): bool;
    export function equals(a: usize, b: usize): bool;
    export var mul: usize;
    export var sub: usize;
  }
  export namespace mat4 {
    export class Fov {
      static wrap(ptr: usize): Fov;
      valueOf(): usize;
      upDegrees: f64;
      downDegrees: f64;
      leftDegrees: f64;
      rightDegrees: f64;
      constructor();
    }
    export function create(): usize;
    export function clone(a: usize): usize;
    export function copy(out: usize, a: usize): usize;
    export function fromValues(m00: f64, m01: f64, m02: f64, m03: f64, m10: f64, m11: f64, m12: f64, m13: f64, m20: f64, m21: f64, m22: f64, m23: f64, m30: f64, m31: f64, m32: f64, m33: f64): usize;
    export function set(out: usize, m00: f64, m01: f64, m02: f64, m03: f64, m10: f64, m11: f64, m12: f64, m13: f64, m20: f64, m21: f64, m22: f64, m23: f64, m30: f64, m31: f64, m32: f64, m33: f64): usize;
    export function identity(out: usize): usize;
    export function transpose(out: usize, a: usize): usize;
    export function invert(out: usize, a: usize): usize;
    export function adjoint(out: usize, a: usize): usize;
    export function determinant(a: usize): f64;
    export function multiply(out: usize, a: usize, b: usize): usize;
    export function translate(out: usize, a: usize, v: usize): usize;
    export function scale(out: usize, a: usize, v: usize): usize;
    export function rotate(out: usize, a: usize, rad: f64, axis: usize): usize;
    export function rotateX(out: usize, a: usize, rad: f64): usize;
    export function rotateY(out: usize, a: usize, rad: f64): usize;
    export function rotateZ(out: usize, a: usize, rad: f64): usize;
    export function fromTranslation(out: usize, v: usize): usize;
    export function fromScaling(out: usize, v: usize): usize;
    export function fromRotation(out: usize, rad: f64, axis: usize): usize;
    export function fromXRotation(out: usize, rad: f64): usize;
    export function fromYRotation(out: usize, rad: f64): usize;
    export function fromZRotation(out: usize, rad: f64): usize;
    export function fromRotationTranslation(out: usize, q: usize, v: usize): usize;
    export function fromQuat2(out: usize, a: usize): usize;
    export function getTranslation(out: usize, mat: usize): usize;
    export function getScaling(out: usize, mat: usize): usize;
    export function getRotation(out: usize, mat: usize): usize;
    export function decompose(out_r: usize, out_t: usize, out_s: usize, mat: usize): usize;
    export function fromRotationTranslationScale(out: usize, q: usize, v: usize, s: usize): usize;
    export function fromRotationTranslationScaleOrigin(out: usize, q: usize, v: usize, s: usize, o: usize): usize;
    export function fromQuat(out: usize, q: usize): usize;
    export function frustum(out: usize, left: f64, right: f64, bottom: f64, top: f64, near: f64, far: f64): usize;
    export function perspectiveNO(out: usize, fovy: f64, aspect: f64, near: f64, far: f64): usize;
    export var perspective: usize;
    export function perspectiveZO(out: usize, fovy: f64, aspect: f64, near: f64, far: f64): usize;
    export function perspectiveFromFieldOfView(out: usize, fov: usize, near: f64, far: f64): usize;
    export function orthoNO(out: usize, left: f64, right: f64, bottom: f64, top: f64, near: f64, far: f64): usize;
    export var ortho: usize;
    export function orthoZO(out: usize, left: f64, right: f64, bottom: f64, top: f64, near: f64, far: f64): usize;
    export function lookAt(out: usize, eye: usize, center: usize, up: usize): usize;
    export function targetTo(out: usize, eye: usize, target: usize, up: usize): usize;
    export function str(a: usize): usize;
    export function frob(a: usize): f64;
    export function add(out: usize, a: usize, b: usize): usize;
    export function subtract(out: usize, a: usize, b: usize): usize;
    export function multiplyScalar(out: usize, a: usize, b: f64): usize;
    export function multiplyScalarAndAdd(out: usize, a: usize, b: usize, scale: f64): usize;
    export function exactEquals(a: usize, b: usize): bool;
    export function equals(a: usize, b: usize): bool;
    export var mul: usize;
    export var sub: usize;
  }
  export namespace quat {
    export function create(): usize;
    export function identity(out: usize): usize;
    export function setAxisAngle(out: usize, axis: usize, rad: f64): usize;
    export function getAxisAngle(out_axis: usize, q: usize): f64;
    export function getAngle(a: usize, b: usize): f64;
    export function multiply(out: usize, a: usize, b: usize): usize;
    export function rotateX(out: usize, a: usize, rad: f64): usize;
    export function rotateY(out: usize, a: usize, rad: f64): usize;
    export function rotateZ(out: usize, a: usize, rad: f64): usize;
    export function calculateW(out: usize, a: usize): usize;
    export function exp(out: usize, a: usize): usize;
    export function ln(out: usize, a: usize): usize;
    export function pow(out: usize, a: usize, b: f64): usize;
    export function slerp(out: usize, a: usize, b: usize, t: f64): usize;
    export function random(out: usize): usize;
    export function invert(out: usize, a: usize): usize;
    export function conjugate(out: usize, a: usize): usize;
    export function fromMat3(out: usize, m: usize): usize;
    export function fromEuler(out: usize, x: f64, y: f64, z: f64, order?: usize): usize;
    export function str(a: usize): usize;
    export var clone: usize;
    export var fromValues: usize;
    export var copy: usize;
    export var set: usize;
    export var add: usize;
    export var mul: usize;
    export var scale: usize;
    export var dot: usize;
    export var lerp: usize;
    export var length: usize;
    export var len: usize;
    export var squaredLength: usize;
    export var sqrLen: usize;
    export var normalize: usize;
    export var exactEquals: usize;
    export function equals(a: usize, b: usize): bool;
    export var rotationTo: usize;
    export var sqlerp: usize;
    export var setAxes: usize;
  }
  export namespace quat2 {
    export function create(): usize;
    export function clone(a: usize): usize;
    export function fromValues(x1: f64, y1: f64, z1: f64, w1: f64, x2: f64, y2: f64, z2: f64, w2: f64): usize;
    export function fromRotationTranslationValues(x1: f64, y1: f64, z1: f64, w1: f64, x2: f64, y2: f64, z2: f64): usize;
    export function fromRotationTranslation(out: usize, q: usize, t: usize): usize;
    export function fromTranslation(out: usize, t: usize): usize;
    export function fromRotation(out: usize, q: usize): usize;
    export function fromMat4(out: usize, a: usize): usize;
    export function copy(out: usize, a: usize): usize;
    export function identity(out: usize): usize;
    export function set(out: usize, x1: f64, y1: f64, z1: f64, w1: f64, x2: f64, y2: f64, z2: f64, w2: f64): usize;
    export var getReal: usize;
    export function getDual(out: usize, a: usize): usize;
    export var setReal: usize;
    export function setDual(out: usize, q: usize): usize;
    export function getTranslation(out: usize, a: usize): usize;
    export function translate(out: usize, a: usize, v: usize): usize;
    export function rotateX(out: usize, a: usize, rad: f64): usize;
    export function rotateY(out: usize, a: usize, rad: f64): usize;
    export function rotateZ(out: usize, a: usize, rad: f64): usize;
    export function rotateByQuatAppend(out: usize, a: usize, q: usize): usize;
    export function rotateByQuatPrepend(out: usize, q: usize, a: usize): usize;
    export function rotateAroundAxis(out: usize, a: usize, axis: usize, rad: f64): usize;
    export function add(out: usize, a: usize, b: usize): usize;
    export function multiply(out: usize, a: usize, b: usize): usize;
    export var mul: usize;
    export function scale(out: usize, a: usize, b: f64): usize;
    export var dot: usize;
    export function lerp(out: usize, a: usize, b: usize, t: f64): usize;
    export function invert(out: usize, a: usize): usize;
    export function conjugate(out: usize, a: usize): usize;
    export var length: usize;
    export var len: usize;
    export var squaredLength: usize;
    export var sqrLen: usize;
    export function normalize(out: usize, a: usize): usize;
    export function str(a: usize): usize;
    export function exactEquals(a: usize, b: usize): bool;
    export function equals(a: usize, b: usize): bool;
  }
  export namespace vec2 {
    export function create(): usize;
    export function clone(a: usize): usize;
    export function fromValues(x: f64, y: f64): usize;
    export function copy(out: usize, a: usize): usize;
    export function set(out: usize, x: f64, y: f64): usize;
    export function add(out: usize, a: usize, b: usize): usize;
    export function subtract(out: usize, a: usize, b: usize): usize;
    export function multiply(out: usize, a: usize, b: usize): usize;
    export function divide(out: usize, a: usize, b: usize): usize;
    export function ceil(out: usize, a: usize): usize;
    export function floor(out: usize, a: usize): usize;
    export function min(out: usize, a: usize, b: usize): usize;
    export function max(out: usize, a: usize, b: usize): usize;
    export function round(out: usize, a: usize): usize;
    export function scale(out: usize, a: usize, b: f64): usize;
    export function scaleAndAdd(out: usize, a: usize, b: usize, scale: f64): usize;
    export function distance(a: usize, b: usize): f64;
    export function squaredDistance(a: usize, b: usize): f64;
    export function length(a: usize): f64;
    export function squaredLength(a: usize): f64;
    export function negate(out: usize, a: usize): usize;
    export function inverse(out: usize, a: usize): usize;
    export function normalize(out: usize, a: usize): usize;
    export function dot(a: usize, b: usize): f64;
    export function cross(out: usize, a: usize, b: usize): usize;
    export function lerp(out: usize, a: usize, b: usize, t: f64): usize;
    export function random(out: usize, scale: f64): usize;
    export function transformMat2(out: usize, a: usize, m: usize): usize;
    export function transformMat2d(out: usize, a: usize, m: usize): usize;
    export function transformMat3(out: usize, a: usize, m: usize): usize;
    export function transformMat4(out: usize, a: usize, m: usize): usize;
    export function rotate(out: usize, a: usize, b: usize, rad: f64): usize;
    export function angle(a: usize, b: usize): f64;
    export function zero(out: usize): usize;
    export function str(a: usize): usize;
    export function exactEquals(a: usize, b: usize): bool;
    export function equals(a: usize, b: usize): bool;
    export var len: usize;
    export var sub: usize;
    export var mul: usize;
    export var div: usize;
    export var dist: usize;
    export var sqrDist: usize;
    export var sqrLen: usize;
    export var forEach: usize;
  }
  export namespace vec3 {
    export function create(): usize;
    export function clone(a: usize): usize;
    export function length(a: usize): f64;
    export function fromValues(x: f64, y: f64, z: f64): usize;
    export function copy(out: usize, a: usize): usize;
    export function set(out: usize, x: f64, y: f64, z: f64): usize;
    export function add(out: usize, a: usize, b: usize): usize;
    export function subtract(out: usize, a: usize, b: usize): usize;
    export function multiply(out: usize, a: usize, b: usize): usize;
    export function divide(out: usize, a: usize, b: usize): usize;
    export function ceil(out: usize, a: usize): usize;
    export function floor(out: usize, a: usize): usize;
    export function min(out: usize, a: usize, b: usize): usize;
    export function max(out: usize, a: usize, b: usize): usize;
    export function round(out: usize, a: usize): usize;
    export function scale(out: usize, a: usize, b: f64): usize;
    export function scaleAndAdd(out: usize, a: usize, b: usize, scale: f64): usize;
    export function distance(a: usize, b: usize): f64;
    export function squaredDistance(a: usize, b: usize): f64;
    export function squaredLength(a: usize): f64;
    export function negate(out: usize, a: usize): usize;
    export function inverse(out: usize, a: usize): usize;
    export function normalize(out: usize, a: usize): usize;
    export function dot(a: usize, b: usize): f64;
    export function cross(out: usize, a: usize, b: usize): usize;
    export function lerp(out: usize, a: usize, b: usize, t: f64): usize;
    export function slerp(out: usize, a: usize, b: usize, t: f64): usize;
    export function hermite(out: usize, a: usize, b: usize, c: usize, d: usize, t: f64): usize;
    export function bezier(out: usize, a: usize, b: usize, c: usize, d: usize, t: f64): usize;
    export function random(out: usize, scale: f64): usize;
    export function transformMat4(out: usize, a: usize, m: usize): usize;
    export function transformMat3(out: usize, a: usize, m: usize): usize;
    export function transformQuat(out: usize, a: usize, q: usize): usize;
    export function rotateX(out: usize, a: usize, b: usize, rad: f64): usize;
    export function rotateY(out: usize, a: usize, b: usize, rad: f64): usize;
    export function rotateZ(out: usize, a: usize, b: usize, rad: f64): usize;
    export function angle(a: usize, b: usize): f64;
    export function zero(out: usize): usize;
    export function str(a: usize): usize;
    export function exactEquals(a: usize, b: usize): bool;
    export function equals(a: usize, b: usize): bool;
    export var sub: usize;
    export var mul: usize;
    export var div: usize;
    export var dist: usize;
    export var sqrDist: usize;
    export var len: usize;
    export var sqrLen: usize;
    export var forEach: usize;
  }
  export namespace vec4 {
    export function create(): usize;
    export function clone(a: usize): usize;
    export function fromValues(x: f64, y: f64, z: f64, w: f64): usize;
    export function copy(out: usize, a: usize): usize;
    export function set(out: usize, x: f64, y: f64, z: f64, w: f64): usize;
    export function add(out: usize, a: usize, b: usize): usize;
    export function subtract(out: usize, a: usize, b: usize): usize;
    export function multiply(out: usize, a: usize, b: usize): usize;
    export function divide(out: usize, a: usize, b: usize): usize;
    export function ceil(out: usize, a: usize): usize;
    export function floor(out: usize, a: usize): usize;
    export function min(out: usize, a: usize, b: usize): usize;
    export function max(out: usize, a: usize, b: usize): usize;
    export function round(out: usize, a: usize): usize;
    export function scale(out: usize, a: usize, b: f64): usize;
    export function scaleAndAdd(out: usize, a: usize, b: usize, scale: f64): usize;
    export function distance(a: usize, b: usize): f64;
    export function squaredDistance(a: usize, b: usize): f64;
    export function length(a: usize): f64;
    export function squaredLength(a: usize): f64;
    export function negate(out: usize, a: usize): usize;
    export function inverse(out: usize, a: usize): usize;
    export function normalize(out: usize, a: usize): usize;
    export function dot(a: usize, b: usize): f64;
    export function cross(out: usize, u: usize, v: usize, w: usize): usize;
    export function lerp(out: usize, a: usize, b: usize, t: f64): usize;
    export function random(out: usize, scale: f64): usize;
    export function transformMat4(out: usize, a: usize, m: usize): usize;
    export function transformQuat(out: usize, a: usize, q: usize): usize;
    export function zero(out: usize): usize;
    export function str(a: usize): usize;
    export function exactEquals(a: usize, b: usize): bool;
    export function equals(a: usize, b: usize): bool;
    export var sub: usize;
    export var mul: usize;
    export var div: usize;
    export var dist: usize;
    export var sqrDist: usize;
    export var len: usize;
    export var sqrLen: usize;
    export var forEach: usize;
  }
}
export default ASModule;
