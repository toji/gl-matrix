{
  "version": 3,
  "sources": ["../../../src/common/index.ts", "../../../src/_lib/f32/Mat2.ts", "../../../src/_lib/f32/Mat2d.ts", "../../../src/_lib/f32/Mat3.ts", "../../../src/_lib/f32/Mat4.ts", "../../../src/_lib/f32/Vec3.ts", "../../../src/_lib/f32/Vec4.ts", "../../../src/_lib/f32/Quat.ts", "../../../src/_lib/f32/Quat2.ts", "../../../src/_lib/f32/Vec2.ts", "../../../src/util/angleConversion.ts"],
  "sourcesContent": ["/**\n * Provides common resources and constants shared across `gl-matrix`.\n *\n * @packageDocumentation\n */\n\n/**\n * A small constant used to determine the acceptable error margin in floating-point calculations.\n */\nexport const GLM_EPSILON = 0.000001;\n", "import { GLM_EPSILON } from '#gl-matrix/common';\n\nimport type { Mat2Like, Vec2Like } from '#gl-matrix/types';\n\n/**\n * A 2x2 Matrix\n */\nexport class Mat2 extends Float32Array {\n  static #IDENTITY_2X2 = new Float32Array([\n    1, 0,\n    0, 1\n  ]);\n\n  /**\n   * Create a {@link Mat2}.\n   *\n   * @category Constructor\n   */\n  constructor(...values: [Readonly<Mat2Like> | ArrayBufferLike, number?] | number[] | [undefined]) {\n    switch (values.length) {\n      case 4:\n        super(values); break;\n      case 2:\n        super(values[0] as ArrayBuffer, values[1], 4); break;\n      case 1:\n        const v = values[0];\n        if (v === undefined) {\n          super(Mat2.#IDENTITY_2X2);\n        } else if (typeof v === 'number') {\n          super([\n            v, v,\n            v, v]);\n        } else {\n          super(v as ArrayBuffer, 0, 4);\n        }\n        break;\n      default:\n        super(Mat2.#IDENTITY_2X2); break;\n    }\n  }\n\n  // ============\n  // Accessors\n  // ============\n\n  /**\n   * A string representation of `this`\n   * Equivalent to `Mat2.str(this);`\n   *\n   * @category Accessors\n   */\n  get str(): string {\n    return Mat2.str(this);\n  }\n\n  // ===================\n  // Instance methods\n  // ===================\n\n  /**\n   * Copy the values from another {@link Mat2} into `this`.\n   *\n   * @param a the source vector\n   * @returns `this`\n   * @category Methods\n   */\n  copy(a: Readonly<Mat2Like>): this {\n    this.set(a);\n    return this;\n  }\n\n  /**\n   * Set `this` to the identity matrix\n   * Equivalent to Mat2.identity(this)\n   *\n   * @returns `this`\n   * @category Methods\n   */\n  identity(): this {\n    this.set(Mat2.#IDENTITY_2X2);\n    return this;\n  }\n\n  /**\n   * Multiplies this {@link Mat2} against another one\n   * Equivalent to `Mat2.multiply(this, this, b);`\n   *\n   * @param b - The second operand\n   * @returns `this`\n   * @category Methods\n   */\n  multiply(b: Readonly<Mat2Like>): this {\n    return Mat2.multiply(this, this, b);\n  }\n\n  /**\n   * Alias for {@link Mat2.multiply}\n   * @category Methods\n   */\n  mul(b: Readonly<Mat2Like>): this { return this; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Transpose this {@link Mat2}\n   * Equivalent to `Mat2.transpose(this, this);`\n   *\n   * @returns `this`\n   * @category Methods\n   */\n  transpose(): this {\n    return Mat2.transpose(this, this);\n  }\n\n  /**\n   * Inverts this {@link Mat2}\n   * Equivalent to `Mat4.invert(this, this);`\n   *\n   * @returns `this` or `null` if the matrix is not invertible\n   * @category Methods\n   */\n  invert(): this | null {\n    return Mat2.invert(this, this);\n  }\n\n  /**\n   * Scales this {@link Mat2} by the dimensions in the given vec3 not using vectorization\n   * Equivalent to `Mat2.scale(this, this, v);`\n   *\n   * @param v - The {@link Vec2} to scale the matrix by\n   * @returns `this`\n   * @category Methods\n   */\n  scale(v: Readonly<Vec2Like>): this {\n    return Mat2.scale(this, this, v);\n  }\n\n  /**\n   * Rotates this {@link Mat2} by the given angle around the given axis\n   * Equivalent to `Mat2.rotate(this, this, rad);`\n   *\n   * @param rad - the angle to rotate the matrix by\n   * @returns `this`\n   * @category Methods\n   */\n  rotate(rad: number): this {\n    return Mat2.rotate(this, this, rad);\n  }\n\n  // ===================\n  // Static accessors\n  // ===================\n\n  /**\n   * @category Static\n   *\n   * @returns The number of bytes in a {@link Mat2}.\n   */\n  static get BYTE_LENGTH(): number {\n    return 4 * Float32Array.BYTES_PER_ELEMENT;\n  }\n\n  // ===================\n  // Static methods\n  // ===================\n\n  /**\n   * Creates a new, identity {@link Mat2}\n   * @category Static\n   *\n   * @returns A new {@link Mat2}\n   */\n  static create(): Mat2 {\n    return new Mat2();\n  }\n\n  /**\n   * Creates a new {@link Mat2} initialized with values from an existing matrix\n   * @category Static\n   *\n   * @param a - Matrix to clone\n   * @returns A new {@link Mat2}\n   */\n  static clone(a: Readonly<Mat2Like>): Mat2 {\n    return new Mat2(a);\n  }\n\n  /**\n   * Copy the values from one {@link Mat2} to another\n   * @category Static\n   *\n   * @param out - The receiving Matrix\n   * @param a - Matrix to copy\n   * @returns `out`\n   */\n  static copy<T extends Mat2Like>(out: T, a: Readonly<Mat2Like>): T {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n  }\n\n  /**\n   * Create a new {@link Mat2} with the given values\n   * @category Static\n   *\n   * @param values - Matrix components\n   * @returns A new {@link Mat2}\n   */\n  static fromValues(...values: number[]): Mat2 {\n    return new Mat2(...values);\n  }\n\n  /**\n   * Set the components of a {@link Mat2} to the given values\n   * @category Static\n   *\n   * @param out - The receiving matrix\n   * @param values - Matrix components\n   * @returns `out`\n   */\n  static set<T extends Mat2Like>(out: T, ...values: number[]): T {\n    out[0] = values[0];\n    out[1] = values[1];\n    out[2] = values[2];\n    out[3] = values[3];\n    return out;\n  }\n\n  /**\n   * Set a {@link Mat2} to the identity matrix\n   * @category Static\n   *\n   * @param out - The receiving matrix\n   * @returns `out`\n   */\n  static identity<T extends Mat2Like>(out: T): T {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n  }\n\n  /**\n   * Transpose the values of a {@link Mat2}\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the source matrix\n   * @returns `out`\n   */\n  static transpose<T extends Mat2Like>(out: T, a: Readonly<Mat2Like>): T {\n    // If we are transposing ourselves we can skip a few steps but have to cache\n    // some values\n    if (out === a) {\n      const a1 = a[1];\n      out[1] = a[2];\n      out[2] = a1;\n    } else {\n      out[0] = a[0];\n      out[1] = a[2];\n      out[2] = a[1];\n      out[3] = a[3];\n    }\n\n    return out;\n  }\n\n  /**\n   * Inverts a {@link Mat2}\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the source matrix\n   * @returns `out` or `null` if the matrix is not invertible\n   */\n  static invert<T extends Mat2Like>(out: T, a: Mat2Like): T | null {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const a3 = a[3];\n\n    // Calculate the determinant\n    let det = a0 * a3 - a2 * a1;\n\n    if (!det) {\n      return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = a3 * det;\n    out[1] = -a1 * det;\n    out[2] = -a2 * det;\n    out[3] = a0 * det;\n\n    return out;\n  }\n\n  /**\n   * Calculates the adjugate of a {@link Mat2}\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the source matrix\n   * @returns `out`\n   */\n  static adjoint<T extends Mat2Like>(out: T, a: Mat2Like): T {\n    // Caching this value is necessary if out == a\n    const a0 = a[0];\n    out[0] = a[3];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a0;\n    return out;\n  }\n\n  /**\n   * Calculates the determinant of a {@link Mat2}\n   * @category Static\n   *\n   * @param a - the source matrix\n   * @returns determinant of a\n   */\n  static determinant(a: Readonly<Mat2Like>): number {\n    return a[0] * a[3] - a[2] * a[1];\n  }\n\n  /**\n   * Adds two {@link Mat2}'s\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static add<T extends Mat2Like>(out: T, a: Readonly<Mat2Like>, b: Readonly<Mat2Like>): T {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n  }\n\n  /**\n   * Subtracts matrix b from matrix a\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static subtract<T extends Mat2Like>(out: T, a: Readonly<Mat2Like>, b: Readonly<Mat2Like>): T {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    return out;\n  }\n\n  /**\n   * Alias for {@link Mat2.subtract}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static sub<T extends Mat2Like>(out: T, a: Readonly<Mat2Like>, b: Readonly<Mat2Like>): T { return out; }\n\n  /**\n   * Multiplies two {@link Mat2}s\n   * @category Static\n   *\n   * @param out - The receiving Matrix\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns `out`\n   */\n  static multiply<T extends Mat2Like>(out: T, a: Readonly<Mat2Like>, b: Readonly<Mat2Like>): T {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const a3 = a[3];\n    const b0 = b[0];\n    const b1 = b[1];\n    const b2 = b[2];\n    const b3 = b[3];\n    out[0] = a0 * b0 + a2 * b1;\n    out[1] = a1 * b0 + a3 * b1;\n    out[2] = a0 * b2 + a2 * b3;\n    out[3] = a1 * b2 + a3 * b3;\n    return out;\n  }\n  /**\n   * Alias for {@link Mat2.multiply}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static mul<T extends Mat2Like>(out: T, a: Readonly<Mat2Like>, b: Readonly<Mat2Like>): T { return out; }\n\n  /**\n   * Rotates a {@link Mat2} by the given angle\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to rotate\n   * @param rad - the angle to rotate the matrix by\n   * @returns `out`\n   */\n  static rotate<T extends Mat2Like>(out: T, a: Readonly<Mat2Like>, rad: number): T {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const a3 = a[3];\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n    out[0] = a0 * c + a2 * s;\n    out[1] = a1 * c + a3 * s;\n    out[2] = a0 * -s + a2 * c;\n    out[3] = a1 * -s + a3 * c;\n    return out;\n  }\n\n  /**\n   * Scales the {@link Mat2} by the dimensions in the given {@link Vec2}\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to scale\n   * @param v - the {@link Vec2} to scale the matrix by\n   * @returns `out`\n   **/\n  static scale<T extends Mat2Like>(out: T, a: Readonly<Mat2Like>, v: Readonly<Vec2Like>): T {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const a3 = a[3];\n    const v0 = v[0];\n    const v1 = v[1];\n    out[0] = a0 * v0;\n    out[1] = a1 * v0;\n    out[2] = a2 * v1;\n    out[3] = a3 * v1;\n    return out;\n  }\n\n  /**\n   * Creates a {@link Mat2} from a given angle around a given axis\n   * This is equivalent to (but much faster than):\n   * ```js\n   *   mat2.identity(dest);\n   *   mat2.rotate(dest, dest, rad);\n   * ```\n   * @category Static\n   *\n   * @param out - {@link Mat2} receiving operation result\n   * @param rad - the angle to rotate the matrix by\n   * @returns `out`\n   */\n  static fromRotation<T extends Mat2Like>(out: T, rad: number): T {\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n    out[0] = c;\n    out[1] = s;\n    out[2] = -s;\n    out[3] = c;\n    return out;\n  }\n\n  /**\n   * Creates a {@link Mat2} from a vector scaling\n   * This is equivalent to (but much faster than):\n   * ```js\n   *   mat2.identity(dest);\n   *   mat2.scale(dest, dest, vec);\n   * ```\n   * @category Static\n   *\n   * @param out - {@link Mat2} receiving operation result\n   * @param v - Scaling vector\n   * @returns `out`\n   */\n  static fromScaling<T extends Mat2Like>(out: T, v: Readonly<Vec2Like>): T {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = v[1];\n    return out;\n  }\n\n  /**\n   * Returns Frobenius norm of a {@link Mat2}\n   * @category Static\n   *\n   * @param a - the matrix to calculate Frobenius norm of\n   * @returns Frobenius norm\n   */\n  static frob(a: Readonly<Mat2Like>): number {\n    return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2] + a[3] * a[3]);\n  }\n\n  /**\n   * Multiply each element of a {@link Mat2} by a scalar.\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to scale\n   * @param b - amount to scale the matrix's elements by\n   * @returns `out`\n   */\n  static multiplyScalar<T extends Mat2Like>(out: T, a: Readonly<Mat2Like>, b: number): T {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n  }\n\n  /**\n   * Adds two {@link Mat2}'s after multiplying each element of the second operand by a scalar value.\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param scale - the amount to scale b's elements by before adding\n   * @returns `out`\n   */\n  static multiplyScalarAndAdd<T extends Mat2Like>(out: T, a: Readonly<Mat2Like>, b: Readonly<Mat2Like>, scale: number):\n   T {\n    out[0] = a[0] + b[0] * scale;\n    out[1] = a[1] + b[1] * scale;\n    out[2] = a[2] + b[2] * scale;\n    out[3] = a[3] + b[3] * scale;\n    return out;\n  }\n\n  /**\n   * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\n   * @category Static\n   *\n   * @param L - the lower triangular matrix\n   * @param D - the diagonal matrix\n   * @param U - the upper triangular matrix\n   * @param a - the input matrix to factorize\n   */\n\n  static LDU(L: Mat2Like, D: Readonly<Mat2Like>, U: Mat2Like, a: Readonly<Mat2Like>):\n   [Mat2Like, Readonly<Mat2Like>, Mat2Like] {\n    L[2] = a[2] / a[0];\n    U[0] = a[0];\n    U[1] = a[1];\n    U[3] = a[3] - L[2] * U[1];\n    return [L, D, U];\n  }\n\n  /**\n   * Returns whether two {@link Mat2}s have exactly the same elements in the same position (when compared with ===)\n   * @category Static\n   *\n   * @param a - The first matrix.\n   * @param b - The second matrix.\n   * @returns True if the matrices are equal, false otherwise.\n   */\n  static exactEquals(a: Readonly<Mat2Like>, b: Readonly<Mat2Like>): boolean {\n    return (\n      a[0] === b[0] &&\n      a[1] === b[1] &&\n      a[2] === b[2] &&\n      a[3] === b[3]\n    );\n  }\n\n  /**\n   * Returns whether two {@link Mat2}s have approximately the same elements in the same position.\n   * @category Static\n   *\n   * @param a - The first matrix.\n   * @param b - The second matrix.\n   * @returns True if the matrices are equal, false otherwise.\n   */\n  static equals(a: Readonly<Mat2Like>, b: Readonly<Mat2Like>): boolean {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const a3 = a[3];\n\n    const b0 = b[0];\n    const b1 = b[1];\n    const b2 = b[2];\n    const b3 = b[3];\n\n    return (\n      Math.abs(a0 - b0) <= GLM_EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) &&\n      Math.abs(a1 - b1) <= GLM_EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) &&\n      Math.abs(a2 - b2) <= GLM_EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) &&\n      Math.abs(a3 - b3) <= GLM_EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3))\n    );\n  }\n\n  /**\n   * Returns a string representation of a {@link Mat2}\n   * @category Static\n   *\n   * @param a - matrix to represent as a string\n   * @returns string representation of the matrix\n   */\n  static str(a: Readonly<Mat2Like>): string {\n    return `Mat2(${a.join(', ')})`;\n  }\n}\n\n// Instance method alias assignments\nMat2.prototype.mul = Mat2.prototype.multiply; // eslint-disable-line @typescript-eslint/unbound-method\n\n// Static method alias assignments\nMat2.mul = Mat2.multiply;\nMat2.sub = Mat2.subtract;\n", "import { GLM_EPSILON } from '#gl-matrix/common';\n\nimport type { Mat2dLike, Vec2Like } from '#gl-matrix/types';\n\n/**\n * A 2x3 Matrix\n */\nexport class Mat2d extends Float32Array {\n  static #IDENTITY_2X3 = new Float32Array([\n    1, 0,\n    0, 1,\n    0, 0,\n  ]);\n\n  /**\n   * Create a {@link Mat2}.\n   *\n   * @category Constructor\n   */\n  constructor(...values: [Readonly<Mat2dLike> | ArrayBufferLike, number?] | number[] | [undefined]) {\n    switch (values.length) {\n      case 6:\n        super(values); break;\n      case 2:\n        super(values[0] as ArrayBuffer, values[1], 6); break;\n      case 1:\n        const v = values[0];\n        if (v === undefined) {\n          super(Mat2d.#IDENTITY_2X3);\n        } else if (typeof v === 'number') {\n          super([\n            v, v,\n            v, v,\n            v, v]);\n        } else {\n          super(v as ArrayBuffer, 0, 6);\n        }\n        break;\n      default:\n        super(Mat2d.#IDENTITY_2X3); break;\n    }\n  }\n\n  // ============\n  // Accessors\n  // ============\n\n  /**\n   * A string representation of `this`\n   * Equivalent to `Mat2d.str(this);`\n   *\n   * @category Accessors\n   */\n  get str(): string {\n    return Mat2d.str(this);\n  }\n\n  // ===================\n  // Instances methods\n  // ===================\n\n  /**\n   * Copy the values from another {@link Mat2d} into `this`.\n   * @category Methods\n   *\n   * @param a the source vector\n   * @returns `this`\n   */\n  copy(a: Readonly<Mat2dLike>): this {\n    this.set(a);\n    return this;\n  }\n\n  /**\n   * Set `this` to the identity matrix\n   * Equivalent to Mat2d.identity(this)\n   * @category Methods\n   *\n   * @returns `this`\n   */\n  identity(): this {\n    this.set(Mat2d.#IDENTITY_2X3);\n    return this;\n  }\n\n  /**\n   * Multiplies this {@link Mat2d} against another one\n   * Equivalent to `Mat2d.multiply(this, this, b);`\n   * @category Methods\n   *\n   * @param b - The second operand\n   * @returns `this`\n   */\n  multiply(b: Readonly<Mat2dLike>): this {\n    return Mat2d.multiply(this, this, b) as this;\n  }\n\n  /**\n   * Alias for {@link Mat2d.multiply}\n   * @category Methods\n   */\n  mul(b: Readonly<Mat2dLike>): this { return this; }  // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Translate this {@link Mat2d} by the given vector\n   * Equivalent to `Mat2d.translate(this, this, v);`\n   * @category Methods\n   *\n   * @param v - The {@link Vec2} to translate by\n   * @returns `this`\n   */\n  translate(v: Readonly<Vec2Like>): this {\n    return Mat2d.translate(this, this, v) as this;\n  }\n\n  /**\n   * Rotates this {@link Mat2d} by the given angle around the given axis\n   * Equivalent to `Mat2d.rotate(this, this, rad);`\n   * @category Methods\n   *\n   * @param rad - the angle to rotate the matrix by\n   * @returns `this`\n   */\n  rotate(rad: number): this {\n    return Mat2d.rotate(this, this, rad) as this;\n  }\n\n  /**\n   * Scales this {@link Mat2d} by the dimensions in the given vec3 not using vectorization\n   * Equivalent to `Mat2d.scale(this, this, v);`\n   * @category Methods\n   *\n   * @param v - The {@link Vec2} to scale the matrix by\n   * @returns `this`\n   */\n  scale(v: Readonly<Vec2Like>): this {\n    return Mat2d.scale(this, this, v) as this;\n  }\n\n  // ===================\n  // Static accessors\n  // ===================\n\n  /**\n   * @category Static\n   *\n   * @returns The number of bytes in a {@link Mat2d}.\n   */\n  static get BYTE_LENGTH(): number {\n    return 6 * Float32Array.BYTES_PER_ELEMENT;\n  }\n\n  // ===================\n  // Static methods\n  // ===================\n\n  /**\n   * Creates a new, identity {@link Mat2d}\n   * @category Static\n   *\n   * @returns A new {@link Mat2d}\n   */\n  static create(): Mat2d {\n    return new Mat2d();\n  }\n\n  /**\n   * Creates a new {@link Mat2d} initialized with values from an existing matrix\n   * @category Static\n   *\n   * @param a - Matrix to clone\n   * @returns A new {@link Mat2d}\n   */\n  static clone(a: Readonly<Mat2dLike>): Mat2d {\n    return new Mat2d(a);\n  }\n\n  /**\n   * Copy the values from one {@link Mat2d} to another\n   * @category Static\n   *\n   * @param out - The receiving Matrix\n   * @param a - Matrix to copy\n   * @returns `out`\n   */\n  static copy(out: Mat2dLike, a: Readonly<Mat2dLike>): Mat2dLike {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    return out;\n  }\n\n  /**\n   * Create a new {@link Mat2d} with the given values\n   * @category Static\n   *\n   * @param values - Matrix components\n   * @returns A new {@link Mat2d}\n   */\n  static fromValues(...values: number[]): Mat2d {\n    return new Mat2d(...values);\n  }\n\n  /**\n   * Set the components of a {@link Mat2d} to the given values\n   * @category Static\n   *\n   * @param out - The receiving matrix\n   * @param values - Matrix components\n   * @returns `out`\n   */\n  static set(out: Mat2dLike, ...values: number[]): Mat2dLike {\n    out[0] = values[0];\n    out[1] = values[1];\n    out[2] = values[2];\n    out[3] = values[3];\n    out[4] = values[4];\n    out[5] = values[5];\n    return out;\n  }\n\n  /**\n   * Set a {@link Mat2d} to the identity matrix\n   * @category Static\n   *\n   * @param out - The receiving matrix\n   * @returns `out`\n   */\n  static identity(out: Mat2dLike): Mat2dLike {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n  }\n\n  /**\n   * Inverts a {@link Mat2d}\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the source matrix\n   * @returns `out` or `null` if the matrix is not invertible\n   */\n  static invert(out: Mat2dLike, a: Mat2dLike): Mat2dLike | null {\n    const aa = a[0];\n    const ab = a[1];\n    const ac = a[2];\n    const ad = a[3];\n    const atx = a[4];\n    const aty = a[5];\n\n    let det = aa * ad - ab * ac;\n    if (!det) {\n      return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = ad * det;\n    out[1] = -ab * det;\n    out[2] = -ac * det;\n    out[3] = aa * det;\n    out[4] = (ac * aty - ad * atx) * det;\n    out[5] = (ab * atx - aa * aty) * det;\n    return out;\n  }\n\n  /**\n   * Calculates the determinant of a {@link Mat2d}\n   * @category Static\n   *\n   * @param a - the source matrix\n   * @returns determinant of a\n   */\n  static determinant(a: Readonly<Mat2dLike>): number {\n    return a[0] * a[3] - a[1] * a[2];\n  }\n\n  /**\n   * Adds two {@link Mat2d}'s\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static add(out: Mat2dLike, a: Readonly<Mat2dLike>, b: Readonly<Mat2dLike>): Mat2dLike {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    return out;\n  }\n\n  /**\n   * Subtracts matrix b from matrix a\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static subtract(out: Mat2dLike, a: Readonly<Mat2dLike>, b: Readonly<Mat2dLike>): Mat2dLike {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    return out;\n  }\n\n  /**\n   * Alias for {@link Mat2d.subtract}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static sub(out: Mat2dLike, a: Readonly<Mat2dLike>, b: Readonly<Mat2dLike>): Mat2dLike { return out; }\n\n  /**\n   * Multiplies two {@link Mat2d}s\n   * @category Static\n   *\n   * @param out - The receiving Matrix\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns `out`\n   */\n  static multiply(out: Mat2dLike, a: Readonly<Mat2dLike>, b: Readonly<Mat2dLike>): Mat2dLike {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const a3 = a[3];\n    const a4 = a[4];\n    const a5 = a[5];\n    const b0 = b[0];\n    const b1 = b[1];\n    const b2 = b[2];\n    const b3 = b[3];\n    const b4 = b[4];\n    const b5 = b[5];\n    out[0] = a0 * b0 + a2 * b1;\n    out[1] = a1 * b0 + a3 * b1;\n    out[2] = a0 * b2 + a2 * b3;\n    out[3] = a1 * b2 + a3 * b3;\n    out[4] = a0 * b4 + a2 * b5 + a4;\n    out[5] = a1 * b4 + a3 * b5 + a5;\n    return out;\n  }\n\n  /**\n   * Alias for {@link Mat2d.multiply}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static mul(out: Mat2dLike, a: Readonly<Mat2dLike>, b: Readonly<Mat2dLike>): Mat2dLike { return out; }\n\n  /**\n   * Translate a {@link Mat2d} by the given vector\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to translate\n   * @param v - vector to translate by\n   * @returns `out`\n   */\n  static translate(out: Mat2dLike, a: Readonly<Mat2dLike>, v: Readonly<Vec2Like>): Mat2dLike {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const a3 = a[3];\n    const a4 = a[4];\n    const a5 = a[5];\n    const v0 = v[0];\n    const v1 = v[1];\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = a0 * v0 + a2 * v1 + a4;\n    out[5] = a1 * v0 + a3 * v1 + a5;\n    return out;\n  }\n\n  /**\n   * Rotates a {@link Mat2d} by the given angle\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to rotate\n   * @param rad - the angle to rotate the matrix by\n   * @returns `out`\n   */\n  static rotate(out: Mat2dLike, a: Readonly<Mat2dLike>, rad: number): Mat2dLike {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const a3 = a[3];\n    const a4 = a[4];\n    const a5 = a[5];\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n    out[0] = a0 * c + a2 * s;\n    out[1] = a1 * c + a3 * s;\n    out[2] = a0 * -s + a2 * c;\n    out[3] = a1 * -s + a3 * c;\n    out[4] = a4;\n    out[5] = a5;\n    return out;\n  }\n\n  /**\n   * Scales the {@link Mat2d} by the dimensions in the given {@link Vec2}\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to scale\n   * @param v - the {@link Vec2} to scale the matrix by\n   * @returns `out`\n   **/\n  static scale(out: Mat2dLike, a: Readonly<Mat2dLike>, v: Readonly<Vec2Like>): Mat2dLike {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const a3 = a[3];\n    const a4 = a[4];\n    const a5 = a[5];\n    const v0 = v[0];\n    const v1 = v[1];\n    out[0] = a0 * v0;\n    out[1] = a1 * v0;\n    out[2] = a2 * v1;\n    out[3] = a3 * v1;\n    out[4] = a4;\n    out[5] = a5;\n    return out;\n  }\n\n  // TODO: Got to fromRotation\n\n  /**\n   * Creates a {@link Mat2d} from a vector translation\n   * This is equivalent to (but much faster than):\n   * ```js\n   *   Mat2d.identity(dest);\n   *   Mat2d.translate(dest, dest, vec);\n   * ```\n   * @category Static\n   *\n   * @param out - {@link Mat2d} receiving operation result\n   * @param v - Translation vector\n   * @returns `out`\n   */\n  static fromTranslation(out: Mat2dLike, v: Readonly<Vec2Like>): Mat2dLike {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = v[0];\n    out[5] = v[1];\n    return out;\n  }\n\n  /**\n   * Creates a {@link Mat2d} from a given angle around a given axis\n   * This is equivalent to (but much faster than):\n   * ```js\n   *   Mat2d.identity(dest);\n   *   Mat2d.rotate(dest, dest, rad);\n   * ```\n   * @category Static\n   *\n   * @param out - {@link Mat2d} receiving operation result\n   * @param rad - the angle to rotate the matrix by\n   * @returns `out`\n   */\n  static fromRotation(out: Mat2dLike, rad: number): Mat2dLike {\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n    out[0] = c;\n    out[1] = s;\n    out[2] = -s;\n    out[3] = c;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n  }\n\n  /**\n   * Creates a {@link Mat2d} from a vector scaling\n   * This is equivalent to (but much faster than):\n   * ```js\n   *   Mat2d.identity(dest);\n   *   Mat2d.scale(dest, dest, vec);\n   * ```\n   * @category Static\n   *\n   * @param out - {@link Mat2d} receiving operation result\n   * @param v - Scaling vector\n   * @returns `out`\n   */\n  static fromScaling(out: Mat2dLike, v: Readonly<Vec2Like>): Mat2dLike {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = v[1];\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n  }\n\n  /**\n   * Returns Frobenius norm of a {@link Mat2d}\n   * @category Static\n   *\n   * @param a - the matrix to calculate Frobenius norm of\n   * @returns Frobenius norm\n   */\n  static frob(a: Readonly<Mat2dLike>): number {\n    return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2] + a[3] * a[3] + a[4] * a[4] + a[5] * a[5] + 1);\n  }\n\n  /**\n   * Multiply each element of a {@link Mat2d} by a scalar.\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to scale\n   * @param b - amount to scale the matrix's elements by\n   * @returns `out`\n   */\n  static multiplyScalar(out: Mat2dLike, a: Readonly<Mat2dLike>, b: number): Mat2dLike {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    return out;\n  }\n\n  /**\n   * Adds two {@link Mat2d}'s after multiplying each element of the second operand by a scalar value.\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param scale - the amount to scale b's elements by before adding\n   * @returns `out`\n   */\n  static multiplyScalarAndAdd(out: Mat2dLike, a: Readonly<Mat2dLike>, b: Readonly<Mat2dLike>, scale: number):\n    Mat2dLike {\n    out[0] = a[0] + b[0] * scale;\n    out[1] = a[1] + b[1] * scale;\n    out[2] = a[2] + b[2] * scale;\n    out[3] = a[3] + b[3] * scale;\n    out[4] = a[4] + b[4] * scale;\n    out[5] = a[5] + b[5] * scale;\n    return out;\n  }\n\n  /**\n   * Returns whether two {@link Mat2d}s have exactly the same elements in the same position (when compared with ===).\n   * @category Static\n   *\n   * @param a - The first matrix.\n   * @param b - The second matrix.\n   * @returns True if the matrices are equal, false otherwise.\n   */\n  static exactEquals(a: Readonly<Mat2dLike>, b: Readonly<Mat2dLike>): boolean {\n    return (\n      a[0] === b[0] &&\n      a[1] === b[1] &&\n      a[2] === b[2] &&\n      a[3] === b[3] &&\n      a[4] === b[4] &&\n      a[5] === b[5]\n    );\n  }\n\n  /**\n   * Returns whether two {@link Mat2d}s have approximately the same elements in the same position.\n   * @category Static\n   *\n   * @param a - The first matrix.\n   * @param b - The second matrix.\n   * @returns True if the matrices are equal, false otherwise.\n   */\n  static equals(a: Readonly<Mat2dLike>, b: Readonly<Mat2dLike>): boolean {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const a3 = a[3];\n    const a4 = a[4];\n    const a5 = a[5];\n\n    const b0 = b[0];\n    const b1 = b[1];\n    const b2 = b[2];\n    const b3 = b[3];\n    const b4 = b[4];\n    const b5 = b[5];\n\n    return (\n      Math.abs(a0 - b0) <= GLM_EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) &&\n      Math.abs(a1 - b1) <= GLM_EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) &&\n      Math.abs(a2 - b2) <= GLM_EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) &&\n      Math.abs(a3 - b3) <= GLM_EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3)) &&\n      Math.abs(a4 - b4) <= GLM_EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) &&\n      Math.abs(a5 - b5) <= GLM_EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5))\n    );\n  }\n\n  /**\n   * Returns a string representation of a {@link Mat2d}\n   * @category Static\n   *\n   * @param a - matrix to represent as a string\n   * @returns string representation of the matrix\n   */\n  static str(a: Readonly<Mat2dLike>): string {\n    return `Mat2d(${a.join(', ')})`;\n  }\n}\n\n// Static method alias assignments\nMat2d.mul = Mat2d.multiply;\nMat2d.sub = Mat2d.subtract;\n", "import { GLM_EPSILON } from '#gl-matrix/common';\n\nimport type { Mat2dLike, Mat3Like, Mat4Like, Vec2Like, QuatLike } from '#gl-matrix/types';\n\n/**\n * A 3x3 Matrix\n */\nexport class Mat3 extends Float32Array {\n  static #IDENTITY_3X3 = new Float32Array([\n    1, 0, 0,\n    0, 1, 0,\n    0, 0, 1,\n  ]);\n\n  /**\n   * Create a {@link Mat3}.\n   *\n   * @category Constructor\n   */\n  constructor(...values: [Readonly<Mat3Like> | ArrayBufferLike, number?] | number[] | [undefined]) {\n    switch (values.length) {\n      case 9:\n        super(values); break;\n      case 2:\n        super(values[0] as ArrayBuffer, values[1], 9); break;\n      case 1:\n        const v = values[0];\n        if (v === undefined) {\n          super(Mat3.#IDENTITY_3X3);\n        } else if (typeof v === 'number') {\n          super([\n            v, v, v,\n            v, v, v,\n            v, v, v]);\n        } else {\n          super(v as ArrayBuffer, 0, 9);\n        }\n        break;\n      default:\n        super(Mat3.#IDENTITY_3X3); break;\n    }\n  }\n\n  // ============\n  // Accessors\n  // ============\n\n  /**\n   * A string representation of `this`\n   * Equivalent to `Mat3.str(this);`\n   *\n   * @category Accessors\n   */\n  get str(): string {\n    return Mat3.str(this);\n  }\n\n  // ===================\n  // Instance methods\n  // ===================\n\n  /**\n   * Copy the values from another {@link Mat3} into `this`.\n   * @category Methods\n   *\n   * @param a the source vector\n   * @returns `this`\n   */\n  copy(a: Readonly<Mat3Like>): this {\n    this.set(a);\n    return this;\n  }\n\n  /**\n   * Set `this` to the identity matrix\n   * Equivalent to Mat3.identity(this)\n   * @category Methods\n   *\n   * @returns `this`\n   */\n  identity(): this {\n    this.set(Mat3.#IDENTITY_3X3);\n    return this;\n  }\n\n  /**\n   * Multiplies this {@link Mat3} against another one\n   * Equivalent to `Mat3.multiply(this, this, b);`\n   * @category Methods\n   *\n   * @param b - The second operand\n   * @returns `this`\n   */\n  multiply(b: Readonly<Mat3Like>): this {\n    return Mat3.multiply(this, this, b);\n  }\n\n  /**\n   * Alias for {@link Mat3.multiply}\n   * @category Methods\n   */\n  mul(b: Readonly<Mat3Like>): this { return this; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Transpose this {@link Mat3}\n   * Equivalent to `Mat3.transpose(this, this);`\n   * @category Methods\n   *\n   * @returns `this`\n   */\n  transpose(): this {\n    return Mat3.transpose(this, this);\n  }\n\n  /**\n   * Inverts this {@link Mat3}\n   * Equivalent to `Mat4.invert(this, this);`\n   * @category Methods\n   *\n   * @returns `this` or `null` id the matrix isn't invertable\n   */\n  invert(): this | null {\n    return Mat3.invert(this, this);\n  }\n\n  /**\n   * Translate this {@link Mat3} by the given vector\n   * Equivalent to `Mat3.translate(this, this, v);`\n   * @category Methods\n   *\n   * @param v - The {@link Vec2} to translate by\n   * @returns `this`\n   */\n  translate(v: Readonly<Vec2Like>): this {\n    return Mat3.translate(this, this, v);\n  }\n\n  /**\n   * Rotates this {@link Mat3} by the given angle around the given axis\n   * Equivalent to `Mat3.rotate(this, this, rad);`\n   * @category Methods\n   *\n   * @param rad - the angle to rotate the matrix by\n   * @returns `this`\n   */\n  rotate(rad: number): this {\n    return Mat3.rotate(this, this, rad);\n  }\n\n  /**\n   * Scales this {@link Mat3} by the dimensions in the given vec3 not using vectorization\n   * Equivalent to `Mat3.scale(this, this, v);`\n   * @category Methods\n   *\n   * @param v - The {@link Vec2} to scale the matrix by\n   * @returns `this`\n   */\n  scale(v: Readonly<Vec2Like>): this {\n    return Mat3.scale(this, this, v);\n  }\n\n  // ===================\n  // Static accessors\n  // ===================\n\n  /**\n   * @category Static\n   *\n   * @returns The number of bytes in a {@link Mat3}.\n   */\n  static get BYTE_LENGTH(): number {\n    return 9 * Float32Array.BYTES_PER_ELEMENT;\n  }\n\n  // ===================\n  // Static methods\n  // ===================\n\n  /**\n   * Creates a new, identity {@link Mat3}\n   * @category Static\n   *\n   * @returns A new {@link Mat3}\n   */\n  static create(): Mat3 {\n    return new Mat3();\n  }\n\n  /**\n   * Creates a new {@link Mat3} initialized with values from an existing matrix\n   * @category Static\n   *\n   * @param a - Matrix to clone\n   * @returns A new {@link Mat3}\n   */\n  static clone(a: Readonly<Mat3Like>): Mat3 {\n    return new Mat3(a);\n  }\n\n  /**\n   * Copy the values from one {@link Mat3} to another\n   * @category Static\n   *\n   * @param out - The receiving Matrix\n   * @param a - Matrix to copy\n   * @returns `out`\n   */\n  static copy<T extends Mat3Like>(out: T, a: Readonly<Mat3Like>): T {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n  }\n\n  /**\n   * Create a new {@link Mat3} with the given values\n   * @category Static\n   *\n   * @param values - Matrix components\n   * @returns A new {@link Mat3}\n   */\n  static fromValues(...values: number[]): Mat3 {\n    return new Mat3(...values);\n  }\n\n  /**\n   * Set the components of a {@link Mat3} to the given values\n   * @category Static\n   *\n   * @param out - The receiving matrix\n   * @param values - Matrix components\n   * @returns `out`\n   */\n  static set<T extends Mat3Like>(out: T, ...values: number[]): T {\n    out[0] = values[0];\n    out[1] = values[1];\n    out[2] = values[2];\n    out[3] = values[3];\n    out[4] = values[4];\n    out[5] = values[5];\n    out[6] = values[6];\n    out[7] = values[7];\n    out[8] = values[8];\n    return out;\n  }\n\n  /**\n   * Set a {@link Mat3} to the identity matrix\n   * @category Static\n   *\n   * @param out - The receiving matrix\n   * @returns `out`\n   */\n  static identity<T extends Mat3Like>(out: T): T {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n  }\n\n  /**\n   * Transpose the values of a {@link Mat3}\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the source matrix\n   * @returns `out`\n   */\n  static transpose<T extends Mat3Like>(out: T, a: Readonly<Mat3Like>): T {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n      const a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n      out[1] = a[3];\n      out[2] = a[6];\n      out[3] = a01;\n      out[5] = a[7];\n      out[6] = a02;\n      out[7] = a12;\n    } else {\n      out[0] = a[0];\n      out[1] = a[3];\n      out[2] = a[6];\n      out[3] = a[1];\n      out[4] = a[4];\n      out[5] = a[7];\n      out[6] = a[2];\n      out[7] = a[5];\n      out[8] = a[8];\n    }\n\n    return out;\n  }\n\n  /**\n   * Inverts a {@link Mat3}\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the source matrix\n   * @returns `out` or `null` if the matrix is not invertible\n   */\n  static invert<T extends Mat3Like>(out: T, a: Mat3Like): T | null {\n    const a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n    const a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n    const a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n\n    const b01 = a22 * a11 - a12 * a21;\n    const b11 = -a22 * a10 + a12 * a20;\n    const b21 = a21 * a10 - a11 * a20;\n\n    // Calculate the determinant\n    let det = a00 * b01 + a01 * b11 + a02 * b21;\n\n    if (!det) {\n      return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = b01 * det;\n    out[1] = (-a22 * a01 + a02 * a21) * det;\n    out[2] = (a12 * a01 - a02 * a11) * det;\n    out[3] = b11 * det;\n    out[4] = (a22 * a00 - a02 * a20) * det;\n    out[5] = (-a12 * a00 + a02 * a10) * det;\n    out[6] = b21 * det;\n    out[7] = (-a21 * a00 + a01 * a20) * det;\n    out[8] = (a11 * a00 - a01 * a10) * det;\n    return out;\n  }\n\n  /**\n   * Calculates the adjugate of a {@link Mat3}\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the source matrix\n   * @returns `out`\n   */\n  static adjoint<T extends Mat3Like>(out: T, a: Mat3Like): T {\n    const a00 = a[0];\n    const a01 = a[1];\n    const a02 = a[2];\n    const a10 = a[3];\n    const a11 = a[4];\n    const a12 = a[5];\n    const a20 = a[6];\n    const a21 = a[7];\n    const a22 = a[8];\n\n    out[0] = a11 * a22 - a12 * a21;\n    out[1] = a02 * a21 - a01 * a22;\n    out[2] = a01 * a12 - a02 * a11;\n    out[3] = a12 * a20 - a10 * a22;\n    out[4] = a00 * a22 - a02 * a20;\n    out[5] = a02 * a10 - a00 * a12;\n    out[6] = a10 * a21 - a11 * a20;\n    out[7] = a01 * a20 - a00 * a21;\n    out[8] = a00 * a11 - a01 * a10;\n    return out;\n  }\n\n  /**\n   * Calculates the determinant of a {@link Mat3}\n   * @category Static\n   *\n   * @param a - the source matrix\n   * @returns determinant of a\n   */\n  static determinant(a: Readonly<Mat3Like>): number {\n    const a00 = a[0];\n    const a01 = a[1];\n    const a02 = a[2];\n    const a10 = a[3];\n    const a11 = a[4];\n    const a12 = a[5];\n    const a20 = a[6];\n    const a21 = a[7];\n    const a22 = a[8];\n\n    return (\n      a00 * (a22 * a11 - a12 * a21) +\n      a01 * (-a22 * a10 + a12 * a20) +\n      a02 * (a21 * a10 - a11 * a20)\n    );\n  }\n\n  /**\n   * Adds two {@link Mat3}'s\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static add<T extends Mat3Like>(out: T, a: Readonly<Mat3Like>, b: Readonly<Mat3Like>): T {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    return out;\n  }\n\n  /**\n   * Subtracts matrix b from matrix a\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static subtract<T extends Mat3Like>(out: T, a: Readonly<Mat3Like>, b: Readonly<Mat3Like>): T {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    return out;\n  }\n\n  /**\n   * Alias for {@link Mat3.subtract}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static sub<T extends Mat3Like>(out: T, a: Readonly<Mat3Like>, b: Readonly<Mat3Like>): T { return out; }\n\n  /**\n   * Multiplies two {@link Mat3}s\n   * @category Static\n   *\n   * @param out - The receiving Matrix\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns `out`\n   */\n  static multiply<T extends Mat3Like>(out: T, a: Readonly<Mat3Like>, b: Readonly<Mat3Like>): T {\n    const a00 = a[0];\n    const a01 = a[1];\n    const a02 = a[2];\n    const a10 = a[3];\n    const a11 = a[4];\n    const a12 = a[5];\n    const a20 = a[6];\n    const a21 = a[7];\n    const a22 = a[8];\n\n    let b0 = b[0];\n    let b1 = b[1];\n    let b2 = b[2];\n    out[0] = b0 * a00 + b1 * a10 + b2 * a20;\n    out[1] = b0 * a01 + b1 * a11 + b2 * a21;\n    out[2] = b0 * a02 + b1 * a12 + b2 * a22;\n\n    b0 = b[3];\n    b1 = b[4];\n    b2 = b[5];\n    out[3] = b0 * a00 + b1 * a10 + b2 * a20;\n    out[4] = b0 * a01 + b1 * a11 + b2 * a21;\n    out[5] = b0 * a02 + b1 * a12 + b2 * a22;\n\n    b0 = b[6];\n    b1 = b[7];\n    b2 = b[8];\n    out[6] = b0 * a00 + b1 * a10 + b2 * a20;\n    out[7] = b0 * a01 + b1 * a11 + b2 * a21;\n    out[8] = b0 * a02 + b1 * a12 + b2 * a22;\n    return out;\n  }\n\n  /**\n   * Alias for {@link Mat3.multiply}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static mul<T extends Mat3Like>(out: T, a: Readonly<Mat3Like>, b: Readonly<Mat3Like>): T { return out; }\n\n  /**\n   * Translate a {@link Mat3} by the given vector\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to translate\n   * @param v - vector to translate by\n   * @returns `out`\n   */\n  static translate<T extends Mat3Like>(out: T, a: Readonly<Mat3Like>, v: Readonly<Vec2Like>): T {\n    const a00 = a[0];\n    const a01 = a[1];\n    const a02 = a[2];\n    const a10 = a[3];\n    const a11 = a[4];\n    const a12 = a[5];\n    const a20 = a[6];\n    const a21 = a[7];\n    const a22 = a[8];\n    const x = v[0];\n    const y = v[1];\n\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n\n    out[3] = a10;\n    out[4] = a11;\n    out[5] = a12;\n\n    out[6] = x * a00 + y * a10 + a20;\n    out[7] = x * a01 + y * a11 + a21;\n    out[8] = x * a02 + y * a12 + a22;\n    return out;\n  }\n\n  /**\n   * Rotates a {@link Mat3} by the given angle\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to rotate\n   * @param rad - the angle to rotate the matrix by\n   * @returns `out`\n   */\n  static rotate<T extends Mat3Like>(out: T, a: Readonly<Mat3Like>, rad: number): T {\n    const a00 = a[0];\n    const a01 = a[1];\n    const a02 = a[2];\n    const a10 = a[3];\n    const a11 = a[4];\n    const a12 = a[5];\n    const a20 = a[6];\n    const a21 = a[7];\n    const a22 = a[8];\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n\n    out[0] = c * a00 + s * a10;\n    out[1] = c * a01 + s * a11;\n    out[2] = c * a02 + s * a12;\n\n    out[3] = c * a10 - s * a00;\n    out[4] = c * a11 - s * a01;\n    out[5] = c * a12 - s * a02;\n\n    out[6] = a20;\n    out[7] = a21;\n    out[8] = a22;\n    return out;\n  }\n\n  /**\n   * Scales the {@link Mat3} by the dimensions in the given {@link Vec2}\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to scale\n   * @param v - the {@link Vec2} to scale the matrix by\n   * @returns `out`\n   **/\n  static scale<T extends Mat3Like>(out: T, a: Readonly<Mat3Like>, v: Readonly<Vec2Like>): T {\n    const x = v[0];\n    const y = v[1];\n\n    out[0] = x * a[0];\n    out[1] = x * a[1];\n    out[2] = x * a[2];\n\n    out[3] = y * a[3];\n    out[4] = y * a[4];\n    out[5] = y * a[5];\n\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n  }\n\n  /**\n   * Creates a {@link Mat3} from a vector translation\n   * This is equivalent to (but much faster than):\n   * ```js\n   *   mat3.identity(dest);\n   *   mat3.translate(dest, dest, vec);\n   * ```\n   * @category Static\n   *\n   * @param out - {@link Mat3} receiving operation result\n   * @param v - Translation vector\n   * @returns `out`\n   */\n  static fromTranslation<T extends Mat3Like>(out: T, v: Readonly<Vec2Like>): T {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = v[0];\n    out[7] = v[1];\n    out[8] = 1;\n    return out;\n  }\n\n  /**\n   * Creates a {@link Mat3} from a given angle around a given axis\n   * This is equivalent to (but much faster than):\n   *\n   *     mat3.identity(dest);\n   *     mat3.rotate(dest, dest, rad);\n   * @category Static\n   *\n   * @param out - {@link Mat3} receiving operation result\n   * @param rad - the angle to rotate the matrix by\n   * @returns `out`\n   */\n  static fromRotation<T extends Mat3Like>(out: T, rad: number): T {\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n\n    out[0] = c;\n    out[1] = s;\n    out[2] = 0;\n\n    out[3] = -s;\n    out[4] = c;\n    out[5] = 0;\n\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n  }\n\n  /**\n   * Creates a {@link Mat3} from a vector scaling\n   * This is equivalent to (but much faster than):\n   * ```js\n   *   mat3.identity(dest);\n   *   mat3.scale(dest, dest, vec);\n   * ```\n   * @category Static\n   *\n   * @param out - {@link Mat3} receiving operation result\n   * @param v - Scaling vector\n   * @returns `out`\n   */\n  static fromScaling<T extends Mat3Like>(out: T, v: Readonly<Vec2Like>): T {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n\n    out[3] = 0;\n    out[4] = v[1];\n    out[5] = 0;\n\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n  }\n\n  /**\n   * Copies the upper-left 3x3 values of a {@link Mat2d} into the given\n   * {@link Mat3}.\n   * @category Static\n   *\n   * @param out - the receiving 3x3 matrix\n   * @param a - the source 2x3 matrix\n   * @returns `out`\n   */\n  static fromMat2d<T extends Mat3Like>(out: T, a: Readonly<Mat2dLike>): T {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = 0;\n\n    out[3] = a[2];\n    out[4] = a[3];\n    out[5] = 0;\n\n    out[6] = a[4];\n    out[7] = a[5];\n    out[8] = 1;\n    return out;\n  }\n\n  /**\n   * Calculates a {@link Mat3} from the given quaternion\n   * @category Static\n   *\n   * @param out - {@link Mat3} receiving operation result\n   * @param q - {@link Quat} to create matrix from\n   * @returns `out`\n   */\n  static fromQuat<T extends Mat3Like>(out: T, q: Readonly<QuatLike>): T {\n    const x = q[0];\n    const y = q[1];\n    const z = q[2];\n    const w = q[3];\n    const x2 = x + x;\n    const y2 = y + y;\n    const z2 = z + z;\n\n    const xx = x * x2;\n    const yx = y * x2;\n    const yy = y * y2;\n    const zx = z * x2;\n    const zy = z * y2;\n    const zz = z * z2;\n    const wx = w * x2;\n    const wy = w * y2;\n    const wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[3] = yx - wz;\n    out[6] = zx + wy;\n\n    out[1] = yx + wz;\n    out[4] = 1 - xx - zz;\n    out[7] = zy - wx;\n\n    out[2] = zx - wy;\n    out[5] = zy + wx;\n    out[8] = 1 - xx - yy;\n\n    return out;\n  }\n\n  /**\n   * Copies the upper-left 3x3 values of a {@link Mat4} into the given\n   * {@link Mat3}.\n   * @category Static\n   *\n   * @param out - the receiving 3x3 matrix\n   * @param a - the source 4x4 matrix\n   * @returns `out`\n   */\n  static fromMat4<T extends Mat3Like>(out: T, a: Readonly<Mat4Like>): T {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[4];\n    out[4] = a[5];\n    out[5] = a[6];\n    out[6] = a[8];\n    out[7] = a[9];\n    out[8] = a[10];\n    return out;\n  }\n\n  /**\n   * Calculates a {@link Mat3} normal matrix (adjoint) from the upper 3x3 of a {@link Mat4}.\n   * See https://www.shadertoy.com/view/3s33zj for details.\n   * @category Static\n   *\n   * @param {mat3} out mat3 receiving operation result\n   * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\n   * @returns `out`\n   */\n  static normalFromMat4<T extends Mat3Like>(out: T, a: Readonly<Mat4Like>): T {\n    // Only difference from adjoint() is these indices.\n    const a00 = a[0];\n    const a01 = a[1];\n    const a02 = a[2];\n\n    const a10 = a[4];\n    const a11 = a[5];\n    const a12 = a[6];\n\n    const a20 = a[8];\n    const a21 = a[9];\n    const a22 = a[10];\n\n    out[0] = a11 * a22 - a12 * a21;\n    out[1] = a02 * a21 - a01 * a22;\n    out[2] = a01 * a12 - a02 * a11;\n\n    out[3] = a12 * a20 - a10 * a22;\n    out[4] = a00 * a22 - a02 * a20;\n    out[5] = a02 * a10 - a00 * a12;\n\n    out[6] = a10 * a21 - a11 * a20;\n    out[7] = a01 * a20 - a00 * a21;\n    out[8] = a00 * a11 - a01 * a10;\n    return out;\n  }\n\n  /**\n   * Alias for {@link Mat3.adjointFromMat4}\n   * @category Static\n   * @deprecated Use {@link Mat3.normalFromMat4}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static normalFromMat4Fast<T extends Mat3Like>(out: T, a: Readonly<Mat4Like>): T { return out; }\n\n  /**\n   * Generates a 2D projection matrix with the given bounds\n   * @category Static\n   *\n   * @param out mat3 frustum matrix will be written into\n   * @param width Width of your gl context\n   * @param height Height of gl context\n   * @returns `out`\n   */\n  static projection<T extends Mat3Like>(out: T, width: number, height: number): T {\n    out[0] = 2 / width;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = -2 / height;\n    out[5] = 0;\n    out[6] = -1;\n    out[7] = 1;\n    out[8] = 1;\n    return out;\n  }\n\n  /**\n   * Returns Frobenius norm of a {@link Mat3}\n   * @category Static\n   *\n   * @param a - the matrix to calculate Frobenius norm of\n   * @returns Frobenius norm\n   */\n  static frob(a: Readonly<Mat3Like>): number {\n    return Math.sqrt(\n      a[0] * a[0] +\n      a[1] * a[1] +\n      a[2] * a[2] +\n      a[3] * a[3] +\n      a[4] * a[4] +\n      a[5] * a[5] +\n      a[6] * a[6] +\n      a[7] * a[7] +\n      a[8] * a[8]\n    );\n  }\n\n  /**\n   * Multiply each element of a {@link Mat3} by a scalar.\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to scale\n   * @param b - amount to scale the matrix's elements by\n   * @returns `out`\n   */\n  static multiplyScalar<T extends Mat3Like>(out: T, a: Readonly<Mat3Like>, b: number): T {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    return out;\n  }\n\n  /**\n   * Adds two {@link Mat3}'s after multiplying each element of the second operand by a scalar value.\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param scale - the amount to scale b's elements by before adding\n   * @returns `out`\n   */\n  static multiplyScalarAndAdd<T extends Mat3Like>(out: T, a: Readonly<Mat3Like>, b: Readonly<Mat3Like>, scale: number):\n   T {\n    out[0] = a[0] + b[0] * scale;\n    out[1] = a[1] + b[1] * scale;\n    out[2] = a[2] + b[2] * scale;\n    out[3] = a[3] + b[3] * scale;\n    out[4] = a[4] + b[4] * scale;\n    out[5] = a[5] + b[5] * scale;\n    out[6] = a[6] + b[6] * scale;\n    out[7] = a[7] + b[7] * scale;\n    out[8] = a[8] + b[8] * scale;\n    return out;\n  }\n\n  /**\n   * Returns whether two {@link Mat3}s have exactly the same elements in the same position (when compared with ===).\n   * @category Static\n   *\n   * @param a - The first matrix.\n   * @param b - The second matrix.\n   * @returns True if the matrices are equal, false otherwise.\n   */\n  static exactEquals(a: Readonly<Mat3Like>, b: Readonly<Mat3Like>): boolean {\n    return (\n      a[0] === b[0] &&\n      a[1] === b[1] &&\n      a[2] === b[2] &&\n      a[3] === b[3] &&\n      a[4] === b[4] &&\n      a[5] === b[5] &&\n      a[6] === b[6] &&\n      a[7] === b[7] &&\n      a[8] === b[8]\n    );\n  }\n\n  /**\n   * Returns whether two {@link Mat3}s have approximately the same elements in the same position.\n   * @category Static\n   *\n   * @param a - The first matrix.\n   * @param b - The second matrix.\n   * @returns True if the matrices are equal, false otherwise.\n   */\n  static equals(a: Readonly<Mat3Like>, b: Readonly<Mat3Like>): boolean {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const a3 = a[3];\n    const a4 = a[4];\n    const a5 = a[5];\n    const a6 = a[6];\n    const a7 = a[7];\n    const a8 = a[8];\n\n    const b0 = b[0];\n    const b1 = b[1];\n    const b2 = b[2];\n    const b3 = b[3];\n    const b4 = b[4];\n    const b5 = b[5];\n    const b6 = b[6];\n    const b7 = b[7];\n    const b8 = b[8];\n\n    return (\n      Math.abs(a0 - b0) <= GLM_EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) &&\n      Math.abs(a1 - b1) <= GLM_EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) &&\n      Math.abs(a2 - b2) <= GLM_EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) &&\n      Math.abs(a3 - b3) <= GLM_EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3)) &&\n      Math.abs(a4 - b4) <= GLM_EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) &&\n      Math.abs(a5 - b5) <= GLM_EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5)) &&\n      Math.abs(a6 - b6) <= GLM_EPSILON * Math.max(1, Math.abs(a6), Math.abs(b6)) &&\n      Math.abs(a7 - b7) <= GLM_EPSILON * Math.max(1, Math.abs(a7), Math.abs(b7)) &&\n      Math.abs(a8 - b8) <= GLM_EPSILON * Math.max(1, Math.abs(a8), Math.abs(b8))\n    );\n  }\n\n  /**\n   * Returns a string representation of a {@link Mat3}\n   * @category Static\n   *\n   * @param a - matrix to represent as a string\n   * @returns string representation of the matrix\n   */\n  static str(a: Readonly<Mat3Like>): string {\n    return `Mat3(${a.join(', ')})`;\n  }\n}\n\n// Instance method alias assignments\nMat3.prototype.mul = Mat3.prototype.multiply; // eslint-disable-line @typescript-eslint/unbound-method\n\n// Static method alias assignments\nMat3.mul = Mat3.multiply;\nMat3.sub = Mat3.subtract;\nMat3.normalFromMat4Fast = Mat3.normalFromMat4;\n", "import { GLM_EPSILON } from '#gl-matrix/common';\n\nimport type { Mat4Like, QuatLike, Quat2Like, Vec3Like } from '#gl-matrix/types';\n\n/**\n * A 4x4 Matrix\n */\nexport class Mat4 extends Float32Array {\n  static #IDENTITY_4X4 = new Float32Array([\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1,\n  ]);\n\n  /**\n   * Temporary variable to prevent repeated allocations in the algorithms within Mat4.\n   * These are declared as TypedArrays to aid in tree-shaking.\n   */\n  static #TMP_VEC3 = new Float32Array(3);\n\n  /**\n   * Create a {@link Mat4}.\n   *\n   * @category Constructor\n   */\n  constructor(...values: [Readonly<Mat4Like> | ArrayBufferLike, number?] | number[] | [undefined]) {\n    switch (values.length) {\n      case 16:\n        super(values); break;\n      case 2:\n        super(values[0] as ArrayBuffer, values[1], 16); break;\n      case 1:\n        const v = values[0];\n        if (v === undefined) {\n          super(Mat4.#IDENTITY_4X4);\n        } else if (typeof v === 'number') {\n          super([\n            v, v, v, v,\n            v, v, v, v,\n            v, v, v, v,\n            v, v, v, v]);\n        } else {\n          super(v as ArrayBuffer, 0, 16);\n        }\n        break;\n      default:\n        super(Mat4.#IDENTITY_4X4); break;\n    }\n  }\n\n  // ============\n  // Accessors\n  // ============\n\n  /**\n   * A string representation of `this`\n   * Equivalent to `Mat4.str(this);`\n   *\n   * @category Accessors\n   */\n  get str(): string {\n    return Mat4.str(this);\n  }\n\n  // ===================\n  // Instance methods\n  // ===================\n\n  /**\n   * Copy the values from another {@link Mat4} into `this`.\n   * @category Methods\n   *\n   * @param a the source vector\n   * @returns `this`\n   */\n  copy(a: Readonly<Mat4Like>): this {\n    this.set(a);\n    return this;\n  }\n\n  /**\n   * Set `this` to the identity matrix\n   * Equivalent to Mat4.identity(this)\n   * @category Methods\n   *\n   * @returns `this`\n   */\n  identity(): this {\n    this.set(Mat4.#IDENTITY_4X4);\n    return this;\n  }\n\n  /**\n   * Multiplies this {@link Mat4} against another one\n   * Equivalent to `Mat4.multiply(this, this, b);`\n   * @category Methods\n   *\n   * @param b - The second operand\n   * @returns `this`\n   */\n  multiply(b: Readonly<Mat4Like>): this {\n    return Mat4.multiply(this, this, b);\n  }\n\n  /**\n   * Alias for {@link Mat4.multiply}\n   * @category Methods\n   */\n  mul(b: Readonly<Mat4Like>): this { return this; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Transpose this {@link Mat4}\n   * Equivalent to `Mat4.transpose(this, this);`\n   * @category Methods\n   *\n   * @returns `this`\n   */\n  transpose(): this {\n    return Mat4.transpose(this, this);\n  }\n\n  /**\n   * Inverts this {@link Mat4}\n   * Equivalent to `Mat4.invert(this, this);`\n   * @category Methods\n   *\n   * @returns `this` or `null` if the matrix isn't invertable\n   */\n  invert(): this | null {\n    return Mat4.invert(this, this);\n  }\n\n  /**\n   * Translate this {@link Mat4} by the given vector\n   * Equivalent to `Mat4.translate(this, this, v);`\n   * @category Methods\n   *\n   * @param v - The {@link Vec3} to translate by\n   * @returns `this`\n   */\n  translate(v: Readonly<Vec3Like>): this {\n    return Mat4.translate(this, this, v);\n  }\n\n  /**\n   * Rotates this {@link Mat4} by the given angle around the given axis\n   * Equivalent to `Mat4.rotate(this, this, rad, axis);`\n   * @category Methods\n   *\n   * @param rad - the angle to rotate the matrix by\n   * @param axis - the axis to rotate around\n   * @returns `this`\n   */\n  rotate(rad: number, axis: Readonly<Vec3Like>): this {\n    return Mat4.rotate(this, this, rad, axis);\n  }\n\n  /**\n   * Scales this {@link Mat4} by the dimensions in the given vec3 not using vectorization\n   * Equivalent to `Mat4.scale(this, this, v);`\n   * @category Methods\n   *\n   * @param v - The {@link Vec3} to scale the matrix by\n   * @returns `this`\n   */\n  scale(v: Readonly<Vec3Like>): this {\n    return Mat4.scale(this, this, v);\n  }\n\n  /**\n   * Rotates this {@link Mat4} by the given angle around the X axis\n   * Equivalent to `Mat4.rotateX(this, this, rad);`\n   * @category Methods\n   *\n   * @param rad - the angle to rotate the matrix by\n   * @returns `this`\n   */\n  rotateX(rad: number): this {\n    return Mat4.rotateX(this, this, rad);\n  }\n\n  /**\n   * Rotates this {@link Mat4} by the given angle around the Y axis\n   * Equivalent to `Mat4.rotateY(this, this, rad);`\n   * @category Methods\n   *\n   * @param rad - the angle to rotate the matrix by\n   * @returns `this`\n   */\n  rotateY(rad: number): this {\n    return Mat4.rotateY(this, this, rad);\n  }\n\n  /**\n   * Rotates this {@link Mat4} by the given angle around the Z axis\n   * Equivalent to `Mat4.rotateZ(this, this, rad);`\n   * @category Methods\n   *\n   * @param rad - the angle to rotate the matrix by\n   * @returns `this`\n   */\n  rotateZ(rad: number): this {\n    return Mat4.rotateZ(this, this, rad);\n  }\n\n  /**\n   * Generates a perspective projection matrix with the given bounds.\n   * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n   * which matches WebGL/OpenGL's clip volume.\n   * Passing null/undefined/no value for far will generate infinite projection matrix.\n   * Equivalent to `Mat4.perspectiveNO(this, fovy, aspect, near, far);`\n   * @category Methods\n   *\n   * @param fovy - Vertical field of view in radians\n   * @param aspect - Aspect ratio. typically viewport width/height\n   * @param near - Near bound of the frustum\n   * @param far - Far bound of the frustum, can be null or Infinity\n   * @returns `this`\n   */\n  perspectiveNO(fovy: number, aspect: number, near: number, far: number): this {\n    return Mat4.perspectiveNO(this, fovy, aspect, near, far);\n  }\n\n  /**\n   * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n   * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n   * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n   * Passing null/undefined/no value for far will generate infinite projection matrix.\n   * Equivalent to `Mat4.perspectiveZO(this, fovy, aspect, near, far);`\n   * @category Methods\n   *\n   * @param fovy - Vertical field of view in radians\n   * @param aspect - Aspect ratio. typically viewport width/height\n   * @param near - Near bound of the frustum\n   * @param far - Far bound of the frustum, can be null or Infinity\n   * @returns `this`\n   */\n  perspectiveZO(fovy: number, aspect: number, near: number, far: number): this {\n    return Mat4.perspectiveZO(this, fovy, aspect, near, far);\n  }\n\n  /**\n   * Generates a orthogonal projection matrix with the given bounds.\n   * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n   * which matches WebGL/OpenGL's clip volume.\n   * Equivalent to `Mat4.orthoNO(this, left, right, bottom, top, near, far);`\n   * @category Methods\n   *\n   * @param left - Left bound of the frustum\n   * @param right - Right bound of the frustum\n   * @param bottom - Bottom bound of the frustum\n   * @param top - Top bound of the frustum\n   * @param near - Near bound of the frustum\n   * @param far - Far bound of the frustum\n   * @returns `this`\n   */\n  orthoNO(left: number, right: number, bottom: number, top: number, near: number, far: number): this {\n    return Mat4.orthoNO(this, left, right, bottom, top, near, far);\n  }\n\n  /**\n   * Generates a orthogonal projection matrix with the given bounds.\n   * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n   * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n   * Equivalent to `Mat4.orthoZO(this, left, right, bottom, top, near, far);`\n   * @category Methods\n   *\n   * @param left - Left bound of the frustum\n   * @param right - Right bound of the frustum\n   * @param bottom - Bottom bound of the frustum\n   * @param top - Top bound of the frustum\n   * @param near - Near bound of the frustum\n   * @param far - Far bound of the frustum\n   * @returns `this`\n   */\n  orthoZO(left: number, right: number, bottom: number, top: number, near: number, far: number): this {\n    return Mat4.orthoZO(this, left, right, bottom, top, near, far);\n  }\n\n  // ===================\n  // Static accessors\n  // ===================\n\n  /**\n   * @category Static\n   *\n   * @returns The number of bytes in a {@link Mat4}.\n   */\n  static get BYTE_LENGTH(): number {\n    return 16 * Float32Array.BYTES_PER_ELEMENT;\n  }\n\n  // ===================\n  // Static methods\n  // ===================\n\n  /**\n   * Creates a new, identity {@link Mat4}\n   * @category Static\n   *\n   * @returns A new {@link Mat4}\n   */\n  static create(): Mat4 {\n    return new Mat4();\n  }\n\n  /**\n   * Creates a new {@link Mat4} initialized with values from an existing matrix\n   * @category Static\n   *\n   * @param a - Matrix to clone\n   * @returns A new {@link Mat4}\n   */\n  static clone(a: Readonly<Mat4Like>): Mat4 {\n    return new Mat4(a);\n  }\n\n  /**\n   * Copy the values from one {@link Mat4} to another\n   * @category Static\n   *\n   * @param out - The receiving Matrix\n   * @param a - Matrix to copy\n   * @returns `out`\n   */\n  static copy<T extends Mat4Like>(out: T, a: Readonly<Mat4Like>): T {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n  }\n\n  /**\n   * Create a new mat4 with the given values\n   * @category Static\n   *\n   * @param values - Matrix components\n   * @returns A new {@link Mat4}\n   */\n  static fromValues(...values: number[]): Mat4 {\n    return new Mat4(...values);\n  }\n\n  /**\n   * Set the components of a mat4 to the given values\n   * @category Static\n   *\n   * @param out - The receiving matrix\n   * @param values - Matrix components\n   * @returns `out`\n   */\n  static set<T extends Mat4Like>(out: T, ...values: number[]): T {\n    out[0] = values[0];\n    out[1] = values[1];\n    out[2] = values[2];\n    out[3] = values[3];\n    out[4] = values[4];\n    out[5] = values[5];\n    out[6] = values[6];\n    out[7] = values[7];\n    out[8] = values[8];\n    out[9] = values[9];\n    out[10] = values[10];\n    out[11] = values[11];\n    out[12] = values[12];\n    out[13] = values[13];\n    out[14] = values[14];\n    out[15] = values[15];\n    return out;\n  }\n\n  /**\n   * Set a {@link Mat4} to the identity matrix\n   * @category Static\n   *\n   * @param out - The receiving Matrix\n   * @returns `out`\n   */\n  static identity<T extends Mat4Like>(out: T): T {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n  }\n\n  /**\n   * Transpose the values of a {@link Mat4}\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the source matrix\n   * @returns `out`\n   */\n  static transpose<T extends Mat4Like>(out: T, a: Readonly<Mat4Like>): T {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n      const a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n      const a12 = a[6],\n        a13 = a[7];\n      const a23 = a[11];\n\n      out[1] = a[4];\n      out[2] = a[8];\n      out[3] = a[12];\n      out[4] = a01;\n      out[6] = a[9];\n      out[7] = a[13];\n      out[8] = a02;\n      out[9] = a12;\n      out[11] = a[14];\n      out[12] = a03;\n      out[13] = a13;\n      out[14] = a23;\n    } else {\n      out[0] = a[0];\n      out[1] = a[4];\n      out[2] = a[8];\n      out[3] = a[12];\n      out[4] = a[1];\n      out[5] = a[5];\n      out[6] = a[9];\n      out[7] = a[13];\n      out[8] = a[2];\n      out[9] = a[6];\n      out[10] = a[10];\n      out[11] = a[14];\n      out[12] = a[3];\n      out[13] = a[7];\n      out[14] = a[11];\n      out[15] = a[15];\n    }\n\n    return out;\n  }\n\n  /**\n   * Inverts a {@link Mat4}\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the source matrix\n   * @returns `out` or `null` if the matrix is not invertible\n   */\n  static invert<T extends Mat4Like>(out: T, a: Mat4Like): T | null {\n    const a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n    const a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n    const a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n    const a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n\n    const b00 = a00 * a11 - a01 * a10;\n    const b01 = a00 * a12 - a02 * a10;\n    const b02 = a00 * a13 - a03 * a10;\n    const b03 = a01 * a12 - a02 * a11;\n    const b04 = a01 * a13 - a03 * a11;\n    const b05 = a02 * a13 - a03 * a12;\n    const b06 = a20 * a31 - a21 * a30;\n    const b07 = a20 * a32 - a22 * a30;\n    const b08 = a20 * a33 - a23 * a30;\n    const b09 = a21 * a32 - a22 * a31;\n    const b10 = a21 * a33 - a23 * a31;\n    const b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    let det =\n      b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n      return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n    return out;\n  }\n\n  /**\n   * Calculates the adjugate of a {@link Mat4}\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the source matrix\n   * @returns `out`\n   */\n  static adjoint<T extends Mat4Like>(out: T, a: Mat4Like): T {\n    const a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n    const a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n    const a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n    const a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n\n    const b00 = a00 * a11 - a01 * a10;\n    const b01 = a00 * a12 - a02 * a10;\n    const b02 = a00 * a13 - a03 * a10;\n    const b03 = a01 * a12 - a02 * a11;\n    const b04 = a01 * a13 - a03 * a11;\n    const b05 = a02 * a13 - a03 * a12;\n    const b06 = a20 * a31 - a21 * a30;\n    const b07 = a20 * a32 - a22 * a30;\n    const b08 = a20 * a33 - a23 * a30;\n    const b09 = a21 * a32 - a22 * a31;\n    const b10 = a21 * a33 - a23 * a31;\n    const b11 = a22 * a33 - a23 * a32;\n\n    out[0] = a11 * b11 - a12 * b10 + a13 * b09;\n    out[1] = a02 * b10 - a01 * b11 - a03 * b09;\n    out[2] = a31 * b05 - a32 * b04 + a33 * b03;\n    out[3] = a22 * b04 - a21 * b05 - a23 * b03;\n    out[4] = a12 * b08 - a10 * b11 - a13 * b07;\n    out[5] = a00 * b11 - a02 * b08 + a03 * b07;\n    out[6] = a32 * b02 - a30 * b05 - a33 * b01;\n    out[7] = a20 * b05 - a22 * b02 + a23 * b01;\n    out[8] = a10 * b10 - a11 * b08 + a13 * b06;\n    out[9] = a01 * b08 - a00 * b10 - a03 * b06;\n    out[10] = a30 * b04 - a31 * b02 + a33 * b00;\n    out[11] = a21 * b02 - a20 * b04 - a23 * b00;\n    out[12] = a11 * b07 - a10 * b09 - a12 * b06;\n    out[13] = a00 * b09 - a01 * b07 + a02 * b06;\n    out[14] = a31 * b01 - a30 * b03 - a32 * b00;\n    out[15] = a20 * b03 - a21 * b01 + a22 * b00;\n    return out;\n  }\n\n  /**\n   * Calculates the determinant of a {@link Mat4}\n   * @category Static\n   *\n   * @param a - the source matrix\n   * @returns determinant of a\n   */\n  static determinant(a: Readonly<Mat4Like>): number {\n    const a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n    const a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n    const a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n    const a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n\n    const b0 = a00 * a11 - a01 * a10;\n    const b1 = a00 * a12 - a02 * a10;\n    const b2 = a01 * a12 - a02 * a11;\n    const b3 = a20 * a31 - a21 * a30;\n    const b4 = a20 * a32 - a22 * a30;\n    const b5 = a21 * a32 - a22 * a31;\n    const b6 = a00 * b5 - a01 * b4 + a02 * b3;\n    const b7 = a10 * b5 - a11 * b4 + a12 * b3;\n    const b8 = a20 * b2 - a21 * b1 + a22 * b0;\n    const b9 = a30 * b2 - a31 * b1 + a32 * b0;\n\n    // Calculate the determinant\n    return a13 * b6 - a03 * b7 + a33 * b8 - a23 * b9;\n  }\n\n  /**\n   * Multiplies two {@link Mat4}s\n   * @category Static\n   *\n   * @param out - The receiving Matrix\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns `out`\n   */\n  static multiply<T extends Mat4Like>(out: T, a: Readonly<Mat4Like>, b: Readonly<Mat4Like>): T {\n    const a00 = a[0];\n    const a01 = a[1];\n    const a02 = a[2];\n    const a03 = a[3];\n    const a10 = a[4];\n    const a11 = a[5];\n    const a12 = a[6];\n    const a13 = a[7];\n    const a20 = a[8];\n    const a21 = a[9];\n    const a22 = a[10];\n    const a23 = a[11];\n    const a30 = a[12];\n    const a31 = a[13];\n    const a32 = a[14];\n    const a33 = a[15];\n\n    // Cache only the current line of the second matrix\n    let b0 = b[0];\n    let b1 = b[1];\n    let b2 = b[2];\n    let b3 = b[3];\n    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[4];\n    b1 = b[5];\n    b2 = b[6];\n    b3 = b[7];\n    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[8];\n    b1 = b[9];\n    b2 = b[10];\n    b3 = b[11];\n    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[12];\n    b1 = b[13];\n    b2 = b[14];\n    b3 = b[15];\n    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    return out;\n  }\n\n  /**\n   * Alias for {@link Mat4.multiply}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static mul<T extends Mat4Like>(out: T, a: Readonly<Mat4Like>, b: Readonly<Mat4Like>): T { return out; }\n\n  /**\n   * Translate a {@link Mat4} by the given vector\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to translate\n   * @param v - vector to translate by\n   * @returns `out`\n   */\n  static translate<T extends Mat4Like>(out: T, a: Readonly<Mat4Like>, v: Readonly<Vec3Like>): T {\n    const x = v[0];\n    const y = v[1];\n    const z = v[2];\n\n    if (a === out) {\n      out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n      out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n      out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n      out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n    } else {\n      const a00 = a[0];\n      const a01 = a[1];\n      const a02 = a[2];\n      const a03 = a[3];\n      const a10 = a[4];\n      const a11 = a[5];\n      const a12 = a[6];\n      const a13 = a[7];\n      const a20 = a[8];\n      const a21 = a[9];\n      const a22 = a[10];\n      const a23 = a[11];\n\n      out[0] = a00;\n      out[1] = a01;\n      out[2] = a02;\n      out[3] = a03;\n      out[4] = a10;\n      out[5] = a11;\n      out[6] = a12;\n      out[7] = a13;\n      out[8] = a20;\n      out[9] = a21;\n      out[10] = a22;\n      out[11] = a23;\n\n      out[12] = a00 * x + a10 * y + a20 * z + a[12];\n      out[13] = a01 * x + a11 * y + a21 * z + a[13];\n      out[14] = a02 * x + a12 * y + a22 * z + a[14];\n      out[15] = a03 * x + a13 * y + a23 * z + a[15];\n    }\n\n    return out;\n  }\n\n  /**\n   * Scales the {@link Mat4} by the dimensions in the given {@link Vec3} not using vectorization\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to scale\n   * @param v - the {@link Vec3} to scale the matrix by\n   * @returns `out`\n   **/\n  static scale<T extends Mat4Like>(out: T, a: Readonly<Mat4Like>, v: Readonly<Vec3Like>): T {\n    const x = v[0];\n    const y = v[1];\n    const z = v[2];\n\n    out[0] = a[0] * x;\n    out[1] = a[1] * x;\n    out[2] = a[2] * x;\n    out[3] = a[3] * x;\n    out[4] = a[4] * y;\n    out[5] = a[5] * y;\n    out[6] = a[6] * y;\n    out[7] = a[7] * y;\n    out[8] = a[8] * z;\n    out[9] = a[9] * z;\n    out[10] = a[10] * z;\n    out[11] = a[11] * z;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n  }\n\n  /**\n   * Rotates a {@link Mat4} by the given angle around the given axis\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to rotate\n   * @param rad - the angle to rotate the matrix by\n   * @param axis - the axis to rotate around\n   * @returns `out` or `null` if axis has a length of 0\n   */\n  static rotate<T extends Mat4Like>(out: T, a: Readonly<Mat4Like>, rad: number, axis: Readonly<Vec3Like>): T | null {\n    let x = axis[0];\n    let y = axis[1];\n    let z = axis[2];\n    let len = Math.sqrt(x * x + y * y + z * z);\n\n    if (len < GLM_EPSILON) {\n      return null;\n    }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n    const t = 1 - c;\n\n    const a00 = a[0];\n    const a01 = a[1];\n    const a02 = a[2];\n    const a03 = a[3];\n    const a10 = a[4];\n    const a11 = a[5];\n    const a12 = a[6];\n    const a13 = a[7];\n    const a20 = a[8];\n    const a21 = a[9];\n    const a22 = a[10];\n    const a23 = a[11];\n\n    // Construct the elements of the rotation matrix\n    const b00 = x * x * t + c;\n    const b01 = y * x * t + z * s;\n    const b02 = z * x * t - y * s;\n    const b10 = x * y * t - z * s;\n    const b11 = y * y * t + c;\n    const b12 = z * y * t + x * s;\n    const b20 = x * z * t + y * s;\n    const b21 = y * z * t - x * s;\n    const b22 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n    if (a !== out) {\n      // If the source and destination differ, copy the unchanged last row\n      out[12] = a[12];\n      out[13] = a[13];\n      out[14] = a[14];\n      out[15] = a[15];\n    }\n    return out;\n  }\n\n  /**\n   * Rotates a matrix by the given angle around the X axis\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to rotate\n   * @param rad - the angle to rotate the matrix by\n   * @returns `out`\n   */\n  static rotateX<T extends Mat4Like>(out: T, a: Readonly<Mat4Like>, rad: number): T {\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n    const a10 = a[4];\n    const a11 = a[5];\n    const a12 = a[6];\n    const a13 = a[7];\n    const a20 = a[8];\n    const a21 = a[9];\n    const a22 = a[10];\n    const a23 = a[11];\n\n    if (a !== out) {\n      // If the source and destination differ, copy the unchanged rows\n      out[0] = a[0];\n      out[1] = a[1];\n      out[2] = a[2];\n      out[3] = a[3];\n      out[12] = a[12];\n      out[13] = a[13];\n      out[14] = a[14];\n      out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[4] = a10 * c + a20 * s;\n    out[5] = a11 * c + a21 * s;\n    out[6] = a12 * c + a22 * s;\n    out[7] = a13 * c + a23 * s;\n    out[8] = a20 * c - a10 * s;\n    out[9] = a21 * c - a11 * s;\n    out[10] = a22 * c - a12 * s;\n    out[11] = a23 * c - a13 * s;\n    return out;\n  }\n\n  /**\n   * Rotates a matrix by the given angle around the Y axis\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to rotate\n   * @param rad - the angle to rotate the matrix by\n   * @returns `out`\n   */\n  static rotateY<T extends Mat4Like>(out: T, a: Readonly<Mat4Like>, rad: number): T {\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n    const a00 = a[0];\n    const a01 = a[1];\n    const a02 = a[2];\n    const a03 = a[3];\n    const a20 = a[8];\n    const a21 = a[9];\n    const a22 = a[10];\n    const a23 = a[11];\n\n    if (a !== out) {\n      // If the source and destination differ, copy the unchanged rows\n      out[4] = a[4];\n      out[5] = a[5];\n      out[6] = a[6];\n      out[7] = a[7];\n      out[12] = a[12];\n      out[13] = a[13];\n      out[14] = a[14];\n      out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[0] = a00 * c - a20 * s;\n    out[1] = a01 * c - a21 * s;\n    out[2] = a02 * c - a22 * s;\n    out[3] = a03 * c - a23 * s;\n    out[8] = a00 * s + a20 * c;\n    out[9] = a01 * s + a21 * c;\n    out[10] = a02 * s + a22 * c;\n    out[11] = a03 * s + a23 * c;\n    return out;\n  }\n\n  /**\n   * Rotates a matrix by the given angle around the Z axis\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to rotate\n   * @param rad - the angle to rotate the matrix by\n   * @returns `out`\n   */\n  static rotateZ<T extends Mat4Like>(out: T, a: Readonly<Mat4Like>, rad: number): T {\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n    const a00 = a[0];\n    const a01 = a[1];\n    const a02 = a[2];\n    const a03 = a[3];\n    const a10 = a[4];\n    const a11 = a[5];\n    const a12 = a[6];\n    const a13 = a[7];\n\n    if (a !== out) {\n      // If the source and destination differ, copy the unchanged last row\n      out[8] = a[8];\n      out[9] = a[9];\n      out[10] = a[10];\n      out[11] = a[11];\n      out[12] = a[12];\n      out[13] = a[13];\n      out[14] = a[14];\n      out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[0] = a00 * c + a10 * s;\n    out[1] = a01 * c + a11 * s;\n    out[2] = a02 * c + a12 * s;\n    out[3] = a03 * c + a13 * s;\n    out[4] = a10 * c - a00 * s;\n    out[5] = a11 * c - a01 * s;\n    out[6] = a12 * c - a02 * s;\n    out[7] = a13 * c - a03 * s;\n    return out;\n  }\n\n  /**\n   * Creates a {@link Mat4} from a vector translation\n   * This is equivalent to (but much faster than):\n   * ```js\n   *   mat4.identity(dest);\n   *   mat4.translate(dest, dest, vec);\n   * ```\n   * @category Static\n   *\n   * @param out - {@link Mat4} receiving operation result\n   * @param v - Translation vector\n   * @returns `out`\n   */\n  static fromTranslation<T extends Mat4Like>(out: T, v: Readonly<Vec3Like>): T {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n    return out;\n  }\n\n  /**\n   * Creates a {@link Mat4} from a vector scaling\n   * This is equivalent to (but much faster than):\n   * ```js\n   *   mat4.identity(dest);\n   *   mat4.scale(dest, dest, vec);\n   * ```\n   * @category Static\n   *\n   * @param out - {@link Mat4} receiving operation result\n   * @param v - Scaling vector\n   * @returns `out`\n   */\n  static fromScaling<T extends Mat4Like>(out: T, v: Readonly<Vec3Like>): T {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = v[1];\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = v[2];\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n  }\n\n  /**\n   * Creates a {@link Mat4} from a given angle around a given axis\n   * This is equivalent to (but much faster than):\n   * ```js\n   *   mat4.identity(dest);\n   *   mat4.rotate(dest, dest, rad, axis);\n   * ```\n   * @category Static\n   *\n   * @param out - {@link Mat4} receiving operation result\n   * @param rad - the angle to rotate the matrix by\n   * @param axis - the axis to rotate around\n   * @returns `out` or `null` if `axis` has a length of 0\n   */\n  static fromRotation<T extends Mat4Like>(out: T, rad: number, axis: Readonly<Vec3Like>): T | null {\n    let x = axis[0];\n    let y = axis[1];\n    let z = axis[2];\n    let len = Math.sqrt(x * x + y * y + z * z);\n\n    if (len < GLM_EPSILON) {\n      return null;\n    }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n    const t = 1 - c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = x * x * t + c;\n    out[1] = y * x * t + z * s;\n    out[2] = z * x * t - y * s;\n    out[3] = 0;\n    out[4] = x * y * t - z * s;\n    out[5] = y * y * t + c;\n    out[6] = z * y * t + x * s;\n    out[7] = 0;\n    out[8] = x * z * t + y * s;\n    out[9] = y * z * t - x * s;\n    out[10] = z * z * t + c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n  }\n\n  /**\n   * Creates a matrix from the given angle around the X axis\n   * This is equivalent to (but much faster than):\n   * ```js\n   *   mat4.identity(dest);\n   *   mat4.rotateX(dest, dest, rad);\n   * ```\n   * @category Static\n   *\n   * @param out - mat4 receiving operation result\n   * @param rad - the angle to rotate the matrix by\n   * @returns `out`\n   */\n  static fromXRotation<T extends Mat4Like>(out: T, rad: number): T {\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n\n    // Perform axis-specific matrix multiplication\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = c;\n    out[6] = s;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = -s;\n    out[10] = c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n  }\n\n  /**\n   * Creates a matrix from the given angle around the Y axis\n   * This is equivalent to (but much faster than):\n   * ```js\n   *   mat4.identity(dest);\n   *   mat4.rotateY(dest, dest, rad);\n   * ```\n   * @category Static\n   *\n   * @param out - mat4 receiving operation result\n   * @param rad - the angle to rotate the matrix by\n   * @returns `out`\n   */\n  static fromYRotation<T extends Mat4Like>(out: T, rad: number): T {\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n\n    // Perform axis-specific matrix multiplication\n    out[0] = c;\n    out[1] = 0;\n    out[2] = -s;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = s;\n    out[9] = 0;\n    out[10] = c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n  }\n\n  /**\n   * Creates a matrix from the given angle around the Z axis\n   * This is equivalent to (but much faster than):\n   * ```js\n   *   mat4.identity(dest);\n   *   mat4.rotateZ(dest, dest, rad);\n   * ```\n   * @category Static\n   *\n   * @param out - mat4 receiving operation result\n   * @param rad - the angle to rotate the matrix by\n   * @returns `out`\n   */\n  static fromZRotation<T extends Mat4Like>(out: T, rad: number): T {\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n\n    // Perform axis-specific matrix multiplication\n    out[0] = c;\n    out[1] = s;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = -s;\n    out[5] = c;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n  }\n\n  /**\n   * Creates a matrix from a quaternion rotation and vector translation\n   * This is equivalent to (but much faster than):\n   * ```js\n   *   mat4.identity(dest);\n   *   mat4.translate(dest, vec);\n   *   let quatMat = mat4.create();\n   *   quat4.toMat4(quat, quatMat);\n   *   mat4.multiply(dest, quatMat);\n   * ```\n   * @category Static\n   *\n   * @param out - mat4 receiving operation result\n   * @param q - Rotation quaternion\n   * @param v - Translation vector\n   * @returns `out`\n   */\n  static fromRotationTranslation<T extends Mat4Like>(out: T, q: Readonly<QuatLike>, v: Readonly<Vec3Like>): T {\n    // Quaternion math\n    const x = q[0];\n    const y = q[1];\n    const z = q[2];\n    const w = q[3];\n    const x2 = x + x;\n    const y2 = y + y;\n    const z2 = z + z;\n\n    const xx = x * x2;\n    const xy = x * y2;\n    const xz = x * z2;\n    const yy = y * y2;\n    const yz = y * z2;\n    const zz = z * z2;\n    const wx = w * x2;\n    const wy = w * y2;\n    const wz = w * z2;\n\n    out[0] = 1 - (yy + zz);\n    out[1] = xy + wz;\n    out[2] = xz - wy;\n    out[3] = 0;\n    out[4] = xy - wz;\n    out[5] = 1 - (xx + zz);\n    out[6] = yz + wx;\n    out[7] = 0;\n    out[8] = xz + wy;\n    out[9] = yz - wx;\n    out[10] = 1 - (xx + yy);\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n  }\n\n  /**\n   * Sets a {@link Mat4} from a {@link Quat2}.\n   * @category Static\n   *\n   * @param out - Matrix\n   * @param a - Dual Quaternion\n   * @returns `out`\n   */\n  static fromQuat2<T extends Mat4Like>(out: T, a: Quat2Like): T {\n    const bx = -a[0];\n    const by = -a[1];\n    const bz = -a[2];\n    const bw = a[3];\n    const ax = a[4];\n    const ay = a[5];\n    const az = a[6];\n    const aw = a[7];\n\n    const magnitude = bx * bx + by * by + bz * bz + bw * bw;\n\n    // Only scale if it makes sense\n    if (magnitude > 0) {\n      Mat4.#TMP_VEC3[0] = ((ax * bw + aw * bx + ay * bz - az * by) * 2) / magnitude;\n      Mat4.#TMP_VEC3[1] = ((ay * bw + aw * by + az * bx - ax * bz) * 2) / magnitude;\n      Mat4.#TMP_VEC3[2] = ((az * bw + aw * bz + ax * by - ay * bx) * 2) / magnitude;\n    } else {\n      Mat4.#TMP_VEC3[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n      Mat4.#TMP_VEC3[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n      Mat4.#TMP_VEC3[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n    }\n    Mat4.fromRotationTranslation(out, a as QuatLike, Mat4.#TMP_VEC3);\n    return out;\n  }\n\n  /**\n   * Calculates a {@link Mat4} normal matrix (adjoint) from a {@link Mat4}\n   * See https://www.shadertoy.com/view/3s33zj for details.\n   * @category Static\n   *\n   * @param out - Matrix receiving operation result\n   * @param a - Mat4 to derive the normal matrix from\n   * @returns `out`\n   */\n  static normalFromMat4<T extends Mat4Like>(out: T, a: Readonly<Mat4Like>): T {\n    // Only difference from Mat3.adjoint() is the input and output indices.\n    const a00 = a[0];\n    const a01 = a[1];\n    const a02 = a[2];\n\n    const a10 = a[4];\n    const a11 = a[5];\n    const a12 = a[6];\n\n    const a20 = a[8];\n    const a21 = a[9];\n    const a22 = a[10];\n\n    out[0] = a11 * a22 - a12 * a21;\n    out[1] = a02 * a21 - a01 * a22;\n    out[2] = a01 * a12 - a02 * a11;\n    out[3] = 0;\n\n    out[4] = a12 * a20 - a10 * a22;\n    out[5] = a00 * a22 - a02 * a20;\n    out[6] = a02 * a10 - a00 * a12;\n    out[7] = 0;\n\n    out[8] = a10 * a21 - a11 * a20;\n    out[9] = a01 * a20 - a00 * a21;\n    out[10] = a00 * a11 - a01 * a10;\n    out[11] = 0;\n\n    // No translation\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n\n    return out;\n  }\n\n  /**\n   * Alias for {@link Mat4.adjointFromMat4}\n   * @category Static\n   * @deprecated Use {@link Mat4.normalFromMat4}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static normalFromMat4Fast<T extends Mat4Like>(out: T, a: Readonly<Mat4Like>): T { return out; }\n\n  /**\n   * Returns the translation vector component of a transformation\n   * matrix. If a matrix is built with fromRotationTranslation,\n   * the returned vector will be the same as the translation vector\n   * originally supplied.\n   * @category Static\n   *\n   * @param  {vec3} out Vector to receive translation component\n   * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n   * @return {vec3} out\n   */\n  static getTranslation<T extends Vec3Like>(out: T, mat: Readonly<Mat4Like>): T {\n    out[0] = mat[12];\n    out[1] = mat[13];\n    out[2] = mat[14];\n\n    return out;\n  }\n\n  /**\n   * Returns the scaling factor component of a transformation\n   * matrix. If a matrix is built with fromRotationTranslationScale\n   * with a normalized Quaternion parameter, the returned vector will be\n   * the same as the scaling vector\n   * originally supplied.\n   * @category Static\n   *\n   * @param  {vec3} out Vector to receive scaling factor component\n   * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n   * @return {vec3} out\n   */\n  static getScaling<T extends Vec3Like>(out: T, mat: Readonly<Mat4Like>): T {\n    const m11 = mat[0];\n    const m12 = mat[1];\n    const m13 = mat[2];\n    const m21 = mat[4];\n    const m22 = mat[5];\n    const m23 = mat[6];\n    const m31 = mat[8];\n    const m32 = mat[9];\n    const m33 = mat[10];\n\n    out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n    out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n    out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n\n    return out;\n  }\n\n  /**\n   * Returns a quaternion representing the rotational component\n   * of a transformation matrix. If a matrix is built with\n   * fromRotationTranslation, the returned quaternion will be the\n   * same as the quaternion originally supplied.\n   * @category Static\n   *\n   * @param out - Quaternion to receive the rotation component\n   * @param mat - Matrix to be decomposed (input)\n   * @return `out`\n   */\n  static getRotation<T extends QuatLike>(out: T, mat: Readonly<Mat4Like>): T {\n    Mat4.getScaling(Mat4.#TMP_VEC3, mat);\n\n    const is1 = 1 / Mat4.#TMP_VEC3[0];\n    const is2 = 1 / Mat4.#TMP_VEC3[1];\n    const is3 = 1 / Mat4.#TMP_VEC3[2];\n\n    const sm11 = mat[0] * is1;\n    const sm12 = mat[1] * is2;\n    const sm13 = mat[2] * is3;\n    const sm21 = mat[4] * is1;\n    const sm22 = mat[5] * is2;\n    const sm23 = mat[6] * is3;\n    const sm31 = mat[8] * is1;\n    const sm32 = mat[9] * is2;\n    const sm33 = mat[10] * is3;\n\n    const trace = sm11 + sm22 + sm33;\n    let S = 0;\n\n    if (trace > 0) {\n      S = Math.sqrt(trace + 1.0) * 2;\n      out[3] = 0.25 * S;\n      out[0] = (sm23 - sm32) / S;\n      out[1] = (sm31 - sm13) / S;\n      out[2] = (sm12 - sm21) / S;\n    } else if (sm11 > sm22 && sm11 > sm33) {\n      S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n      out[3] = (sm23 - sm32) / S;\n      out[0] = 0.25 * S;\n      out[1] = (sm12 + sm21) / S;\n      out[2] = (sm31 + sm13) / S;\n    } else if (sm22 > sm33) {\n      S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n      out[3] = (sm31 - sm13) / S;\n      out[0] = (sm12 + sm21) / S;\n      out[1] = 0.25 * S;\n      out[2] = (sm23 + sm32) / S;\n    } else {\n      S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n      out[3] = (sm12 - sm21) / S;\n      out[0] = (sm31 + sm13) / S;\n      out[1] = (sm23 + sm32) / S;\n      out[2] = 0.25 * S;\n    }\n\n    return out;\n  }\n\n  /**\n   * Decomposes a transformation matrix into its rotation, translation\n   * and scale components. Returns only the rotation component\n   * @category Static\n   *\n   * @param out_r - Quaternion to receive the rotation component\n   * @param out_t - Vector to receive the translation vector\n   * @param out_s - Vector to receive the scaling factor\n   * @param mat - Matrix to be decomposed (input)\n   * @returns `out_r`\n   */\n  static decompose<T extends QuatLike>(out_r: T, out_t: Vec3Like, out_s: Vec3Like, mat: Readonly<Mat4Like>): T {\n    out_t[0] = mat[12];\n    out_t[1] = mat[13];\n    out_t[2] = mat[14];\n\n    const m11 = mat[0];\n    const m12 = mat[1];\n    const m13 = mat[2];\n    const m21 = mat[4];\n    const m22 = mat[5];\n    const m23 = mat[6];\n    const m31 = mat[8];\n    const m32 = mat[9];\n    const m33 = mat[10];\n\n    out_s[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n    out_s[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n    out_s[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n\n    const is1 = 1 / out_s[0];\n    const is2 = 1 / out_s[1];\n    const is3 = 1 / out_s[2];\n\n    const sm11 = m11 * is1;\n    const sm12 = m12 * is2;\n    const sm13 = m13 * is3;\n    const sm21 = m21 * is1;\n    const sm22 = m22 * is2;\n    const sm23 = m23 * is3;\n    const sm31 = m31 * is1;\n    const sm32 = m32 * is2;\n    const sm33 = m33 * is3;\n\n    const trace = sm11 + sm22 + sm33;\n    let S = 0;\n\n    if (trace > 0) {\n      S = Math.sqrt(trace + 1.0) * 2;\n      out_r[3] = 0.25 * S;\n      out_r[0] = (sm23 - sm32) / S;\n      out_r[1] = (sm31 - sm13) / S;\n      out_r[2] = (sm12 - sm21) / S;\n    } else if (sm11 > sm22 && sm11 > sm33) {\n      S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n      out_r[3] = (sm23 - sm32) / S;\n      out_r[0] = 0.25 * S;\n      out_r[1] = (sm12 + sm21) / S;\n      out_r[2] = (sm31 + sm13) / S;\n    } else if (sm22 > sm33) {\n      S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n      out_r[3] = (sm31 - sm13) / S;\n      out_r[0] = (sm12 + sm21) / S;\n      out_r[1] = 0.25 * S;\n      out_r[2] = (sm23 + sm32) / S;\n    } else {\n      S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n      out_r[3] = (sm12 - sm21) / S;\n      out_r[0] = (sm31 + sm13) / S;\n      out_r[1] = (sm23 + sm32) / S;\n      out_r[2] = 0.25 * S;\n    }\n\n    return out_r;\n  }\n\n  /**\n   * Creates a matrix from a quaternion rotation, vector translation and vector scale\n   * This is equivalent to (but much faster than):\n   * ```js\n   *   mat4.identity(dest);\n   *   mat4.translate(dest, vec);\n   *   let quatMat = mat4.create();\n   *   quat4.toMat4(quat, quatMat);\n   *   mat4.multiply(dest, quatMat);\n   *   mat4.scale(dest, scale);\n   * ```\n   * @category Static\n   *\n   * @param out - mat4 receiving operation result\n   * @param q - Rotation quaternion\n   * @param v - Translation vector\n   * @param s - Scaling vector\n   * @returns `out`\n   */\n  static fromRotationTranslationScale<T extends Mat4Like>(out: T, q: Readonly<QuatLike>, v: Readonly<Vec3Like>,\n    s: Readonly<Vec3Like>): T {\n    // Quaternion math\n    const x = q[0];\n    const y = q[1];\n    const z = q[2];\n    const w = q[3];\n    const x2 = x + x;\n    const y2 = y + y;\n    const z2 = z + z;\n\n    const xx = x * x2;\n    const xy = x * y2;\n    const xz = x * z2;\n    const yy = y * y2;\n    const yz = y * z2;\n    const zz = z * z2;\n    const wx = w * x2;\n    const wy = w * y2;\n    const wz = w * z2;\n    const sx = s[0];\n    const sy = s[1];\n    const sz = s[2];\n\n    out[0] = (1 - (yy + zz)) * sx;\n    out[1] = (xy + wz) * sx;\n    out[2] = (xz - wy) * sx;\n    out[3] = 0;\n    out[4] = (xy - wz) * sy;\n    out[5] = (1 - (xx + zz)) * sy;\n    out[6] = (yz + wx) * sy;\n    out[7] = 0;\n    out[8] = (xz + wy) * sz;\n    out[9] = (yz - wx) * sz;\n    out[10] = (1 - (xx + yy)) * sz;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n  }\n\n  /**\n   * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the\n   * given origin. This is equivalent to (but much faster than):\n   * ```js\n   *   mat4.identity(dest);\n   *   mat4.translate(dest, vec);\n   *   mat4.translate(dest, origin);\n   *   let quatMat = mat4.create();\n   *   quat4.toMat4(quat, quatMat);\n   *   mat4.multiply(dest, quatMat);\n   *   mat4.scale(dest, scale)\n   *   mat4.translate(dest, negativeOrigin);\n   * ```\n   * @category Static\n   *\n   * @param out - mat4 receiving operation result\n   * @param q - Rotation quaternion\n   * @param v - Translation vector\n   * @param s - Scaling vector\n   * @param o - The origin vector around which to scale and rotate\n   * @returns `out`\n   */\n  static fromRotationTranslationScaleOrigin<T extends Mat4Like>(out: T, q: Readonly<QuatLike>, v: Readonly<Vec3Like>,\n    s: Readonly<Vec3Like>, o: Readonly<Vec3Like>): T {\n    // Quaternion math\n    const x = q[0];\n    const y = q[1];\n    const z = q[2];\n    const w = q[3];\n    const x2 = x + x;\n    const y2 = y + y;\n    const z2 = z + z;\n\n    const xx = x * x2;\n    const xy = x * y2;\n    const xz = x * z2;\n    const yy = y * y2;\n    const yz = y * z2;\n    const zz = z * z2;\n    const wx = w * x2;\n    const wy = w * y2;\n    const wz = w * z2;\n\n    const sx = s[0];\n    const sy = s[1];\n    const sz = s[2];\n\n    const ox = o[0];\n    const oy = o[1];\n    const oz = o[2];\n\n    const out0 = (1 - (yy + zz)) * sx;\n    const out1 = (xy + wz) * sx;\n    const out2 = (xz - wy) * sx;\n    const out4 = (xy - wz) * sy;\n    const out5 = (1 - (xx + zz)) * sy;\n    const out6 = (yz + wx) * sy;\n    const out8 = (xz + wy) * sz;\n    const out9 = (yz - wx) * sz;\n    const out10 = (1 - (xx + yy)) * sz;\n\n    out[0] = out0;\n    out[1] = out1;\n    out[2] = out2;\n    out[3] = 0;\n    out[4] = out4;\n    out[5] = out5;\n    out[6] = out6;\n    out[7] = 0;\n    out[8] = out8;\n    out[9] = out9;\n    out[10] = out10;\n    out[11] = 0;\n    out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n    out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n    out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n    out[15] = 1;\n\n    return out;\n  }\n\n  /**\n   * Calculates a 4x4 matrix from the given quaternion\n   * @category Static\n   *\n   * @param out - mat4 receiving operation result\n   * @param q - Quaternion to create matrix from\n   * @returns `out`\n   */\n  static fromQuat<T extends Mat4Like>(out: T, q: Readonly<QuatLike>): T {\n    const x = q[0];\n    const y = q[1];\n    const z = q[2];\n    const w = q[3];\n    const x2 = x + x;\n    const y2 = y + y;\n    const z2 = z + z;\n\n    const xx = x * x2;\n    const yx = y * x2;\n    const yy = y * y2;\n    const zx = z * x2;\n    const zy = z * y2;\n    const zz = z * z2;\n    const wx = w * x2;\n    const wy = w * y2;\n    const wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[1] = yx + wz;\n    out[2] = zx - wy;\n    out[3] = 0;\n\n    out[4] = yx - wz;\n    out[5] = 1 - xx - zz;\n    out[6] = zy + wx;\n    out[7] = 0;\n\n    out[8] = zx + wy;\n    out[9] = zy - wx;\n    out[10] = 1 - xx - yy;\n    out[11] = 0;\n\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n\n    return out;\n  }\n\n  /**\n   * Generates a frustum matrix with the given bounds\n   * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n   * which matches WebGL/OpenGL's clip volume.\n   * Passing null/undefined/no value for far will generate infinite projection matrix.\n   * @category Static\n   *\n   * @param out - mat4 frustum matrix will be written into\n   * @param left - Left bound of the frustum\n   * @param right - Right bound of the frustum\n   * @param bottom - Bottom bound of the frustum\n   * @param top - Top bound of the frustum\n   * @param near - Near bound of the frustum\n   * @param far -  Far bound of the frustum, can be null or Infinity\n   * @returns `out`\n   */\n  static frustumNO<T extends Mat4Like>(out: T, left: number, right: number, bottom: number, top: number, near: number,\n    far = Infinity): T {\n    const rl = 1 / (right - left);\n    const tb = 1 / (top - bottom);\n    out[0] = near * 2 * rl;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = near * 2 * tb;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = (right + left) * rl;\n    out[9] = (top + bottom) * tb;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[15] = 0;\n\n    if (far != null && far !== Infinity) {\n      const nf = 1 / (near - far);\n      out[10] = (far + near) * nf;\n      out[14] = 2 * far * near * nf;\n    } else {\n      out[10] = -1;\n      out[14] = -2 * near;\n    }\n    return out;\n  }\n\n  /**\n   * Alias for {@link Mat4.frustumNO}\n   * @category Static\n   * @deprecated Use {@link Mat4.frustumNO} or {@link Mat4.frustumZO} explicitly\n   */\n  static frustum<T extends Mat4Like>(out: T, left: number, right: number, bottom: number, top: number, near: number,\n    far = Infinity): T { return out; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Generates a frustum matrix with the given bounds\n   * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n   * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n   * Passing null/undefined/no value for far will generate infinite projection matrix.\n   * @category Static\n   *\n   * @param out - mat4 frustum matrix will be written into\n   * @param left - Left bound of the frustum\n   * @param right - Right bound of the frustum\n   * @param bottom - Bottom bound of the frustum\n   * @param top - Top bound of the frustum\n   * @param near - Near bound of the frustum\n   * @param far - Far bound of the frustum, can be null or Infinity\n   * @returns `out`\n   */\n  static frustumZO<T extends Mat4Like>(out: T, left: number, right: number, bottom: number, top: number, near: number,\n    far = Infinity): T {\n    const rl = 1 / (right - left);\n    const tb = 1 / (top - bottom);\n    out[0] = near * 2 * rl;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = near * 2 * tb;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = (right + left) * rl;\n    out[9] = (top + bottom) * tb;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[15] = 0;\n\n    if (far != null && far !== Infinity) {\n      const nf = 1 / (near - far);\n      out[10] = far * nf;\n      out[14] = far * near * nf;\n    } else {\n      out[10] = -1;\n      out[14] = -near;\n    }\n    return out;\n  }\n\n  /**\n   * Generates a perspective projection matrix with the given bounds.\n   * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n   * which matches WebGL/OpenGL's clip volume.\n   * Passing null/undefined/no value for far will generate infinite projection matrix.\n   * @category Static\n   *\n   * @param out - mat4 frustum matrix will be written into\n   * @param fovy - Vertical field of view in radians\n   * @param aspect - Aspect ratio. typically viewport width/height\n   * @param near - Near bound of the frustum\n   * @param far - Far bound of the frustum, can be null or Infinity\n   * @returns `out`\n   */\n  static perspectiveNO<T extends Mat4Like>(out: T, fovy: number, aspect: number, near: number, far = Infinity): T {\n    const f = 1.0 / Math.tan(fovy / 2);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[15] = 0;\n    if (far != null && far !== Infinity) {\n      const nf = 1 / (near - far);\n      out[10] = (far + near) * nf;\n      out[14] = 2 * far * near * nf;\n    } else {\n      out[10] = -1;\n      out[14] = -2 * near;\n    }\n    return out;\n  }\n\n  /**\n   * Alias for {@link Mat4.perspectiveNO}\n   * @category Static\n   * @deprecated Use {@link Mat4.perspectiveNO} or {@link Mat4.perspectiveZO} explicitly\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static perspective<T extends Mat4Like>(out: T, fovy: number, aspect: number, near: number, far = Infinity): T {\n    return out;\n  }\n\n  /**\n   * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n   * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n   * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n   * Passing null/undefined/no value for far will generate infinite projection matrix.\n   * @category Static\n   *\n   * @param out - mat4 frustum matrix will be written into\n   * @param fovy - Vertical field of view in radians\n   * @param aspect - Aspect ratio. typically viewport width/height\n   * @param near - Near bound of the frustum\n   * @param far - Far bound of the frustum, can be null or Infinity\n   * @returns `out`\n   */\n  static perspectiveZO<T extends Mat4Like>(out: T, fovy: number, aspect: number, near: number, far = Infinity): T {\n    const f = 1.0 / Math.tan(fovy / 2);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[15] = 0;\n    if (far != null && far !== Infinity) {\n      const nf = 1 / (near - far);\n      out[10] = far * nf;\n      out[14] = far * near * nf;\n    } else {\n      out[10] = -1;\n      out[14] = -near;\n    }\n    return out;\n  }\n\n  /**\n   * Generates a perspective projection matrix with the given field of view. This is primarily useful for generating\n   * projection matrices to be used with the still experimental WebVR API.\n   * @category Static\n   *\n   * @param out - mat4 frustum matrix will be written into\n   * @param fov - Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n   * @param near - Near bound of the frustum\n   * @param far - Far bound of the frustum\n   * @returns `out`\n   * @deprecated\n   */\n  static perspectiveFromFieldOfView<T extends Mat4Like>(out: T,\n    fov: { upDegrees: number, downDegrees: number, leftDegrees: number, rightDegrees: number }, near: number,\n    far: number): T {\n    const upTan = Math.tan((fov.upDegrees * Math.PI) / 180.0);\n    const downTan = Math.tan((fov.downDegrees * Math.PI) / 180.0);\n    const leftTan = Math.tan((fov.leftDegrees * Math.PI) / 180.0);\n    const rightTan = Math.tan((fov.rightDegrees * Math.PI) / 180.0);\n    const xScale = 2.0 / (leftTan + rightTan);\n    const yScale = 2.0 / (upTan + downTan);\n\n    out[0] = xScale;\n    out[1] = 0.0;\n    out[2] = 0.0;\n    out[3] = 0.0;\n    out[4] = 0.0;\n    out[5] = yScale;\n    out[6] = 0.0;\n    out[7] = 0.0;\n    out[8] = -((leftTan - rightTan) * xScale * 0.5);\n    out[9] = (upTan - downTan) * yScale * 0.5;\n    out[10] = far / (near - far);\n    out[11] = -1.0;\n    out[12] = 0.0;\n    out[13] = 0.0;\n    out[14] = (far * near) / (near - far);\n    out[15] = 0.0;\n    return out;\n  }\n\n  /**\n   * Generates an orthogonal projection matrix with the given bounds. The near / far clip planes correspond to a\n   * normalized device coordinate Z range of [-1, 1], which matches WebGL / OpenGLs clip volume.\n   * @category Static\n   *\n   * @param out - mat4 frustum matrix will be written into\n   * @param left - Left bound of the frustum\n   * @param right - Right bound of the frustum\n   * @param bottom - Bottom bound of the frustum\n   * @param top - Top bound of the frustum\n   * @param near - Near bound of the frustum\n   * @param far - Far bound of the frustum\n   * @returns `out`\n   */\n  static orthoNO<T extends Mat4Like>(out: T, left: number, right: number, bottom: number, top: number, near: number,\n    far: number): T {\n    const lr = 1 / (left - right);\n    const bt = 1 / (bottom - top);\n    const nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 2 * nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = (far + near) * nf;\n    out[15] = 1;\n    return out;\n  }\n\n  /**\n   * Alias for {@link Mat4.orthoNO}\n   * @category Static\n   * @deprecated Use {@link Mat4.orthoNO} or {@link Mat4.orthoZO} explicitly\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static ortho<T extends Mat4Like>(out: T, left: number, right: number, bottom: number, top: number, near: number,\n    far: number): T { return out; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Generates a orthogonal projection matrix with the given bounds. The near / far clip planes correspond to a\n   * normalized device coordinate Z range of [0, 1], which matches WebGPU / Vulkan / DirectX / Metal's clip volume.\n   * @category Static\n   *\n   * @param out - mat4 frustum matrix will be written into\n   * @param left - Left bound of the frustum\n   * @param right - Right bound of the frustum\n   * @param bottom - Bottom bound of the frustum\n   * @param top - Top bound of the frustum\n   * @param near - Near bound of the frustum\n   * @param far - Far bound of the frustum\n   * @returns `out`\n   */\n  static orthoZO<T extends Mat4Like>(out: T, left: number, right: number, bottom: number, top: number, near: number,\n    far: number): T {\n    const lr = 1 / (left - right);\n    const bt = 1 / (bottom - top);\n    const nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = near * nf;\n    out[15] = 1;\n    return out;\n  }\n\n  /**\n   * Generates a look-at matrix with the given eye position, focal point, and up axis. If you want a matrix that\n   * actually makes an object look at another object, you should use targetTo instead.\n   * @category Static\n   *\n   * @param out - mat4 frustum matrix will be written into\n   * @param eye - Position of the viewer\n   * @param center - Point the viewer is looking at\n   * @param up - vec3 pointing up\n   * @returns `out`\n   */\n  static lookAt<T extends Mat4Like>(out: T, eye: Readonly<Vec3Like>, center: Readonly<Vec3Like>,\n    up: Readonly<Vec3Like>): T {\n    const eyex = eye[0];\n    const eyey = eye[1];\n    const eyez = eye[2];\n    const upx = up[0];\n    const upy = up[1];\n    const upz = up[2];\n    const centerx = center[0];\n    const centery = center[1];\n    const centerz = center[2];\n\n    if (\n      Math.abs(eyex - centerx) < GLM_EPSILON &&\n      Math.abs(eyey - centery) < GLM_EPSILON &&\n      Math.abs(eyez - centerz) < GLM_EPSILON\n    ) {\n      return Mat4.identity(out);\n    }\n\n    let z0 = eyex - centerx;\n    let z1 = eyey - centery;\n    let z2 = eyez - centerz;\n\n    let len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n\n    let x0 = upy * z2 - upz * z1;\n    let x1 = upz * z0 - upx * z2;\n    let x2 = upx * z1 - upy * z0;\n    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n    if (!len) {\n      x0 = 0;\n      x1 = 0;\n      x2 = 0;\n    } else {\n      len = 1 / len;\n      x0 *= len;\n      x1 *= len;\n      x2 *= len;\n    }\n\n    let y0 = z1 * x2 - z2 * x1;\n    let y1 = z2 * x0 - z0 * x2;\n    let y2 = z0 * x1 - z1 * x0;\n\n    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n    if (!len) {\n      y0 = 0;\n      y1 = 0;\n      y2 = 0;\n    } else {\n      len = 1 / len;\n      y0 *= len;\n      y1 *= len;\n      y2 *= len;\n    }\n\n    out[0] = x0;\n    out[1] = y0;\n    out[2] = z0;\n    out[3] = 0;\n    out[4] = x1;\n    out[5] = y1;\n    out[6] = z1;\n    out[7] = 0;\n    out[8] = x2;\n    out[9] = y2;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n    out[15] = 1;\n\n    return out;\n  }\n\n  /**\n   * Generates a matrix that makes something look at something else.\n   * @category Static\n   *\n   * @param out - mat4 frustum matrix will be written into\n   * @param eye - Position of the viewer\n   * @param target - Point the viewer is looking at\n   * @param up - vec3 pointing up\n   * @returns `out`\n   */\n  static targetTo<T extends Mat4Like>(out: T, eye: Readonly<Vec3Like>, target: Readonly<Vec3Like>,\n    up: Readonly<Vec3Like>): T {\n    const eyex = eye[0];\n    const eyey = eye[1];\n    const eyez = eye[2];\n    const upx = up[0];\n    const upy = up[1];\n    const upz = up[2];\n\n    let z0 = eyex - target[0];\n    let z1 = eyey - target[1];\n    let z2 = eyez - target[2];\n\n    let len = z0 * z0 + z1 * z1 + z2 * z2;\n    if (len > 0) {\n      len = 1 / Math.sqrt(len);\n      z0 *= len;\n      z1 *= len;\n      z2 *= len;\n    }\n\n    let x0 = upy * z2 - upz * z1;\n    let x1 = upz * z0 - upx * z2;\n    let x2 = upx * z1 - upy * z0;\n\n    len = x0 * x0 + x1 * x1 + x2 * x2;\n    if (len > 0) {\n      len = 1 / Math.sqrt(len);\n      x0 *= len;\n      x1 *= len;\n      x2 *= len;\n    }\n\n    out[0] = x0;\n    out[1] = x1;\n    out[2] = x2;\n    out[3] = 0;\n    out[4] = z1 * x2 - z2 * x1;\n    out[5] = z2 * x0 - z0 * x2;\n    out[6] = z0 * x1 - z1 * x0;\n    out[7] = 0;\n    out[8] = z0;\n    out[9] = z1;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = eyex;\n    out[13] = eyey;\n    out[14] = eyez;\n    out[15] = 1;\n    return out;\n  }\n\n  /**\n   * Returns Frobenius norm of a {@link Mat4}\n   * @category Static\n   *\n   * @param a - the matrix to calculate Frobenius norm of\n   * @returns Frobenius norm\n   */\n  static frob(a: Readonly<Mat4Like>): number {\n    return Math.sqrt(\n      a[0] * a[0] +\n      a[1] * a[1] +\n      a[2] * a[2] +\n      a[3] * a[3] +\n      a[4] * a[4] +\n      a[5] * a[5] +\n      a[6] * a[6] +\n      a[7] * a[7] +\n      a[8] * a[8] +\n      a[9] * a[9] +\n      a[10] * a[10] +\n      a[11] * a[11] +\n      a[12] * a[12] +\n      a[13] * a[13] +\n      a[14] * a[14] +\n      a[15] * a[15]\n    );\n  }\n\n  /**\n   * Adds two {@link Mat4}'s\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static add<T extends Mat4Like>(out: T, a: Readonly<Mat4Like>, b: Readonly<Mat4Like>): T {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    out[9] = a[9] + b[9];\n    out[10] = a[10] + b[10];\n    out[11] = a[11] + b[11];\n    out[12] = a[12] + b[12];\n    out[13] = a[13] + b[13];\n    out[14] = a[14] + b[14];\n    out[15] = a[15] + b[15];\n    return out;\n  }\n\n  /**\n   * Subtracts matrix b from matrix a\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static subtract<T extends Mat4Like>(out: T, a: Readonly<Mat4Like>, b: Readonly<Mat4Like>): T {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    out[9] = a[9] - b[9];\n    out[10] = a[10] - b[10];\n    out[11] = a[11] - b[11];\n    out[12] = a[12] - b[12];\n    out[13] = a[13] - b[13];\n    out[14] = a[14] - b[14];\n    out[15] = a[15] - b[15];\n    return out;\n  }\n\n  /**\n   * Alias for {@link Mat4.subtract}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static sub<T extends Mat4Like>(out: T, a: Readonly<Mat4Like>, b: Readonly<Mat4Like>): T { return out; }\n\n  /**\n   * Multiply each element of the matrix by a scalar.\n   * @category Static\n   *\n   * @param out - the receiving matrix\n   * @param a - the matrix to scale\n   * @param b - amount to scale the matrix's elements by\n   * @returns `out`\n   */\n  static multiplyScalar<T extends Mat4Like>(out: T, a: Readonly<Mat4Like>, b: number): T {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    out[9] = a[9] * b;\n    out[10] = a[10] * b;\n    out[11] = a[11] * b;\n    out[12] = a[12] * b;\n    out[13] = a[13] * b;\n    out[14] = a[14] * b;\n    out[15] = a[15] * b;\n    return out;\n  }\n\n  /**\n   * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param scale - the amount to scale b's elements by before adding\n   * @returns `out`\n   */\n  static multiplyScalarAndAdd<T extends Mat4Like>(out: T, a: Readonly<Mat4Like>, b: Readonly<Mat4Like>, scale: number):\n   T {\n    out[0] = a[0] + b[0] * scale;\n    out[1] = a[1] + b[1] * scale;\n    out[2] = a[2] + b[2] * scale;\n    out[3] = a[3] + b[3] * scale;\n    out[4] = a[4] + b[4] * scale;\n    out[5] = a[5] + b[5] * scale;\n    out[6] = a[6] + b[6] * scale;\n    out[7] = a[7] + b[7] * scale;\n    out[8] = a[8] + b[8] * scale;\n    out[9] = a[9] + b[9] * scale;\n    out[10] = a[10] + b[10] * scale;\n    out[11] = a[11] + b[11] * scale;\n    out[12] = a[12] + b[12] * scale;\n    out[13] = a[13] + b[13] * scale;\n    out[14] = a[14] + b[14] * scale;\n    out[15] = a[15] + b[15] * scale;\n    return out;\n  }\n\n  /**\n   * Returns whether two {@link Mat4}s have exactly the same elements in the same position (when compared with ===).\n   * @category Static\n   *\n   * @param a - The first matrix.\n   * @param b - The second matrix.\n   * @returns True if the matrices are equal, false otherwise.\n   */\n  static exactEquals(a: Readonly<Mat4Like>, b: Readonly<Mat4Like>): boolean {\n    return (\n      a[0] === b[0] &&\n      a[1] === b[1] &&\n      a[2] === b[2] &&\n      a[3] === b[3] &&\n      a[4] === b[4] &&\n      a[5] === b[5] &&\n      a[6] === b[6] &&\n      a[7] === b[7] &&\n      a[8] === b[8] &&\n      a[9] === b[9] &&\n      a[10] === b[10] &&\n      a[11] === b[11] &&\n      a[12] === b[12] &&\n      a[13] === b[13] &&\n      a[14] === b[14] &&\n      a[15] === b[15]\n    );\n  }\n\n  /**\n   * Returns whether two {@link Mat4}s have approximately the same elements in the same position.\n   * @category Static\n   *\n   * @param a - The first matrix.\n   * @param b - The second matrix.\n   * @returns True if the matrices are equal, false otherwise.\n   */\n  static equals(a: Readonly<Mat4Like>, b: Readonly<Mat4Like>): boolean {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const a3 = a[3];\n    const a4 = a[4];\n    const a5 = a[5];\n    const a6 = a[6];\n    const a7 = a[7];\n    const a8 = a[8];\n    const a9 = a[9];\n    const a10 = a[10];\n    const a11 = a[11];\n    const a12 = a[12];\n    const a13 = a[13];\n    const a14 = a[14];\n    const a15 = a[15];\n\n    const b0 = b[0];\n    const b1 = b[1];\n    const b2 = b[2];\n    const b3 = b[3];\n    const b4 = b[4];\n    const b5 = b[5];\n    const b6 = b[6];\n    const b7 = b[7];\n    const b8 = b[8];\n    const b9 = b[9];\n    const b10 = b[10];\n    const b11 = b[11];\n    const b12 = b[12];\n    const b13 = b[13];\n    const b14 = b[14];\n    const b15 = b[15];\n\n    return (\n      Math.abs(a0 - b0) <= GLM_EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) &&\n      Math.abs(a1 - b1) <= GLM_EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) &&\n      Math.abs(a2 - b2) <= GLM_EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) &&\n      Math.abs(a3 - b3) <= GLM_EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3)) &&\n      Math.abs(a4 - b4) <= GLM_EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) &&\n      Math.abs(a5 - b5) <= GLM_EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5)) &&\n      Math.abs(a6 - b6) <= GLM_EPSILON * Math.max(1, Math.abs(a6), Math.abs(b6)) &&\n      Math.abs(a7 - b7) <= GLM_EPSILON * Math.max(1, Math.abs(a7), Math.abs(b7)) &&\n      Math.abs(a8 - b8) <= GLM_EPSILON * Math.max(1, Math.abs(a8), Math.abs(b8)) &&\n      Math.abs(a9 - b9) <= GLM_EPSILON * Math.max(1, Math.abs(a9), Math.abs(b9)) &&\n      Math.abs(a10 - b10) <= GLM_EPSILON * Math.max(1, Math.abs(a10), Math.abs(b10)) &&\n      Math.abs(a11 - b11) <= GLM_EPSILON * Math.max(1, Math.abs(a11), Math.abs(b11)) &&\n      Math.abs(a12 - b12) <= GLM_EPSILON * Math.max(1, Math.abs(a12), Math.abs(b12)) &&\n      Math.abs(a13 - b13) <= GLM_EPSILON * Math.max(1, Math.abs(a13), Math.abs(b13)) &&\n      Math.abs(a14 - b14) <= GLM_EPSILON * Math.max(1, Math.abs(a14), Math.abs(b14)) &&\n      Math.abs(a15 - b15) <= GLM_EPSILON * Math.max(1, Math.abs(a15), Math.abs(b15))\n    );\n  }\n\n  /**\n   * Returns a string representation of a {@link Mat4}\n   * @category Static\n   *\n   * @param a - matrix to represent as a string\n   * @returns string representation of the matrix\n   */\n  static str(a: Readonly<Mat4Like>): string {\n    return `Mat4(${a.join(', ')})`;\n  }\n}\n\n// Instance method alias assignments\nMat4.prototype.mul = Mat4.prototype.multiply; // eslint-disable-line @typescript-eslint/unbound-method\n\n// Static method alias assignments\nMat4.sub = Mat4.subtract;\nMat4.mul = Mat4.multiply;\nMat4.frustum = Mat4.frustumNO;\nMat4.perspective = Mat4.perspectiveNO;\nMat4.ortho = Mat4.orthoNO;\nMat4.normalFromMat4Fast = Mat4.normalFromMat4;\n", "import { GLM_EPSILON } from '#gl-matrix/common';\n\nimport type { Mat3Like, Mat4Like, QuatLike, Vec3Like } from '#gl-matrix/types';\n\n/**\n * 3 Dimensional Vector\n */\nexport class Vec3 extends Float32Array {\n  /**\n  * Create a {@link Vec3}.\n  * \n  * @category Constructor\n  */\n  constructor(...values: [Readonly<Vec3Like> | ArrayBufferLike, number?] | number[] | [undefined]) {\n    switch (values.length) {\n      case 3:\n        super(values); break;\n      case 2:\n        super(values[0] as ArrayBuffer, values[1], 3); break;\n      case 1: {\n        const v = values[0];\n        if (v === undefined) {\n          super(3);\n        } else if (typeof v === 'number') {\n          super([v, v, v]);\n        } else {\n          super(v as ArrayBuffer, 0, 3);\n        }\n        break;\n      }\n      default:\n        super(3); break;\n    }\n  }\n\n  // ============\n  // Accessors\n  // ============\n\n  // Getters and setters to make component access read better.\n  // These are likely to be a little bit slower than direct array access.\n\n  /**\n   * The x component of the vector. Equivalent to `this[0];`\n   * @category Vector Components\n   */\n  get x(): number { return this[0]; }\n  set x(value: number) { this[0] = value; }\n\n  /**\n   * The y component of the vector. Equivalent to `this[1];`\n   * @category Vector Components\n   */\n  get y(): number { return this[1]; }\n  set y(value: number) { this[1] = value; }\n\n  /**\n   * The z component of the vector. Equivalent to `this[2];`\n   * @category Vector Components\n   */\n  get z(): number { return this[2]; }\n  set z(value: number) { this[2] = value; }\n\n  // Alternate set of getters and setters in case this is being used to define\n  // a color.\n\n  /**\n   * The r component of the vector. Equivalent to `this[0];`\n   * @category Color Components\n   */\n  get r(): number { return this[0]; }\n  set r(value: number) { this[0] = value; }\n\n  /**\n   * The g component of the vector. Equivalent to `this[1];`\n   * @category Color Components\n   */\n  get g(): number { return this[1]; }\n  set g(value: number) { this[1] = value; }\n\n  /**\n   * The b component of the vector. Equivalent to `this[2];`\n   * @category Color Components\n   */\n  get b(): number { return this[2]; }\n  set b(value: number) { this[2] = value; }\n\n  /**\n   * The magnitude (length) of this.\n   * Equivalent to `Vec3.magnitude(this);`\n   *\n   * Magnitude is used because the `length` attribute is already defined by\n   * TypedArrays to mean the number of elements in the array.\n   *\n   * @category Accessors\n   */\n  get magnitude(): number {\n    const x = this[0];\n    const y = this[1];\n    const z = this[2];\n    return Math.sqrt(x * x + y * y + z * z);\n  }\n\n  /**\n   * Alias for {@link Vec3.magnitude}\n   *\n   * @category Accessors\n   */\n  get mag(): number { return this.magnitude; }\n\n  /**\n   * The squared magnitude (length) of `this`.\n   * Equivalent to `Vec3.squaredMagnitude(this);`\n   *\n   * @category Accessors\n   */\n  get squaredMagnitude(): number {\n    const x = this[0];\n    const y = this[1];\n    const z = this[2];\n    return x * x + y * y + z * z;\n  }\n\n  /**\n   * Alias for {@link Vec3.squaredMagnitude}\n   *\n   * @category Accessors\n   */\n  get sqrMag(): number { return this.squaredMagnitude; }\n\n  /**\n   * A string representation of `this`\n   * Equivalent to `Vec3.str(this);`\n   *\n   * @category Accessors\n   */\n  get str(): string {\n    return Vec3.str(this);\n  }\n\n  // ===================\n  // Instances methods\n  // ===================\n\n  /**\n   * Copy the values from another {@link Vec3} into `this`.\n   * @category Methods\n   *\n   * @param a the source vector\n   * @returns `this`\n   */\n  copy(a: Readonly<Vec3Like>): this {\n    this.set(a);\n    return this;\n  }\n\n  /**\n   * Adds a {@link Vec3} to `this`.\n   * Equivalent to `Vec3.add(this, this, b);`\n   * @category Methods\n   *\n   * @param b - The vector to add to `this`\n   * @returns `this`\n   */\n  add(b: Readonly<Vec3Like>): this {\n    this[0] += b[0];\n    this[1] += b[1];\n    this[2] += b[2];\n    return this;\n  }\n\n  /**\n   * Subtracts a {@link Vec3} from `this`.\n   * Equivalent to `Vec3.subtract(this, this, b);`\n   * @category Methods\n   *\n   * @param b - The vector to subtract from `this`\n   * @returns `this`\n   */\n  subtract(b: Readonly<Vec3Like>): this {\n    this[0] -= b[0];\n    this[1] -= b[1];\n    this[2] -= b[2];\n    return this;\n  }\n\n  /**\n   * Alias for {@link Vec3.subtract}\n   * @category Methods\n   */\n  sub(b: Readonly<Vec3Like>): this { return this; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Multiplies `this` by a {@link Vec3}.\n   * Equivalent to `Vec3.multiply(this, this, b);`\n   * @category Methods\n   *\n   * @param b - The vector to multiply `this` by\n   * @returns `this`\n   */\n  multiply(b: Readonly<Vec3Like>): this {\n    this[0] *= b[0];\n    this[1] *= b[1];\n    this[2] *= b[2];\n    return this;\n  }\n\n  /**\n   * Alias for {@link Vec3.multiply}\n   * @category Methods\n   */\n  mul(b: Readonly<Vec3Like>): this { return this; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Divides `this` by a {@link Vec3}.\n   * Equivalent to `Vec3.divide(this, this, b);`\n   * @category Methods\n   *\n   * @param b - The vector to divide `this` by\n   * @returns `this`\n   */\n  divide(b: Readonly<Vec3Like>): this {\n    this[0] /= b[0];\n    this[1] /= b[1];\n    this[2] /= b[2];\n    return this;\n  }\n\n  /**\n   * Alias for {@link Vec3.divide}\n   * @category Methods\n   */\n  div(b: Readonly<Vec3Like>): this { return this; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Scales `this` by a scalar number.\n   * Equivalent to `Vec3.scale(this, this, b);`\n   * @category Methods\n   *\n   * @param b - Amount to scale `this` by\n   * @returns `this`\n   */\n  scale(b: number): this {\n    this[0] *= b;\n    this[1] *= b;\n    this[2] *= b;\n    return this;\n  }\n\n  /**\n   * Calculates `this` scaled by a scalar value then adds the result to `this`.\n   * Equivalent to `Vec3.scaleAndAdd(this, this, b, scale);`\n   * @category Methods\n   *\n   * @param b - The vector to add to `this`\n   * @param scale - The amount to scale `b` by before adding\n   * @returns `this`\n   */\n  scaleAndAdd(b: Readonly<Vec3Like>, scale: number): this {\n    this[0] += b[0] * scale;\n    this[1] += b[1] * scale;\n    this[2] += b[2] * scale;\n    return this;\n  }\n\n  /**\n   * Calculates the Euclidean distance between another {@link Vec3} and `this`.\n   * Equivalent to `Vec3.distance(this, b);`\n   * @category Methods\n   *\n   * @param b - The vector to calculate the distance to\n   * @returns Distance between `this` and `b`\n   */\n  distance(b: Readonly<Vec3Like>): number {\n    return Vec3.distance(this, b);\n  }\n  /**\n   * Alias for {@link Vec3.distance}\n   * @category Methods\n   */\n  dist(b: Readonly<Vec3Like>): number { return 0; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Calculates the squared Euclidean distance between another {@link Vec3} and `this`.\n   * Equivalent to `Vec3.squaredDistance(this, b);`\n   * @category Methods\n   *\n   * @param b The vector to calculate the squared distance to\n   * @returns Squared distance between `this` and `b`\n   */\n  squaredDistance(b: Readonly<Vec3Like>): number {\n    return Vec3.squaredDistance(this, b);\n  }\n\n  /**\n   * Alias for {@link Vec3.squaredDistance}\n   * @category Methods\n   */\n  sqrDist(b: Readonly<Vec3Like>): number { return 0; }  // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Negates the components of `this`.\n   * Equivalent to `Vec3.negate(this, this);`\n   * @category Methods\n   *\n   * @returns `this`\n   */\n  negate(): this {\n    this[0] *= -1;\n    this[1] *= -1;\n    this[2] *= -1;\n    return this;\n  }\n\n  /**\n   * Inverts the components of `this`.\n   * Equivalent to `Vec3.inverse(this, this);`\n   * @category Methods\n   *\n   * @returns `this`\n   */\n  invert(): this {\n    this[0] = 1.0 / this[0];\n    this[1] = 1.0 / this[1];\n    this[2] = 1.0 / this[2];\n    return this;\n  }\n\n  /**\n   * Sets each component of `this` to its absolute value.\n   * Equivalent to `Vec3.abs(this, this);`\n   * @category Methods\n   *\n   * @returns `this`\n   */\n  abs(): this {\n    this[0] = Math.abs(this[0]);\n    this[1] = Math.abs(this[1]);\n    this[2] = Math.abs(this[2]);\n    return this;\n  }\n\n  /**\n   * Calculates the dot product of this and another {@link Vec3}.\n   * Equivalent to `Vec3.dot(this, b);`\n   * @category Methods\n   *\n   * @param b - The second operand\n   * @returns Dot product of `this` and `b`\n   */\n  dot(b: Readonly<Vec3Like>): number {\n    return this[0] * b[0] + this[1] * b[1] + this[2] * b[2];\n  }\n\n  /**\n   * Normalize `this`.\n   * Equivalent to `Vec3.normalize(this, this);`\n   * @category Methods\n   *\n   * @returns `this`\n   */\n  normalize(): this {\n    return Vec3.normalize(this, this);\n  }\n\n  // ===================\n  // Static accessors\n  // ===================\n\n  /**\n   * @category Static\n   *\n   * @returns The number of bytes in a {@link Vec3}.\n   */\n  static get BYTE_LENGTH(): number {\n    return 3 * Float32Array.BYTES_PER_ELEMENT;\n  }\n\n  // ===================\n  // Static methods\n  // ===================\n\n  /**\n   * Creates a new, empty vec3\n   * @category Static\n   *\n   * @returns a new 3D vector\n   */\n  static create(): Vec3 {\n    return new Vec3();\n  }\n\n  /**\n   * Creates a new vec3 initialized with values from an existing vector\n   * @category Static\n   *\n   * @param a - vector to clone\n   * @returns a new 3D vector\n   */\n  static clone(a: Readonly<Vec3Like>): Vec3 {\n    return new Vec3(a);\n  }\n\n  /**\n   * Calculates the magnitude (length) of a {@link Vec3}\n   * @category Static\n   *\n   * @param a - Vector to calculate magnitude of\n   * @returns Magnitude of a\n   */\n  static magnitude(a: Readonly<Vec3Like>): number {\n    const x = a[0];\n    const y = a[1];\n    const z = a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n  }\n  /**\n   * Alias for {@link Vec3.magnitude}\n   * @category Static\n   */\n  static mag(a: Readonly<Vec3Like>): number { return 0; } // eslint-disable-line @typescript-eslint/no-unused-vars\n  /**\n   * Alias for {@link Vec3.magnitude}\n   * @category Static\n   * @deprecated Use {@link Vec3.magnitude} to avoid conflicts with builtin `length` methods/attribs\n   *\n   * @param a - vector to calculate length of\n   * @returns length of a\n   */\n  // Length conflicts with Function.length\n  static length(a: Readonly<Vec3Like>): number { return 0; }  // eslint-disable-line @typescript-eslint/no-unused-vars\n  /**\n   * Alias for {@link Vec3.magnitude}\n   * @category Static\n   * @deprecated Use {@link Vec3.mag}\n   */\n  static len(a: Readonly<Vec3Like>): number { return 0; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Creates a new vec3 initialized with the given values\n   * @category Static\n   *\n   * @param x - X component\n   * @param y - Y component\n   * @param z - Z component\n   * @returns a new 3D vector\n   */\n  static fromValues(x: number, y: number, z: number): Vec3 {\n    return new Vec3(x, y, z);\n  }\n\n  /**\n   * Copy the values from one vec3 to another\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the source vector\n   * @returns `out`\n   */\n  static copy<T extends Vec3Like>(out: T, a: Readonly<Vec3Like>): T {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n  }\n\n  /**\n   * Set the components of a vec3 to the given values\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param x - X component\n   * @param y - Y component\n   * @param z - Z component\n   * @returns `out`\n   */\n  static set<T extends Vec3Like>(out: T, x: number, y: number, z: number): T {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n  }\n\n  /**\n   * Adds two {@link Vec3}s\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns `out`\n   */\n  static add<T extends Vec3Like>(out: T, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): T {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    return out;\n  }\n\n  /**\n   * Subtracts vector b from vector a\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static subtract<T extends Vec3Like>(out: T, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): T {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    return out;\n  }\n\n  /**\n   * Alias for {@link Vec3.subtract}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static sub<T extends Vec3Like>(out: T, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): T { return out; };\n\n  /**\n   * Multiplies two vec3's\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static multiply<T extends Vec3Like>(out: T, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): T {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    return out;\n  }\n\n  /**\n   * Alias for {@link Vec3.multiply}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static mul<T extends Vec3Like>(out: T, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): T { return out; }\n\n  /**\n   * Divides two vec3's\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static divide<T extends Vec3Like>(out: T, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): T {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    return out;\n  }\n\n  /**\n   * Alias for {@link Vec3.divide}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static div<T extends Vec3Like>(out: T, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): T { return out; };\n\n  /**\n   * Math.ceil the components of a vec3\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - vector to ceil\n   * @returns `out`\n   */\n  static ceil<T extends Vec3Like>(out: T, a: Readonly<Vec3Like>): T {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    out[2] = Math.ceil(a[2]);\n    return out;\n  }\n\n  /**\n   * Math.floor the components of a vec3\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - vector to floor\n   * @returns `out`\n   */\n  static floor<T extends Vec3Like>(out: T, a: Readonly<Vec3Like>): T {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    out[2] = Math.floor(a[2]);\n    return out;\n  }\n\n  /**\n   * Returns the minimum of two vec3's\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static min<T extends Vec3Like>(out: T, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): T {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n    return out;\n  }\n\n  /**\n   * Returns the maximum of two vec3's\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static max<T extends Vec3Like>(out: T, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): T {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n    return out;\n  }\n\n  /**\n   * symmetric round the components of a vec3\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - vector to round\n   * @returns `out`\n   */\n  /*\n    static round(out: Vec3Like, a: Readonly<Vec3Like>): Vec3Like {\n    out[0] = glMatrix.round(a[0]);\n    out[1] = glMatrix.round(a[1]);\n    out[2] = glMatrix.round(a[2]);\n    return out;\n  }*/\n\n  /**\n   * Scales a vec3 by a scalar number\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the vector to scale\n   * @param scale - amount to scale the vector by\n   * @returns `out`\n   */\n  static scale<T extends Vec3Like>(out: T, a: Readonly<Vec3Like>, scale: number): T {\n    out[0] = a[0] * scale;\n    out[1] = a[1] * scale;\n    out[2] = a[2] * scale;\n    return out;\n  }\n\n  /**\n   * Adds two vec3's after scaling the second operand by a scalar value\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param scale - the amount to scale b by before adding\n   * @returns `out`\n   */\n  static scaleAndAdd<T extends Vec3Like>(out: T, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>, scale: number): T {\n    out[0] = a[0] + b[0] * scale;\n    out[1] = a[1] + b[1] * scale;\n    out[2] = a[2] + b[2] * scale;\n    return out;\n  }\n\n  /**\n   * Calculates the Euclidean distance between two vec3's\n   * @category Static\n   *\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns distance between a and b\n   */\n  static distance(a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): number {\n    const x = b[0] - a[0];\n    const y = b[1] - a[1];\n    const z = b[2] - a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n  }\n  /**\n   * Alias for {@link Vec3.distance}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static dist(a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): number { return 0; }\n\n  /**\n   * Calculates the squared Euclidean distance between two vec3's\n   * @category Static\n   *\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns squared distance between a and b\n   */\n  static squaredDistance(a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): number {\n    const x = b[0] - a[0];\n    const y = b[1] - a[1];\n    const z = b[2] - a[2];\n    return x * x + y * y + z * z;\n  }\n\n  /**\n   * Alias for {@link Vec3.squaredDistance}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static sqrDist(a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): number { return 0; }\n\n  /**\n   * Calculates the squared length of a vec3\n   * @category Static\n   *\n   * @param a - vector to calculate squared length of\n   * @returns squared length of a\n   */\n  static squaredLength(a: Readonly<Vec3Like>): number {\n    const x = a[0];\n    const y = a[1];\n    const z = a[2];\n    return x * x + y * y + z * z;\n  }\n\n  /**\n   * Alias for {@link Vec3.squaredLength}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static sqrLen(a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): number { return 0; }\n\n  /**\n   * Negates the components of a vec3\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - vector to negate\n   * @returns `out`\n   */\n  static negate<T extends Vec3Like>(out: T, a: Readonly<Vec3Like>): T {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    return out;\n  }\n\n  /**\n   * Returns the inverse of the components of a vec3\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - vector to invert\n   * @returns `out`\n   */\n  static inverse<T extends Vec3Like>(out: T, a: Readonly<Vec3Like>): T {\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    out[2] = 1.0 / a[2];\n    return out;\n  }\n\n  /**\n   * Returns the absolute value of the components of a {@link Vec3}\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - Vector to compute the absolute values of\n   * @returns `out`\n   */\n  static abs<T extends Vec3Like>(out: T, a: Readonly<Vec3Like>): T {\n    out[0] = Math.abs(a[0]);\n    out[1] = Math.abs(a[1]);\n    out[2] = Math.abs(a[2]);\n    return out;\n  }\n\n  /**\n   * Normalize a vec3\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - vector to normalize\n   * @returns `out`\n   */\n  static normalize<T extends Vec3Like>(out: T, a: Readonly<Vec3Like>): T {\n    const x = a[0];\n    const y = a[1];\n    const z = a[2];\n    let len = x * x + y * y + z * z;\n    if (len > 0) {\n      // TODO: evaluate use of glm_invsqrt here?\n      len = 1 / Math.sqrt(len);\n    }\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n    return out;\n  }\n\n  /**\n   * Calculates the dot product of two vec3's\n   * @category Static\n   *\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns dot product of a and b\n   */\n  static dot(a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): number {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n  }\n\n  /**\n   * Computes the cross product of two vec3's\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static cross<T extends Vec3Like>(out: T, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): T {\n    const ax = a[0],\n      ay = a[1],\n      az = a[2];\n    const bx = b[0],\n      by = b[1],\n      bz = b[2];\n\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n    return out;\n  }\n\n  /**\n   * Performs a linear interpolation between two vec3's\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param t - interpolation amount, in the range [0-1], between the two inputs\n   * @returns `out`\n   */\n  static lerp<T extends Vec3Like>(out: T, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>, t: number): T {\n    const ax = a[0];\n    const ay = a[1];\n    const az = a[2];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    return out;\n  }\n\n  /**\n   * Performs a spherical linear interpolation between two vec3's\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param t - interpolation amount, in the range [0-1], between the two inputs\n   * @returns `out`\n   */\n  static slerp<T extends Vec3Like>(out: T, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>, t: number): T {\n    const angle = Math.acos(Math.min(Math.max(Vec3.dot(a, b), -1), 1));\n    const sinTotal = Math.sin(angle);\n\n    const ratioA = Math.sin((1 - t) * angle) / sinTotal;\n    const ratioB = Math.sin(t * angle) / sinTotal;\n    out[0] = ratioA * a[0] + ratioB * b[0];\n    out[1] = ratioA * a[1] + ratioB * b[1];\n    out[2] = ratioA * a[2] + ratioB * b[2];\n\n    return out;\n  }\n\n  /**\n   * Performs a hermite interpolation with two control points\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param c - the third operand\n   * @param d - the fourth operand\n   * @param t - interpolation amount, in the range [0-1], between the two inputs\n   * @returns `out`\n   */\n  static hermite<T extends Vec3Like>(out: T, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>, c: Readonly<Vec3Like>,\n    d: Readonly<Vec3Like>, t: number): T {\n    const factorTimes2 = t * t;\n    const factor1 = factorTimes2 * (2 * t - 3) + 1;\n    const factor2 = factorTimes2 * (t - 2) + t;\n    const factor3 = factorTimes2 * (t - 1);\n    const factor4 = factorTimes2 * (3 - 2 * t);\n\n    out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n    out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n    out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n    return out;\n  }\n\n  /**\n   * Performs a bezier interpolation with two control points\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param c - the third operand\n   * @param d - the fourth operand\n   * @param t - interpolation amount, in the range [0-1], between the two inputs\n   * @returns `out`\n   */\n  static bezier(out: Vec3Like, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>, c: Readonly<Vec3Like>,\n    d: Readonly<Vec3Like>, t: number): Vec3Like {\n    const inverseFactor = 1 - t;\n    const inverseFactorTimesTwo = inverseFactor * inverseFactor;\n    const factorTimes2 = t * t;\n    const factor1 = inverseFactorTimesTwo * inverseFactor;\n    const factor2 = 3 * t * inverseFactorTimesTwo;\n    const factor3 = 3 * factorTimes2 * inverseFactor;\n    const factor4 = factorTimes2 * t;\n\n    out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n    out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n    out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n    return out;\n  }\n\n  /**\n   * Generates a random vector with the given scale\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param {Number} [scale] Length of the resulting vector. If omitted, a unit vector will be returned\n   * @returns `out`\n   */\n  /*\n    static random(out: Vec3Like, scale) {\n    scale = scale === undefined ? 1.0 : scale;\n\n    let r = glMatrix.RANDOM() * 2.0 * Math.PI;\n    let z = glMatrix.RANDOM() * 2.0 - 1.0;\n    let zScale = Math.sqrt(1.0 - z * z) * scale;\n\n    out[0] = Math.cos(r) * zScale;\n    out[1] = Math.sin(r) * zScale;\n    out[2] = z * scale;\n    return out;\n  }*/\n\n  /**\n   * Transforms the vec3 with a mat4.\n   * 4th vector component is implicitly '1'\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the vector to transform\n   * @param m - matrix to transform with\n   * @returns `out`\n   */\n  static transformMat4<T extends Vec3Like>(out: T, a: Readonly<Vec3Like>, m: Readonly<Mat4Like>): T {\n    const x = a[0],\n      y = a[1],\n      z = a[2];\n    const w = (m[3] * x + m[7] * y + m[11] * z + m[15]) || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n    return out;\n  }\n\n  /**\n   * Transforms the vec3 with a mat3.\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the vector to transform\n   * @param m - the 3x3 matrix to transform with\n   * @returns `out`\n   */\n  static transformMat3<T extends Vec3Like>(out: T, a: Vec3Like, m: Mat3Like): T {\n    const x = a[0],\n      y = a[1],\n      z = a[2];\n    out[0] = x * m[0] + y * m[3] + z * m[6];\n    out[1] = x * m[1] + y * m[4] + z * m[7];\n    out[2] = x * m[2] + y * m[5] + z * m[8];\n    return out;\n  }\n\n  /**\n   * Transforms the vec3 with a quat\n   * Can also be used for dual quaternions. (Multiply it with the real part)\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the vector to transform\n   * @param q - quaternion to transform with\n   * @returns `out`\n   */\n  static transformQuat<T extends Vec3Like>(out: T, a: Readonly<Vec3Like>, q: Readonly<QuatLike>): T {\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n    const qx = q[0];\n    const qy = q[1];\n    const qz = q[2];\n    const w2 = q[3] * 2;\n    const x = a[0];\n    const y = a[1];\n    const z = a[2];\n    // var qvec = [qx, qy, qz];\n    // var uv = vec3.cross([], qvec, a);\n    const uvx = (qy * z - qz * y);\n    const uvy = (qz * x - qx * z);\n    const uvz = (qx * y - qy * x);\n    // var uuv = vec3.cross([], qvec, uv);\n    // vec3.scale(uuv, uuv, 2);\n    const uuvx = (qy * uvz - qz * uvy) * 2;\n    const uuvy = (qz * uvx - qx * uvz) * 2;\n    const uuvz = (qx * uvy - qy * uvx) * 2;\n    // vec3.scale(uv, uv, 2 * w);\n    // return vec3.add(out, a, vec3.add(out, uv, uuv));\n    out[0] = x + (uvx * w2) + uuvx;\n    out[1] = y + (uvy * w2) + uuvy;\n    out[2] = z + (uvz * w2) + uuvz;\n    return out;\n  }\n\n  /**\n   * Rotate a 3D vector around the x-axis\n   * @category Static\n   *\n   * @param out - The receiving vec3\n   * @param a - The vec3 point to rotate\n   * @param b - The origin of the rotation\n   * @param rad - The angle of rotation in radians\n   * @returns `out`\n   */\n  static rotateX<T extends Vec3Like>(out: T, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>, rad: number): T {\n    const by = b[1];\n    const bz = b[2];\n\n    // Translate point to the origin\n    const py = a[1] - by;\n    const pz = a[2] - bz;\n\n    // perform rotation\n    // translate to correct position\n    out[0] = a[0];\n    out[1] = (py * Math.cos(rad) - pz * Math.sin(rad)) + by;\n    out[2] = (py * Math.sin(rad) + pz * Math.cos(rad)) + bz;\n\n    return out;\n  }\n\n  /**\n   * Rotate a 3D vector around the y-axis\n   * @category Static\n   *\n   * @param out - The receiving vec3\n   * @param a - The vec3 point to rotate\n   * @param b - The origin of the rotation\n   * @param rad - The angle of rotation in radians\n   * @returns `out`\n   */\n  static rotateY<T extends Vec3Like>(out: T, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>, rad: number): T {\n    const bx = b[0];\n    const bz = b[2];\n\n    // Translate point to the origin\n    const px = a[0] - bx;\n    const pz = a[2] - bz;\n\n    // perform rotation\n    // translate to correct position\n    out[0] = (pz * Math.sin(rad) + px * Math.cos(rad)) + bx;\n    out[1] = a[1];\n    out[2] = (pz * Math.cos(rad) - px * Math.sin(rad)) + bz;\n\n    return out;\n  }\n\n  /**\n   * Rotate a 3D vector around the z-axis\n   * @category Static\n   *\n   * @param out - The receiving vec3\n   * @param a - The vec3 point to rotate\n   * @param b - The origin of the rotation\n   * @param rad - The angle of rotation in radians\n   * @returns `out`\n   */\n  static rotateZ<T extends Vec3Like>(out: T, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>, rad: number): T {\n    const bx = b[0];\n    const by = b[1];\n\n    // Translate point to the origin\n    const px = a[0] - bx;\n    const py = a[1] - by;\n\n    // perform rotation\n    // translate to correct position\n    out[0] = (px * Math.cos(rad) - py * Math.sin(rad)) + bx;\n    out[1] = (px * Math.sin(rad) + py * Math.cos(rad)) + by;\n    out[2] = b[2];\n\n    return out;\n  }\n\n  /**\n   * Get the angle between two 3D vectors\n   * @category Static\n   *\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns The angle in radians\n   */\n  static angle(a: Readonly<Vec3Like>, b: Readonly<Vec3Like>) {\n    const ax = a[0];\n    const ay = a[1];\n    const az = a[2];\n    const bx = b[0];\n    const by = b[1];\n    const bz = b[2];\n    const mag = Math.sqrt((ax * ax + ay * ay + az * az) * (bx * bx + by * by + bz * bz));\n    const cosine = mag && Vec3.dot(a, b) / mag;\n    return Math.acos(Math.min(Math.max(cosine, -1), 1));\n  }\n\n  /**\n   * Set the components of a vec3 to zero\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @returns `out`\n   */\n  static zero<T extends Vec3Like>(out: T): T {\n    out[0] = 0.0;\n    out[1] = 0.0;\n    out[2] = 0.0;\n    return out;\n  }\n\n  /**\n   * Returns a string representation of a vector\n   * @category Static\n   *\n   * @param a - vector to represent as a string\n   * @returns string representation of the vector\n   */\n  static str(a: Readonly<Vec3Like>): string {\n    return `Vec3(${a.join(', ')})`;\n  }\n\n  /**\n   * Returns whether the vectors have exactly the same elements in the same position (when compared with ===)\n   * @category Static\n   *\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns True if the vectors are equal, false otherwise.\n   */\n  static exactEquals(a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): boolean {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n  }\n\n  /**\n   * Returns whether the vectors have approximately the same elements in the same position.\n   * @category Static\n   *\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns True if the vectors are equal, false otherwise.\n   */\n  static equals(a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): boolean {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const b0 = b[0];\n    const b1 = b[1];\n    const b2 = b[2];\n    return (\n      Math.abs(a0 - b0) <= GLM_EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n      Math.abs(a1 - b1) <= GLM_EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n      Math.abs(a2 - b2) <= GLM_EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2))\n    );\n  }\n}\n\n// Instance method alias assignments\nVec3.prototype.sub = Vec3.prototype.subtract;             // eslint-disable-line @typescript-eslint/unbound-method\nVec3.prototype.mul = Vec3.prototype.multiply;             // eslint-disable-line @typescript-eslint/unbound-method\nVec3.prototype.div = Vec3.prototype.divide;               // eslint-disable-line @typescript-eslint/unbound-method\nVec3.prototype.dist = Vec3.prototype.distance;            // eslint-disable-line @typescript-eslint/unbound-method\nVec3.prototype.sqrDist = Vec3.prototype.squaredDistance;  // eslint-disable-line @typescript-eslint/unbound-method\n\n// Static method alias assignments\nVec3.sub = Vec3.subtract;\nVec3.mul = Vec3.multiply;\nVec3.div = Vec3.divide;\nVec3.dist = Vec3.distance;\nVec3.sqrDist = Vec3.squaredDistance;\nVec3.sqrLen = Vec3.squaredLength;\nVec3.mag = Vec3.magnitude;\nVec3.length = Vec3.magnitude;\nVec3.len = Vec3.magnitude;\n", "import { GLM_EPSILON } from '#gl-matrix/common';\n\nimport type { Mat4Like, QuatLike, Vec4Like } from '#gl-matrix/types';\n\n/**\n * 4 Dimensional Vector\n */\nexport class Vec4 extends Float32Array {\n  /**\n   * Create a {@link Vec4}.\n   *\n   * @category Constructor\n   */\n  constructor(...values: [Readonly<Vec4Like> | ArrayBufferLike, number?] | number[] | [undefined]) {\n    switch (values.length) {\n      case 4:\n        super(values); break;\n      case 2:\n        super(values[0] as ArrayBuffer, values[1], 4); break;\n      case 1: {\n        const v = values[0];\n        if (v === undefined) {\n          super(4);\n        } else if (typeof v === 'number') {\n          super([v, v, v, v]);\n        } else {\n          super(v as ArrayBuffer, 0, 4);\n        }\n        break;\n      }\n      default:\n        super(4); break;\n    }\n  }\n\n  // ============\n  // Accessors\n  // ============\n\n  // Getters and setters to make component access read better.\n  // These are likely to be a little bit slower than direct array access.\n\n  /**\n   * The x component of the vector. Equivalent to `this[0];`\n   * @category Vector Components\n   */\n  get x(): number { return this[0]; }\n  set x(value: number) { this[0] = value; }\n\n  /**\n   * The y component of the vector. Equivalent to `this[1];`\n   * @category Vector Components\n   */\n  get y(): number { return this[1]; }\n  set y(value: number) { this[1] = value; }\n\n  /**\n   * The z component of the vector. Equivalent to `this[2];`\n   * @category Vector Components\n   */\n  get z(): number { return this[2]; }\n  set z(value: number) { this[2] = value; }\n\n  /**\n   * The w component of the vector. Equivalent to `this[3];`\n   * @category Vector Components\n   */\n  get w(): number { return this[3]; }\n  set w(value: number) { this[3] = value; }\n\n  // Alternate set of getters and setters in case this is being used to define\n  // a color.\n\n  /**\n   * The r component of the vector. Equivalent to `this[0];`\n   * @category Color Components\n   */\n  get r(): number { return this[0]; }\n  set r(value: number) { this[0] = value; }\n\n  /**\n   * The g component of the vector. Equivalent to `this[1];`\n   * @category Color Components\n   */\n  get g(): number { return this[1]; }\n  set g(value: number) { this[1] = value; }\n\n  /**\n   * The b component of the vector. Equivalent to `this[2];`\n   * @category Color Components\n   */\n  get b(): number { return this[2]; }\n  set b(value: number) { this[2] = value; }\n\n  /**\n   * The a component of the vector. Equivalent to `this[3];`\n   * @category Color Components\n   */\n  get a(): number { return this[3]; }\n  set a(value: number) { this[3] = value; }\n\n  /**\n   * The magnitude (length) of this.\n   * Equivalent to `Vec4.magnitude(this);`\n   *\n   * Magnitude is used because the `length` attribute is already defined by\n   * TypedArrays to mean the number of elements in the array.\n   *\n   * @category Accessors\n   */\n  get magnitude(): number {\n    const x = this[0];\n    const y = this[1];\n    const z = this[2];\n    const w = this[3];\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n  }\n\n  /**\n   * Alias for {@link Vec4.magnitude}\n   *\n   * @category Accessors\n   */\n  get mag(): number { return this.magnitude; }\n\n  /**\n   * A string representation of `this`\n   * Equivalent to `Vec4.str(this);`\n   *\n   * @category Accessors\n   */\n  get str(): string {\n    return Vec4.str(this);\n  }\n\n  // ===================\n  // Instances methods\n  // ===================\n\n  /**\n   * Copy the values from another {@link Vec4} into `this`.\n   * @category Methods\n   *\n   * @param a the source vector\n   * @returns `this`\n   */\n  copy(a: Readonly<Vec4Like>): this {\n    super.set(a);\n    return this;\n  }\n\n  /**\n   * Adds a {@link Vec4} to `this`.\n   * Equivalent to `Vec4.add(this, this, b);`\n   * @category Methods\n   *\n   * @param b - The vector to add to `this`\n   * @returns `this`\n   */\n  add(b: Readonly<Vec4Like>): this {\n    this[0] += b[0];\n    this[1] += b[1];\n    this[2] += b[2];\n    this[3] += b[3];\n    return this;\n  }\n\n  /**\n   * Subtracts a {@link Vec4} from `this`.\n   * Equivalent to `Vec4.subtract(this, this, b);`\n   * @category Methods\n   *\n   * @param b - The vector to subtract from `this`\n   * @returns `this`\n   */\n  subtract(b: Readonly<Vec4Like>): this {\n    this[0] -= b[0];\n    this[1] -= b[1];\n    this[2] -= b[2];\n    this[3] -= b[3];\n    return this;\n  }\n\n  /**\n   * Alias for {@link Vec4.subtract}\n   * @category Methods\n   */\n  sub(b: Readonly<Vec4Like>): this { return this; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Multiplies `this` by a {@link Vec4}.\n   * Equivalent to `Vec4.multiply(this, this, b);`\n   * @category Methods\n   *\n   * @param b - The vector to multiply `this` by\n   * @returns `this`\n   */\n  multiply(b: Readonly<Vec4Like>): this {\n    this[0] *= b[0];\n    this[1] *= b[1];\n    this[2] *= b[2];\n    this[3] *= b[3];\n    return this;\n  }\n\n  /**\n   * Alias for {@link Vec4.multiply}\n   * @category Methods\n   */\n  mul(b: Readonly<Vec4Like>): this { return this; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Divides `this` by a {@link Vec4}.\n   * Equivalent to `Vec4.divide(this, this, b);`\n   * @category Methods\n   *\n   * @param b - The vector to divide `this` by\n   * @returns `this`\n   */\n  divide(b: Readonly<Vec4Like>): this {\n    this[0] /= b[0];\n    this[1] /= b[1];\n    this[2] /= b[2];\n    this[3] /= b[3];\n    return this;\n  }\n\n  /**\n   * Alias for {@link Vec4.divide}\n   * @category Methods\n   */\n  div(b: Readonly<Vec4Like>): this { return this; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Scales `this` by a scalar number.\n   * Equivalent to `Vec4.scale(this, this, b);`\n   * @category Methods\n   *\n   * @param b - Amount to scale `this` by\n   * @returns `this`\n   */\n  scale(b: number): this {\n    this[0] *= b;\n    this[1] *= b;\n    this[2] *= b;\n    this[3] *= b;\n    return this;\n  }\n\n  /**\n   * Calculates `this` scaled by a scalar value then adds the result to `this`.\n   * Equivalent to `Vec4.scaleAndAdd(this, this, b, scale);`\n   * @category Methods\n   *\n   * @param b - The vector to add to `this`\n   * @param scale - The amount to scale `b` by before adding\n   * @returns `this`\n   */\n  scaleAndAdd(b: Readonly<Vec4Like>, scale: number): this {\n    this[0] += b[0] * scale;\n    this[1] += b[1] * scale;\n    this[2] += b[2] * scale;\n    this[3] += b[3] * scale;\n    return this;\n  }\n\n  /**\n   * Calculates the Euclidean distance between another {@link Vec4} and `this`.\n   * Equivalent to `Vec4.distance(this, b);`\n   * @category Methods\n   *\n   * @param b - The vector to calculate the distance to\n   * @returns Distance between `this` and `b`\n   */\n  distance(b: Readonly<Vec4Like>): number {\n    return Vec4.distance(this, b);\n  }\n\n  /**\n   * Alias for {@link Vec4.distance}\n   * @category Methods\n   */\n  dist(b: Readonly<Vec4Like>): number { return 0; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Calculates the squared Euclidean distance between another {@link Vec4} and `this`.\n   * Equivalent to `Vec4.squaredDistance(this, b);`\n   * @category Methods\n   *\n   * @param b The vector to calculate the squared distance to\n   * @returns Squared distance between `this` and `b`\n   */\n  squaredDistance(b: Readonly<Vec4Like>): number {\n    return Vec4.squaredDistance(this, b);\n  }\n\n  /**\n   * Alias for {@link Vec4.squaredDistance}\n   * @category Methods\n   */\n  sqrDist(b: Readonly<Vec4Like>): number { return 0; }  // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Negates the components of `this`.\n   * Equivalent to `Vec4.negate(this, this);`\n   * @category Methods\n   *\n   * @returns `this`\n   */\n  negate(): this {\n    this[0] *= -1;\n    this[1] *= -1;\n    this[2] *= -1;\n    this[3] *= -1;\n    return this;\n  }\n\n  /**\n   * Inverts the components of `this`.\n   * Equivalent to `Vec4.inverse(this, this);`\n   * @category Methods\n   *\n   * @returns `this`\n   */\n  invert(): this {\n    this[0] = 1.0 / this[0];\n    this[1] = 1.0 / this[1];\n    this[2] = 1.0 / this[2];\n    this[3] = 1.0 / this[3];\n    return this;\n  }\n\n  /**\n   * Sets each component of `this` to it's absolute value.\n   * Equivalent to `Vec4.abs(this, this);`\n   * @category Methods\n   *\n   * @returns `this`\n   */\n  abs(): this {\n    this[0] = Math.abs(this[0]);\n    this[1] = Math.abs(this[1]);\n    this[2] = Math.abs(this[2]);\n    this[3] = Math.abs(this[3]);\n    return this;\n  }\n\n  /**\n   * Calculates the dot product of this and another {@link Vec4}.\n   * Equivalent to `Vec4.dot(this, b);`\n   * @category Methods\n   *\n   * @param b - The second operand\n   * @returns Dot product of `this` and `b`\n   */\n  dot(b: Readonly<Vec4Like>): number {\n    return this[0] * b[0] + this[1] * b[1] + this[2] * b[2] + this[3] * b[3];\n  }\n\n  /**\n   * Normalize `this`.\n   * Equivalent to `Vec4.normalize(this, this);`\n   * @category Methods\n   *\n   * @returns `this`\n   */\n  normalize(): this {\n    return Vec4.normalize(this, this);\n  }\n\n  // ===================\n  // Static accessors\n  // ===================\n\n  /**\n   * @category Static\n   *\n   * @returns The number of bytes in a {@link Vec4}.\n   */\n  static get BYTE_LENGTH(): number {\n    return 4 * Float32Array.BYTES_PER_ELEMENT;\n  }\n\n  // ===================\n  // Static methods\n  // ===================\n\n  /**\n   * Creates a new, empty {@link Vec4}\n   * @category Static\n   *\n   * @returns a new 4D vector\n   */\n  static create(): Vec4 {\n    return new Vec4();\n  }\n\n  /**\n   * Creates a new {@link Vec4} initialized with values from an existing vector\n   * @category Static\n   *\n   * @param a - vector to clone\n   * @returns a new 4D vector\n   */\n  static clone(a: Vec4Like): Vec4 {\n    return new Vec4(a);\n  }\n\n  /**\n   * Creates a new {@link Vec4} initialized with the given values\n   * @category Static\n   *\n   * @param x - X component\n   * @param y - Y component\n   * @param z - Z component\n   * @param w - W component\n   * @returns a new 4D vector\n   */\n  static fromValues(x: number, y: number, z: number, w: number): Vec4 {\n    return new Vec4(x, y, z, w);\n  }\n\n  /**\n   * Copy the values from one {@link Vec4} to another\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the source vector\n   * @returns `out`\n   */\n  static copy<T extends Vec4Like>(out: T, a: Readonly<Vec4Like>): T {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n  }\n\n  /**\n   * Set the components of a {@link Vec4} to the given values\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param x - X component\n   * @param y - Y component\n   * @param z - Z component\n   * @param w - W component\n   * @returns `out`\n   */\n  static set<T extends Vec4Like>(out: T, x: number, y: number, z: number, w: number): T {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n  }\n\n  /**\n   * Adds two {@link Vec4}s\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns `out`\n   */\n  static add<T extends Vec4Like>(out: T, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): T {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n  }\n\n  /**\n   * Subtracts vector b from vector a\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static subtract<T extends Vec4Like>(out: T, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): T {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    return out;\n  }\n\n  /**\n   * Alias for {@link Vec4.subtract}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static sub<T extends Vec4Like>(out: T, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): T { return out; }\n\n  /**\n   * Multiplies two {@link Vec4}'s\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static multiply<T extends Vec4Like>(out: T, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): T {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    out[3] = a[3] * b[3];\n    return out;\n  }\n\n  /**\n   * Alias for {@link Vec4.multiply}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static mul<T extends Vec4Like>(out: T, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): T { return out; }\n\n  /**\n   * Divides two {@link Vec4}'s\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static divide<T extends Vec4Like>(out: T, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): T {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    out[3] = a[3] / b[3];\n    return out;\n  }\n\n  /**\n   * Alias for {@link Vec4.divide}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static div<T extends Vec4Like>(out: T, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): T { return out; }\n\n  /**\n   * Math.ceil the components of a {@link Vec4}\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - vector to ceil\n   * @returns `out`\n   */\n  static ceil<T extends Vec4Like>(out: T, a: Readonly<Vec4Like>): T {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    out[2] = Math.ceil(a[2]);\n    out[3] = Math.ceil(a[3]);\n    return out;\n  }\n\n  /**\n   * Math.floor the components of a {@link Vec4}\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - vector to floor\n   * @returns `out`\n   */\n  static floor<T extends Vec4Like>(out: T, a: Readonly<Vec4Like>): T {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    out[2] = Math.floor(a[2]);\n    out[3] = Math.floor(a[3]);\n    return out;\n  }\n\n  /**\n   * Returns the minimum of two {@link Vec4}'s\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static min<T extends Vec4Like>(out: T, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): T {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n    out[3] = Math.min(a[3], b[3]);\n    return out;\n  }\n\n  /**\n   * Returns the maximum of two {@link Vec4}'s\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static max<T extends Vec4Like>(out: T, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): T {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n    out[3] = Math.max(a[3], b[3]);\n    return out;\n  }\n\n  /**\n   * Math.round the components of a {@link Vec4}\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - vector to round\n   * @returns `out`\n   */\n  static round<T extends Vec4Like>(out: T, a: Readonly<Vec4Like>): T {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    out[2] = Math.round(a[2]);\n    out[3] = Math.round(a[3]);\n    return out;\n  }\n\n  /**\n   * Scales a {@link Vec4} by a scalar number\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the vector to scale\n   * @param scale - amount to scale the vector by\n   * @returns `out`\n   */\n  static scale<T extends Vec4Like>(out: T, a: Readonly<Vec4Like>, scale: number): T {\n    out[0] = a[0] * scale;\n    out[1] = a[1] * scale;\n    out[2] = a[2] * scale;\n    out[3] = a[3] * scale;\n    return out;\n  }\n\n  /**\n   * Adds two {@link Vec4}'s after scaling the second operand by a scalar value\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param scale - the amount to scale b by before adding\n   * @returns `out`\n   */\n  static scaleAndAdd<T extends Vec4Like>(out: T, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>, scale: number): T {\n    out[0] = a[0] + b[0] * scale;\n    out[1] = a[1] + b[1] * scale;\n    out[2] = a[2] + b[2] * scale;\n    out[3] = a[3] + b[3] * scale;\n    return out;\n  }\n\n  /**\n   * Calculates the Euclidean distance between two {@link Vec4}'s\n   * @category Static\n   *\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns distance between a and b\n   */\n  static distance(a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): number {\n    const x = b[0] - a[0];\n    const y = b[1] - a[1];\n    const z = b[2] - a[2];\n    const w = b[3] - a[3];\n    return Math.hypot(x, y, z, w);\n  }\n  /**\n   * Alias for {@link Vec4.distance}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static dist(a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): number { return 0; }\n\n  /**\n   * Calculates the squared Euclidean distance between two {@link Vec4}'s\n   * @category Static\n   *\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns squared distance between a and b\n   */\n  static squaredDistance(a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): number {\n    const x = b[0] - a[0];\n    const y = b[1] - a[1];\n    const z = b[2] - a[2];\n    const w = b[3] - a[3];\n    return x * x + y * y + z * z + w * w;\n  }\n  /**\n   * Alias for {@link Vec4.squaredDistance}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static sqrDist(a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): number { return 0; }\n\n  /**\n   * Calculates the magnitude (length) of a {@link Vec4}\n   * @category Static\n   *\n   * @param a - vector to calculate length of\n   * @returns length of `a`\n   */\n  static magnitude(a: Readonly<Vec4Like>): number {\n    const x = a[0];\n    const y = a[1];\n    const z = a[2];\n    const w = a[3];\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n  }\n  /**\n   * Alias for {@link Vec4.magnitude}\n   * @category Static\n   */\n  static mag(a: Readonly<Vec4Like>): number { return 0; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Alias for {@link Vec4.magnitude}\n   * @category Static\n   * @deprecated Use {@link Vec4.magnitude} to avoid conflicts with builtin `length` methods/attribs\n   */\n  // Length conflicts with Function.length\n  static length(a: Readonly<Vec4Like>): number { return 0; }  // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Alias for {@link Vec4.magnitude}\n   * @category Static\n   * @deprecated Use {@link Vec4.mag}\n   */\n  static len(a: Readonly<Vec4Like>): number { return 0; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Calculates the squared length of a {@link Vec4}\n   * @category Static\n   *\n   * @param a - vector to calculate squared length of\n   * @returns squared length of a\n   */\n  static squaredLength(a: Readonly<Vec4Like>): number {\n    const x = a[0];\n    const y = a[1];\n    const z = a[2];\n    const w = a[3];\n    return x * x + y * y + z * z + w * w;\n  }\n\n  /**\n   * Alias for {@link Vec4.squaredLength}\n   * @category Static\n   */\n  static sqrLen(a: Readonly<Vec4Like>): number { return 0; }  // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Negates the components of a {@link Vec4}\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - vector to negate\n   * @returns `out`\n   */\n  static negate<T extends Vec4Like>(out: T, a: Readonly<Vec4Like>): T {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = -a[3];\n    return out;\n  }\n\n  /**\n   * Returns the inverse of the components of a {@link Vec4}\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - vector to invert\n   * @returns `out`\n   */\n  static inverse<T extends Vec4Like>(out: T, a: Readonly<Vec4Like>): T {\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    out[2] = 1.0 / a[2];\n    out[3] = 1.0 / a[3];\n    return out;\n  }\n\n  /**\n   * Returns the absolute value of the components of a {@link Vec4}\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - Vector to compute the absolute values of\n   * @returns `out`\n   */\n  static abs<T extends Vec4Like>(out: T, a: Readonly<Vec4Like>): T {\n    out[0] = Math.abs(a[0]);\n    out[1] = Math.abs(a[1]);\n    out[2] = Math.abs(a[2]);\n    out[3] = Math.abs(a[3]);\n    return out;\n  }\n\n  /**\n   * Normalize a {@link Vec4}\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - vector to normalize\n   * @returns `out`\n   */\n  static normalize<T extends Vec4Like>(out: T, a: Readonly<Vec4Like>): T {\n    const x = a[0];\n    const y = a[1];\n    const z = a[2];\n    const w = a[3];\n    let len = x * x + y * y + z * z + w * w;\n    if (len > 0) {\n      len = 1 / Math.sqrt(len);\n    }\n    out[0] = x * len;\n    out[1] = y * len;\n    out[2] = z * len;\n    out[3] = w * len;\n    return out;\n  }\n\n  /**\n   * Calculates the dot product of two {@link Vec4}'s\n   * @category Static\n   *\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns dot product of a and b\n   */\n  static dot(a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): number {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n  }\n\n  /**\n   * Returns the cross-product of three vectors in a 4-dimensional space\n   * @category Static\n   *\n   * @param out the receiving vector\n   * @param u - the first vector\n   * @param v - the second vector\n   * @param w - the third vector\n   * @returns result\n   */\n  static cross<T extends Vec4Like>(out: T, u: Readonly<Vec4Like>, v: Readonly<Vec4Like>, w: Readonly<Vec4Like>): T {\n    const a = v[0] * w[1] - v[1] * w[0];\n    const b = v[0] * w[2] - v[2] * w[0];\n    const c = v[0] * w[3] - v[3] * w[0];\n    const d = v[1] * w[2] - v[2] * w[1];\n    const e = v[1] * w[3] - v[3] * w[1];\n    const f = v[2] * w[3] - v[3] * w[2];\n    const g = u[0];\n    const h = u[1];\n    const i = u[2];\n    const j = u[3];\n\n    out[0] = h * f - i * e + j * d;\n    out[1] = -(g * f) + i * c - j * b;\n    out[2] = g * e - h * c + j * a;\n    out[3] = -(g * d) + h * b - i * a;\n\n    return out;\n  }\n\n  /**\n   * Performs a linear interpolation between two {@link Vec4}'s\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param t - interpolation amount, in the range [0-1], between the two inputs\n   * @returns `out`\n   */\n  static lerp<T extends Vec4Like>(out: T, a: Readonly<Vec4Like>, b: Readonly<Vec4Like>, t: number): T {\n    const ax = a[0];\n    const ay = a[1];\n    const az = a[2];\n    const aw = a[3];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    out[3] = aw + t * (b[3] - aw);\n    return out;\n  }\n\n  /**\n   * Generates a random vector with the given scale\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param [scale] - Length of the resulting vector. If ommitted, a unit vector will be returned\n   * @returns `out`\n   */\n  /*\n    static random(out: Vec4Like, scale): Vec4Like {\n    scale = scale || 1.0;\n\n    // Marsaglia, George. Choosing a Point from the Surface of a\n    // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n    // http://projecteuclid.org/euclid.aoms/1177692644;\n    var v1, v2, v3, v4;\n    var s1, s2;\n    do {\n      v1 = glMatrix.RANDOM() * 2 - 1;\n      v2 = glMatrix.RANDOM() * 2 - 1;\n      s1 = v1 * v1 + v2 * v2;\n    } while (s1 >= 1);\n    do {\n      v3 = glMatrix.RANDOM() * 2 - 1;\n      v4 = glMatrix.RANDOM() * 2 - 1;\n      s2 = v3 * v3 + v4 * v4;\n    } while (s2 >= 1);\n\n    var d = Math.sqrt((1 - s1) / s2);\n    out[0] = scale * v1;\n    out[1] = scale * v2;\n    out[2] = scale * v3 * d;\n    out[3] = scale * v4 * d;\n    return out;\n  }*/\n\n  /**\n   * Transforms the {@link Vec4} with a {@link Mat4}.\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the vector to transform\n   * @param m - matrix to transform with\n   * @returns `out`\n   */\n  static transformMat4<T extends Vec4Like>(out: T, a: Readonly<Vec4Like>, m: Readonly<Mat4Like>): T {\n    const x = a[0];\n    const y = a[1];\n    const z = a[2];\n    const w = a[3];\n    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n    return out;\n  }\n\n  /**\n   * Transforms the {@link Vec4} with a {@link Quat}\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the vector to transform\n   * @param q - quaternion to transform with\n   * @returns `out`\n   */\n  static transformQuat<T extends Vec4Like>(out: T, a: Readonly<Vec4Like>, q: Readonly<QuatLike>): T {\n    const x = a[0];\n    const y = a[1];\n    const z = a[2];\n    const qx = q[0];\n    const qy = q[1];\n    const qz = q[2];\n    const qw = q[3];\n\n    // calculate quat * vec\n    const ix = qw * x + qy * z - qz * y;\n    const iy = qw * y + qz * x - qx * z;\n    const iz = qw * z + qx * y - qy * x;\n    const iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    out[3] = a[3];\n    return out;\n  }\n\n  /**\n   * Set the components of a {@link Vec4} to zero\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @returns `out`\n   */\n  static zero<T extends Vec4Like>(out: T): T {\n    out[0] = 0.0;\n    out[1] = 0.0;\n    out[2] = 0.0;\n    out[3] = 0.0;\n    return out;\n  }\n\n  /**\n   * Returns a string representation of a {@link Vec4}\n   * @category Static\n   *\n   * @param a - vector to represent as a string\n   * @returns string representation of the vector\n   */\n  static str(a: Readonly<Vec4Like>): string {\n    return `Vec4(${a.join(', ')})`;\n  }\n\n  /**\n   * Returns whether the vectors have exactly the same elements in the same position (when compared with ===)\n   * @category Static\n   *\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns True if the vectors are equal, false otherwise.\n   */\n  static exactEquals(a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): boolean {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n  }\n\n  /**\n   * Returns whether the vectors have approximately the same elements in the same position.\n   * @category Static\n   *\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns True if the vectors are equal, false otherwise.\n   */\n  static equals(a: Readonly<Vec4Like>, b: Readonly<Vec4Like>): boolean {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const a3 = a[3];\n    const b0 = b[0];\n    const b1 = b[1];\n    const b2 = b[2];\n    const b3 = b[3];\n    return (\n      Math.abs(a0 - b0) <= GLM_EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n      Math.abs(a1 - b1) <= GLM_EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n      Math.abs(a2 - b2) <= GLM_EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n      Math.abs(a3 - b3) <= GLM_EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3))\n    );\n  }\n}\n\n// Instance method alias assignments\nVec4.prototype.sub = Vec4.prototype.subtract;             // eslint-disable-line @typescript-eslint/unbound-method\nVec4.prototype.mul = Vec4.prototype.multiply;             // eslint-disable-line @typescript-eslint/unbound-method\nVec4.prototype.div = Vec4.prototype.divide;               // eslint-disable-line @typescript-eslint/unbound-method\nVec4.prototype.dist = Vec4.prototype.distance;            // eslint-disable-line @typescript-eslint/unbound-method\nVec4.prototype.sqrDist = Vec4.prototype.squaredDistance;  // eslint-disable-line @typescript-eslint/unbound-method\n\n// Static method alias assignments\nVec4.sub = Vec4.subtract;\nVec4.mul = Vec4.multiply;\nVec4.div = Vec4.divide;\nVec4.dist = Vec4.distance;\nVec4.sqrDist = Vec4.squaredDistance;\nVec4.sqrLen = Vec4.squaredLength;\nVec4.mag = Vec4.magnitude;\nVec4.length = Vec4.magnitude;\nVec4.len = Vec4.magnitude;\n", "import { Vec3 } from './Vec3.js';\nimport { Vec4 } from './Vec4.js';\nimport { GLM_EPSILON } from '#gl-matrix/common';\n\nimport type { Mat3Like, QuatLike, Vec3Like } from '#gl-matrix/types';\n\nconst IDENTITY_QUAT = new Float32Array([\n  0, 0, 0, 1\n]);\n\n/**\n * Quaternion\n */\nexport class Quat extends Float32Array {\n  static #DEFAULT_ANGLE_ORDER = 'zyx';\n\n  // Temporary variables to prevent repeated allocations in the algorithms within Quat.\n  // These are declared as TypedArrays to aid in tree-shaking.\n\n  static #TMP_QUAT1 = new Float32Array(4);\n  static #TMP_QUAT2 = new Float32Array(4);\n  static #TMP_MAT3 = new Float32Array(9);\n\n  static #TMP_VEC3 = new Float32Array(3);\n  static #X_UNIT_VEC3 = new Float32Array([1, 0, 0]);\n  static #Y_UNIT_VEC3 = new Float32Array([0, 1, 0]);\n\n  /**\n   * Create a {@link Quat}.\n   *\n   * @category Constructor\n   */\n  constructor(...values: [Readonly<QuatLike> | ArrayBufferLike, number?] | number[] | [undefined]) {\n    switch (values.length) {\n      case 4:\n        super(values); break;\n      case 2:\n        super(values[0] as ArrayBuffer, values[1], 4); break;\n      case 1: {\n        const v = values[0];\n        if (v === undefined) {\n          super(IDENTITY_QUAT);\n        } else if (typeof v === 'number') {\n          super([v, v, v, v]);\n        } else {\n          super(v as ArrayBuffer, 0, 4);\n        }\n        break;\n      }\n      default:\n        super(IDENTITY_QUAT);\n        break;\n    }\n  }\n\n  // ============\n  // Accessors\n  // ============\n\n  // Getters and setters to make component access read better.\n  // These are likely to be a little bit slower than direct array access.\n\n  /**\n   * The x component of the quaternion. Equivalent to `this[0];`\n   * @category Quaternion Components\n   */\n  get x(): number { return this[0]; }\n  set x(value: number) { this[0] = value; }\n\n  /**\n   * The y component of the quaternion. Equivalent to `this[1];`\n   * @category Quaternion Components\n   */\n  get y(): number { return this[1]; }\n  set y(value: number) { this[1] = value; }\n\n  /**\n   * The z component of the quaternion. Equivalent to `this[2];`\n   * @category Quaternion Components\n   */\n  get z(): number { return this[2]; }\n  set z(value: number) { this[2] = value; }\n\n  /**\n   * The w component of the quaternion. Equivalent to `this[3];`\n   * @category Quaternion Components\n   */\n  get w(): number { return this[3]; }\n  set w(value: number) { this[3] = value; }\n\n  /**\n   * The magnitude (length) of this.\n   * Equivalent to `Quat.magnitude(this);`\n   *\n   * Magnitude is used because the `length` attribute is already defined by\n   * TypedArrays to mean the number of elements in the array.\n   *\n   * @category Accessors\n   */\n  get magnitude(): number {\n    const x = this[0];\n    const y = this[1];\n    const z = this[2];\n    const w = this[3];\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n  }\n\n  /**\n   * Alias for {@link Quat.magnitude}\n   *\n   * @category Accessors\n   */\n  get mag(): number { return this.magnitude; }\n\n  /**\n   * A string representation of `this`\n   * Equivalent to `Quat.str(this);`\n   *\n   * @category Accessors\n   */\n  get str(): string {\n    return Quat.str(this);\n  }\n\n  // ===================\n  // Instances methods\n  // ===================\n\n  /**\n   * Copy the values from another {@link Quat} into `this`.\n   * @category Methods\n   *\n   * @param a the source quaternion\n   * @returns `this`\n   */\n  copy(a: Readonly<QuatLike>): this {\n    super.set(a);\n    return this;\n  }\n\n  /**\n   * Set `this` to the identity quaternion\n   * Equivalent to Quat.identity(this)\n   * @category Methods\n   *\n   * @returns `this`\n   */\n  identity(): this {\n    this.set(IDENTITY_QUAT);\n    return this;\n  }\n\n  /**\n   * Multiplies `this` by a {@link Quat}.\n   * Equivalent to `Quat.multiply(this, this, b);`\n   * @category Methods\n   *\n   * @param b - The vector to multiply `this` by\n   * @returns `this`\n   */\n  multiply(b: Readonly<QuatLike>): this {\n    return Quat.multiply(this, this, b);\n  }\n\n  /**\n   * Alias for {@link Quat.multiply}\n   * @category Methods\n   */\n  mul(b: Readonly<QuatLike>): this { return this; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Rotates `this` by the given angle about the X axis\n   * Equivalent to `Quat.rotateX(this, this, rad);`\n   * @category Methods\n   *\n   * @param rad - angle (in radians) to rotate\n   * @returns `this`\n   */\n  rotateX(rad: number): this {\n    return Quat.rotateX(this, this, rad);\n  }\n\n  /**\n   * Rotates `this` by the given angle about the Y axis\n   * Equivalent to `Quat.rotateY(this, this, rad);`\n   * @category Methods\n   *\n   * @param rad - angle (in radians) to rotate\n   * @returns `this`\n   */\n  rotateY(rad: number): this {\n    return Quat.rotateY(this, this, rad);\n  }\n\n  /**\n   * Rotates `this` by the given angle about the Z axis\n   * Equivalent to `Quat.rotateZ(this, this, rad);`\n   * @category Methods\n   *\n   * @param rad - angle (in radians) to rotate\n   * @returns `this`\n   */\n  rotateZ(rad: number): this {\n    return Quat.rotateZ(this, this, rad);\n  }\n\n  /**\n   * Inverts `this`\n   * Equivalent to `Quat.invert(this, this);`\n   * @category Methods\n   *\n   * @returns `this`\n   */\n  invert(): this {\n    return Quat.invert(this, this);\n  }\n\n  /**\n   * Scales `this` by a scalar number\n   * Equivalent to `Quat.scale(this, this, scale);`\n   * @category Methods\n   *\n   * @param scale - amount to scale the vector by\n   * @returns `this`\n   */\n  scale(scale: number): QuatLike {\n    this[0] *= scale;\n    this[1] *= scale;\n    this[2] *= scale;\n    this[3] *= scale;\n    return this;\n  }\n\n  /**\n   * Calculates the dot product of `this` and another {@link Quat}\n   * Equivalent to `Quat.dot(this, b);`\n   * @category Methods\n   *\n   * @param b - the second operand\n   * @returns dot product of `this` and b\n   */\n  dot(b: Readonly<QuatLike>): number {\n    return Quat.dot(this, b);\n  }\n\n  // ===================\n  // Static accessors\n  // ===================\n\n  /**\n   * @category Static\n   *\n   * @returns The number of bytes in a {@link Quat}.\n   */\n  static get BYTE_LENGTH(): number {\n    return 4 * Float32Array.BYTES_PER_ELEMENT;\n  }\n\n  // ===================\n  // Static methods\n  // ===================\n\n  /**\n   * Creates a new identity quat\n   * @category Static\n   *\n   * @returns a new quaternion\n   */\n  static create(): Quat {\n    return new Quat();\n  }\n\n  /**\n   * Set a quat to the identity quaternion\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @returns `out`\n   */\n  static identity<T extends QuatLike>(out: T): T {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n  }\n\n  /**\n   * Sets a quat from the given angle and rotation axis,\n   * then returns it.\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param axis - the axis around which to rotate\n   * @param rad - the angle in radians\n   * @returns `out`\n   **/\n  static setAxisAngle<T extends QuatLike>(out: T, axis: Readonly<Vec3Like>, rad: number): T {\n    rad *= 0.5;\n    const s = Math.sin(rad);\n    out[0] = s * axis[0];\n    out[1] = s * axis[1];\n    out[2] = s * axis[2];\n    out[3] = Math.cos(rad);\n    return out;\n  }\n\n  /**\n   * Gets the rotation axis and angle for a given\n   *  quaternion. If a quaternion is created with\n   *  setAxisAngle, this method will return the same\n   *  values as provided in the original parameter list\n   *  OR functionally equivalent values.\n   * Example: The quaternion formed by axis [0, 0, 1] and\n   *  angle -90 is the same as the quaternion formed by\n   *  [0, 0, 1] and 270. This method favors the latter.\n   * @category Static\n   *\n   * @param out_axis - Vector receiving the axis of rotation\n   * @param q - Quaternion to be decomposed\n   * @return Angle, in radians, of the rotation\n   */\n  static getAxisAngle(out_axis: Vec3Like, q: Readonly<QuatLike>): number {\n    const rad = Math.acos(q[3]) * 2.0;\n    const s = Math.sin(rad / 2.0);\n    if (s > GLM_EPSILON) {\n      out_axis[0] = q[0] / s;\n      out_axis[1] = q[1] / s;\n      out_axis[2] = q[2] / s;\n    } else {\n      // If s is zero, return any axis (no rotation - axis does not matter)\n      out_axis[0] = 1;\n      out_axis[1] = 0;\n      out_axis[2] = 0;\n    }\n    return rad;\n  }\n\n  /**\n   * Gets the angular distance between two unit quaternions\n   * @category Static\n   *\n   * @param  {ReadonlyQuat} a     Origin unit quaternion\n   * @param  {ReadonlyQuat} b     Destination unit quaternion\n   * @return {Number}     Angle, in radians, between the two quaternions\n   */\n  static getAngle(a: Readonly<QuatLike>, b: Readonly<QuatLike>): number {\n    const dotproduct = Quat.dot(a, b);\n\n    return Math.acos(2 * dotproduct * dotproduct - 1);\n  }\n\n  /**\n   * Multiplies two quaternions.\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static multiply<T extends QuatLike>(out: T, a: Readonly<QuatLike>, b: Readonly<QuatLike>): T {\n    const ax = a[0];\n    const ay = a[1];\n    const az = a[2];\n    const aw = a[3];\n    const bx = b[0];\n    const by = b[1];\n    const bz = b[2];\n    const bw = b[3];\n\n    out[0] = ax * bw + aw * bx + ay * bz - az * by;\n    out[1] = ay * bw + aw * by + az * bx - ax * bz;\n    out[2] = az * bw + aw * bz + ax * by - ay * bx;\n    out[3] = aw * bw - ax * bx - ay * by - az * bz;\n    return out;\n  }\n\n  /**\n   * Rotates a quaternion by the given angle about the X axis\n   * @category Static\n   *\n   * @param out - quat receiving operation result\n   * @param a - quat to rotate\n   * @param rad - angle (in radians) to rotate\n   * @returns `out`\n   */\n  static rotateX<T extends QuatLike>(out: T, a: Readonly<QuatLike>, rad: number): T {\n    rad *= 0.5;\n\n    const ax = a[0];\n    const ay = a[1];\n    const az = a[2];\n    const aw = a[3];\n    const bx = Math.sin(rad);\n    const bw = Math.cos(rad);\n\n    out[0] = ax * bw + aw * bx;\n    out[1] = ay * bw + az * bx;\n    out[2] = az * bw - ay * bx;\n    out[3] = aw * bw - ax * bx;\n    return out;\n  }\n\n  /**\n   * Rotates a quaternion by the given angle about the Y axis\n   * @category Static\n   *\n   * @param out - quat receiving operation result\n   * @param a - quat to rotate\n   * @param rad - angle (in radians) to rotate\n   * @returns `out`\n   */\n  static rotateY<T extends QuatLike>(out: T, a: Readonly<QuatLike>, rad: number): T {\n    rad *= 0.5;\n\n    const ax = a[0];\n    const ay = a[1];\n    const az = a[2];\n    const aw = a[3];\n    const by = Math.sin(rad);\n    const bw = Math.cos(rad);\n\n    out[0] = ax * bw - az * by;\n    out[1] = ay * bw + aw * by;\n    out[2] = az * bw + ax * by;\n    out[3] = aw * bw - ay * by;\n    return out;\n  }\n\n  /**\n   * Rotates a quaternion by the given angle about the Z axis\n   * @category Static\n   *\n   * @param out - quat receiving operation result\n   * @param a - quat to rotate\n   * @param rad - angle (in radians) to rotate\n   * @returns `out`\n   */\n  static rotateZ<T extends QuatLike>(out: T, a: Readonly<QuatLike>, rad: number): T {\n    rad *= 0.5;\n\n    const ax = a[0];\n    const ay = a[1];\n    const az = a[2];\n    const aw = a[3];\n    const bz = Math.sin(rad);\n    const bw = Math.cos(rad);\n\n    out[0] = ax * bw + ay * bz;\n    out[1] = ay * bw - ax * bz;\n    out[2] = az * bw + aw * bz;\n    out[3] = aw * bw - az * bz;\n    return out;\n  }\n\n  /**\n   * Calculates the W component of a quat from the X, Y, and Z components.\n   * Assumes that quaternion is 1 unit in length.\n   * Any existing W component will be ignored.\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param a - quat to calculate W component of\n   * @returns `out`\n   */\n  static calculateW<T extends QuatLike>(out: T, a: Readonly<QuatLike>): T {\n    const x = a[0],\n      y = a[1],\n      z = a[2];\n\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n    return out;\n  }\n\n  /**\n   * Calculate the exponential of a unit quaternion.\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param a - quat to calculate the exponential of\n   * @returns `out`\n   */\n  static exp<T extends QuatLike>(out: T, a: Readonly<QuatLike>): T {\n    const x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n\n    const r = Math.sqrt(x * x + y * y + z * z);\n    const et = Math.exp(w);\n    const s = r > 0 ? (et * Math.sin(r)) / r : 0;\n\n    out[0] = x * s;\n    out[1] = y * s;\n    out[2] = z * s;\n    out[3] = et * Math.cos(r);\n\n    return out;\n  }\n\n  /**\n   * Calculate the natural logarithm of a unit quaternion.\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param a - quat to calculate the exponential of\n   * @returns `out`\n   */\n  static ln<T extends QuatLike>(out: T, a: Readonly<QuatLike>): T {\n    const x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n\n    const r = Math.sqrt(x * x + y * y + z * z);\n    const t = r > 0 ? Math.atan2(r, w) / r : 0;\n\n    out[0] = x * t;\n    out[1] = y * t;\n    out[2] = z * t;\n    out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n\n    return out;\n  }\n\n  /**\n   * Calculate the scalar power of a unit quaternion.\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param a - quat to calculate the exponential of\n   * @param b - amount to scale the quaternion by\n   * @returns `out`\n   */\n  static pow<T extends QuatLike>(out: T, a: Readonly<QuatLike>, b: number): T {\n    Quat.ln(out, a);\n    Quat.scale(out, out, b);\n    Quat.exp(out, out);\n    return out;\n  }\n\n  /**\n   * Performs a spherical linear interpolation between two quat\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param t - interpolation amount, in the range [0-1], between the two inputs\n   * @returns `out`\n   */\n  static slerp<T extends QuatLike>(out: T, a: Readonly<QuatLike>, b: Readonly<QuatLike>, t: number): T {\n    // benchmarks:\n    //    http://jsperf.com/quaternion-slerp-implementations\n    const ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n    let bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n\n    let scale0: number;\n    let scale1: number;\n\n    // calc cosine\n    let cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // adjust signs (if necessary)\n    if (cosom < 0.0) {\n      cosom = -cosom;\n      bx = -bx;\n      by = -by;\n      bz = -bz;\n      bw = -bw;\n    }\n    // calculate coefficients\n    if (1.0 - cosom > GLM_EPSILON) {\n      // standard case (slerp)\n      const omega = Math.acos(cosom);\n      const sinom = Math.sin(omega);\n      scale0 = Math.sin((1.0 - t) * omega) / sinom;\n      scale1 = Math.sin(t * omega) / sinom;\n    } else {\n      // \"from\" and \"to\" quaternions are very close\n      //  ... so we can do a linear interpolation\n      scale0 = 1.0 - t;\n      scale1 = t;\n    }\n    // calculate final values\n    out[0] = scale0 * ax + scale1 * bx;\n    out[1] = scale0 * ay + scale1 * by;\n    out[2] = scale0 * az + scale1 * bz;\n    out[3] = scale0 * aw + scale1 * bw;\n\n    return out;\n  }\n\n  /**\n   * Generates a random unit quaternion\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @returns `out`\n   */\n  /* static random(out: QuatLike): QuatLike {\n    // Implementation of http://planning.cs.uiuc.edu/node198.html\n    // TODO: Calling random 3 times is probably not the fastest solution\n    let u1 = glMatrix.RANDOM();\n    let u2 = glMatrix.RANDOM();\n    let u3 = glMatrix.RANDOM();\n\n    let sqrt1MinusU1 = Math.sqrt(1 - u1);\n    let sqrtU1 = Math.sqrt(u1);\n\n    out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n    out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n    out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n    out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n    return out;\n  }*/\n\n  /**\n   * Calculates the inverse of a quat\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param a - quat to calculate inverse of\n   * @returns `out`\n   */\n  static invert<T extends QuatLike>(out: T, a: Readonly<QuatLike>): T {\n    const a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n    const dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n    const invDot = dot ? 1.0 / dot : 0;\n\n    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n    out[0] = -a0 * invDot;\n    out[1] = -a1 * invDot;\n    out[2] = -a2 * invDot;\n    out[3] = a3 * invDot;\n    return out;\n  }\n\n  /**\n   * Calculates the conjugate of a quat\n   * If the quaternion is normalized, this function is faster than `quat.inverse` and produces the same result.\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param a - quat to calculate conjugate of\n   * @returns `out`\n   */\n  static conjugate<T extends QuatLike>(out: T, a: Readonly<QuatLike>): T {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a[3];\n    return out;\n  }\n\n  /**\n   * Creates a quaternion from the given 3x3 rotation matrix.\n   *\n   * NOTE: The resultant quaternion is not normalized, so you should be sure\n   * to re-normalize the quaternion yourself where necessary.\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param m - rotation matrix\n   * @returns `out`\n   */\n  static fromMat3<T extends QuatLike>(out: T, m: Readonly<Mat3Like>): T {\n    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n    // article \"Quaternion Calculus and Fast Animation\".\n    const fTrace = m[0] + m[4] + m[8];\n    let fRoot: number;\n\n    if (fTrace > 0.0) {\n      // |w| > 1/2, may as well choose w > 1/2\n      fRoot = Math.sqrt(fTrace + 1.0); // 2w\n      out[3] = 0.5 * fRoot;\n      fRoot = 0.5 / fRoot; // 1/(4w)\n      out[0] = (m[5] - m[7]) * fRoot;\n      out[1] = (m[6] - m[2]) * fRoot;\n      out[2] = (m[1] - m[3]) * fRoot;\n    } else {\n      // |w| <= 1/2\n      let i = 0;\n      if (m[4] > m[0]) { i = 1; }\n      if (m[8] > m[i * 3 + i]) { i = 2; }\n      const j = (i + 1) % 3;\n      const k = (i + 2) % 3;\n\n      fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n      out[i] = 0.5 * fRoot;\n      fRoot = 0.5 / fRoot;\n      out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n      out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n      out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n    }\n\n    return out;\n  }\n\n  /**\n   * Creates a quaternion from the given euler angle x, y, z.\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param x - Angle to rotate around X axis in degrees.\n   * @param y - Angle to rotate around Y axis in degrees.\n   * @param z - Angle to rotate around Z axis in degrees.\n   * @param {'xyz'|'xzy'|'yxz'|'yzx'|'zxy'|'zyx'} order - Intrinsic order for conversion, default is zyx.\n   * @returns `out`\n   */\n  static fromEuler<T extends QuatLike>(out: T, x: number, y: number, z: number, order = Quat.#DEFAULT_ANGLE_ORDER): T {\n    const halfToRad = (0.5 * Math.PI) / 180.0;\n    x *= halfToRad;\n    y *= halfToRad;\n    z *= halfToRad;\n\n    const sx = Math.sin(x);\n    const cx = Math.cos(x);\n    const sy = Math.sin(y);\n    const cy = Math.cos(y);\n    const sz = Math.sin(z);\n    const cz = Math.cos(z);\n\n    switch (order) {\n      case 'xyz':\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n        break;\n\n      case 'xzy':\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n        break;\n\n      case 'yxz':\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n        break;\n\n      case 'yzx':\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n        break;\n\n      case 'zxy':\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n        break;\n\n      case 'zyx':\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n        break;\n\n      default:\n        throw new Error(`Unknown angle order ${order}`);\n    }\n\n    return out;\n  }\n\n  /**\n   * Returns a string representation of a quatenion\n   * @category Static\n   *\n   * @param a - vector to represent as a string\n   * @returns string representation of the vector\n   */\n  static str(a: Readonly<QuatLike>): string {\n    return `Quat(${a.join(', ')})`;\n  }\n\n  /**\n   * Creates a new quat initialized with values from an existing quaternion\n   * @category Static\n   *\n   * @param a - quaternion to clone\n   * @returns a new quaternion\n   */\n  static clone(a: Readonly<QuatLike>): Quat {\n    return new Quat(a);\n  }\n\n  /**\n   * Creates a new quat initialized with the given values\n   * @category Static\n   *\n   * @param x - X component\n   * @param y - Y component\n   * @param z - Z component\n   * @param w - W component\n   * @returns a new quaternion\n   */\n  static fromValues(x: number, y: number, z: number, w: number): Quat {\n    return new Quat(x, y, z, w);\n  }\n\n  /**\n   * Copy the values from one quat to another\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param a - the source quaternion\n   * @returns `out`\n   */\n  static copy<T extends QuatLike>(out: T, a: Readonly<QuatLike>): T {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n  }\n\n  /**\n   * Set the components of a {@link Quat} to the given values\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param x - X component\n   * @param y - Y component\n   * @param z - Z component\n   * @param w - W component\n   * @returns `out`\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static set<T extends QuatLike>(out: T, x: number, y: number, z: number, w: number): T { return out; }\n\n  /**\n   * Adds two {@link Quat}'s\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static add<T extends QuatLike>(out: T, a: Readonly<QuatLike>, b: Readonly<QuatLike>): T { return out; }\n\n  /**\n   * Alias for {@link Quat.multiply}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static mul<T extends QuatLike>(out: T, a: Readonly<QuatLike>, b: Readonly<QuatLike>): T { return out; }\n\n  /**\n   * Scales a quat by a scalar number\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - the vector to scale\n   * @param scale - amount to scale the vector by\n   * @returns `out`\n   */\n  static scale<T extends QuatLike>(out: T, a: Readonly<QuatLike>, scale: number): T {\n    out[0] = a[0] * scale;\n    out[1] = a[1] * scale;\n    out[2] = a[2] * scale;\n    out[3] = a[3] * scale;\n    return out;\n  }\n\n  /**\n   * Calculates the dot product of two quat's\n   * @category Static\n   *\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns dot product of a and b\n   */\n  static dot(a: Readonly<QuatLike>, b: Readonly<QuatLike>): number {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n  }\n\n  /**\n   * Performs a linear interpolation between two quat's\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param t - interpolation amount, in the range [0-1], between the two inputs\n   * @returns `out`\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static lerp<T extends QuatLike>(out: T, a: Readonly<QuatLike>, b: Readonly<QuatLike>, t: number): T { return out; }\n\n  /**\n   * Calculates the magnitude (length) of a {@link Quat}\n   * @category Static\n   *\n   * @param a - quaternion to calculate length of\n   * @returns length of `a`\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static magnitude(a: Readonly<QuatLike>): number { return 0; }\n\n  /**\n   * Alias for {@link Quat.magnitude}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static mag(a: Readonly<QuatLike>): number { return 0; }\n\n  /**\n   * Alias for {@link Quat.magnitude}\n   * @category Static\n   * @deprecated Use {@link Quat.magnitude} to avoid conflicts with builtin `length` methods/attribs\n   */\n  // Length conflicts with Function.length\n  static length(a: Readonly<QuatLike>): number { return 0; }  // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Alias for {@link Quat.magnitude}\n   * @category Static\n   * @deprecated Use {@link Quat.mag}\n   */\n  static len(a: Readonly<QuatLike>): number { return 0; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Calculates the squared length of a {@link Quat}\n   * @category Static\n   *\n   * @param a - quaternion to calculate squared length of\n   * @returns squared length of a\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static squaredLength(a: Readonly<QuatLike>): number { return 0; }\n\n  /**\n   * Alias for {@link Quat.squaredLength}\n   * @category Static\n   */\n  static sqrLen(a: Readonly<QuatLike>): number { return 0; }  // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Normalize a {@link Quat}\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param a - quaternion to normalize\n   * @returns `out`\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static normalize<T extends QuatLike>(out: T, a: Readonly<QuatLike>): T { return out; }\n\n  /**\n   * Returns whether the quaternions have exactly the same elements in the same position (when compared with ===)\n   * @category Static\n   *\n   * @param a - The first quaternion.\n   * @param b - The second quaternion.\n   * @returns True if the vectors are equal, false otherwise.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static exactEquals(a: Readonly<QuatLike>, b: Readonly<QuatLike>): boolean { return false; }\n\n  /**\n   * Returns whether the quaternions have approximately the same elements in the same position.\n   * @category Static\n   *\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns True if the vectors are equal, false otherwise.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static equals(a: Readonly<QuatLike>, b: Readonly<QuatLike>): boolean { return false; }\n\n  /**\n   * Sets a quaternion to represent the shortest rotation from one\n   * vector to another.\n   *\n   * Both vectors are assumed to be unit length.\n   * @category Static\n   *\n   * @param out - the receiving quaternion.\n   * @param a - the initial vector\n   * @param b - the destination vector\n   * @returns `out`\n   */\n  static rotationTo<T extends QuatLike>(out: T, a: Readonly<Vec3Like>, b: Readonly<Vec3Like>): T {\n    const dot = Vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      Vec3.cross(Quat.#TMP_VEC3, Quat.#X_UNIT_VEC3, a);\n      if (Vec3.mag(Quat.#TMP_VEC3) < 0.000001) { Vec3.cross(Quat.#TMP_VEC3, Quat.#Y_UNIT_VEC3, a); }\n      Vec3.normalize(Quat.#TMP_VEC3, Quat.#TMP_VEC3);\n      Quat.setAxisAngle(out, Quat.#TMP_VEC3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      Vec3.cross(Quat.#TMP_VEC3, a, b);\n      out[0] = Quat.#TMP_VEC3[0];\n      out[1] = Quat.#TMP_VEC3[1];\n      out[2] = Quat.#TMP_VEC3[2];\n      out[3] = 1 + dot;\n      return Quat.normalize(out, out);\n    }\n  }\n\n  /**\n   * Performs a spherical linear interpolation with two control points\n   * @category Static\n   *\n   * @param out - the receiving quaternion\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param c - the third operand\n   * @param d - the fourth operand\n   * @param t - interpolation amount, in the range [0-1], between the two inputs\n   * @returns `out`\n   */\n  static sqlerp<T extends QuatLike>(out: T, a: Readonly<QuatLike>, b: Readonly<QuatLike>, c: Readonly<QuatLike>,\n    d: Readonly<QuatLike>, t: number): T {\n    Quat.slerp(Quat.#TMP_QUAT1, a, d, t);\n    Quat.slerp(Quat.#TMP_QUAT2, b, c, t);\n    Quat.slerp(out, Quat.#TMP_QUAT1, Quat.#TMP_QUAT2, 2 * t * (1 - t));\n\n    return out;\n  }\n\n  /**\n   * Sets the specified quaternion with values corresponding to the given\n   * axes. Each axis is a vec3 and is expected to be unit length and\n   * perpendicular to all other specified axes.\n   * @category Static\n   *\n   * @param out - The receiving quaternion\n   * @param view - the vector representing the viewing direction\n   * @param right - the vector representing the local `right` direction\n   * @param up - the vector representing the local `up` direction\n   * @returns `out`\n   */\n  static setAxes<T extends QuatLike>(out: T, view: Readonly<Vec3Like>, right: Readonly<Vec3Like>,\n    up: Readonly<Vec3Like>): T {\n    Quat.#TMP_MAT3[0] = right[0];\n    Quat.#TMP_MAT3[3] = right[1];\n    Quat.#TMP_MAT3[6] = right[2];\n\n    Quat.#TMP_MAT3[1] = up[0];\n    Quat.#TMP_MAT3[4] = up[1];\n    Quat.#TMP_MAT3[7] = up[2];\n\n    Quat.#TMP_MAT3[2] = -view[0];\n    Quat.#TMP_MAT3[5] = -view[1];\n    Quat.#TMP_MAT3[8] = -view[2];\n\n    return Quat.normalize(out, Quat.fromMat3(out, Quat.#TMP_MAT3));\n  }\n}\n\n// Methods which re-use the Vec4 implementation\nQuat.set = Vec4.set;\nQuat.add = Vec4.add;\nQuat.lerp = Vec4.lerp;\nQuat.normalize = Vec4.normalize;\nQuat.squaredLength = Vec4.squaredLength;\nQuat.sqrLen = Vec4.squaredLength;\nQuat.exactEquals = Vec4.exactEquals;\nQuat.equals = Vec4.equals;\nQuat.magnitude = Vec4.magnitude;\n\n// Instance method alias assignments\nQuat.prototype.mul = Quat.prototype.multiply; // eslint-disable-line @typescript-eslint/unbound-method\n\n// Static method alias assignments\nQuat.mul = Quat.multiply;\nQuat.mag = Quat.magnitude;\nQuat.length = Quat.magnitude;\nQuat.len = Quat.magnitude;\n", "import { Mat4 } from './Mat4.js';\nimport { Quat } from './Quat.js';\nimport { GLM_EPSILON } from '#gl-matrix/common';\n\nimport type { Mat4Like, QuatLike, Quat2Like, Vec3Like } from '#gl-matrix/types';\n\nconst IDENTITY_QUAT2 = new Float32Array([\n  0, 0, 0, 1,\n  0, 0, 0, 0\n]);\n\n/**\n * Dual Quaternion\n */\nexport class Quat2 extends Float32Array {\n  // Temporary variables to prevent repeated allocations in the algorithms within Quat2.\n  // These are declared as TypedArrays to aid in tree-shaking.\n\n  static #TMP_QUAT = new Float32Array(4);\n  static #TMP_VEC3 = new Float32Array(3);\n\n  /**\n   * Create a {@link Quat2}.\n   *\n   * @category Constructor\n   */\n  constructor(...values: [Readonly<Quat2Like> | ArrayBufferLike, number?] | number[] | [undefined]) {\n    switch (values.length) {\n      case 8:\n        super(values); break;\n      case 2:\n        super(values[0] as ArrayBuffer, values[1], 8); break;\n      case 1: {\n        const v = values[0];\n        if (v === undefined) {\n          super(IDENTITY_QUAT2);\n        } else if (typeof v === 'number') {\n          super([v, v, v, v, v, v, v, v]);\n        } else {\n          super(v as ArrayBuffer, 0, 8);\n        }\n        break;\n      }\n      default:\n        super(IDENTITY_QUAT2);\n        break;\n    }\n  }\n\n  // ============\n  // Accessors\n  // ============\n\n  /**\n   * A string representation of `this`\n   * Equivalent to `Quat2.str(this);`\n   *\n   * @category Accessors\n   */\n  get str(): string {\n    return Quat2.str(this);\n  }\n\n  // ===================\n  // Instances methods\n  // ===================\n\n  /**\n   * Copy the values from another {@link Quat2} into `this`.\n   * @category Methods\n   *\n   * @param a the source dual quaternion\n   * @returns `this`\n   */\n  copy(a: Readonly<Quat2Like>): this {\n    super.set(a);\n    return this;\n  }\n\n  // ===================\n  // Static accessors\n  // ===================\n\n  /**\n   * @category Static\n   *\n   * @returns The number of bytes in a {@link Quat2}.\n   */\n  static get BYTE_LENGTH(): number {\n    return 8 * Float32Array.BYTES_PER_ELEMENT;\n  }\n\n  // ===================\n  // Static methods\n  // ===================\n\n  /**\n   * Creates a new identity {@link Quat2}\n   * @category Static\n   *\n   * @returns a new dual quaternion [real -> rotation, dual -> translation]\n   */\n  static create(): Quat2 {\n    return new Quat2();\n  }\n\n  /**\n   * Creates a {@link Quat2} quat initialized with values from an existing quaternion\n   * @category Static\n   *\n   * @param a - dual quaternion to clone\n   * @returns a new dual quaternion\n   */\n  static clone(a: Quat2Like): Quat2 {\n    return new Quat2(a);\n  }\n\n  /**\n   * Creates a new {@link Quat2}  initialized with the given values\n   * @category Static\n   *\n   * @param x1 - 1st X component\n   * @param y1 - 1st Y component\n   * @param z1 - 1st Z component\n   * @param w1 - 1st W component\n   * @param x2 - 2nd X component\n   * @param y2 - 2nd Y component\n   * @param z2 - 2nd Z component\n   * @param w2 - 2nd W component\n   * @returns a new dual quaternion\n   */\n  static fromValues(x1: number, y1: number, z1: number, w1: number,\n    x2: number, y2: number, z2: number, w2: number): Quat2 {\n    return new Quat2(x1, y1, z1, w1, x2, y2, z2, w2);\n  }\n\n  /**\n   * Creates a new {@link Quat2} from the given values (quat and translation)\n   * @category Static\n   *\n   * @param x1 - X component (rotation)\n   * @param y1 - Y component (rotation)\n   * @param z1 - Z component (rotation)\n   * @param w1 - W component (rotation)\n   * @param x2 - X component (translation)\n   * @param y2 - Y component (translation)\n   * @param z2 - Z component (translation)\n   * @returns a new dual quaternion\n   */\n  static fromRotationTranslationValues(x1: number, y1: number, z1: number, w1: number,\n    x2: number, y2: number, z2: number): Quat2 {\n    const ax = x2 * 0.5;\n    const ay = y2 * 0.5;\n    const az = z2 * 0.5;\n\n    return new Quat2(x1, y1, z1, w1,\n      ax * w1 + ay * z1 - az * y1,\n      ay * w1 + az * x1 - ax * z1,\n      az * w1 + ax * y1 - ay * x1,\n      -ax * x1 - ay * y1 - az * z1);\n  }\n\n  /**\n   * Sets a {@link Quat2} from a quaternion and a translation\n   * @category Static\n   *\n   * @param out - dual quaternion receiving operation result\n   * @param q - a normalized quaternion\n   * @param t - translation vector\n   * @returns `out`\n   */\n  static fromRotationTranslation<T extends Quat2Like>(out: T, q: Readonly<QuatLike>, t: Readonly<Vec3Like>): T {\n    const ax = t[0] * 0.5;\n    const ay = t[1] * 0.5;\n    const az = t[2] * 0.5;\n    const bx = q[0];\n    const by = q[1];\n    const bz = q[2];\n    const bw = q[3];\n    out[0] = bx;\n    out[1] = by;\n    out[2] = bz;\n    out[3] = bw;\n    out[4] = ax * bw + ay * bz - az * by;\n    out[5] = ay * bw + az * bx - ax * bz;\n    out[6] = az * bw + ax * by - ay * bx;\n    out[7] = -ax * bx - ay * by - az * bz;\n    return out;\n  }\n\n  /**\n   * Sets a {@link Quat2} from a translation\n   * @category Static\n   *\n   * @param out - dual quaternion receiving operation result\n   * @param t - translation vector\n   * @returns `out`\n   */\n  static fromTranslation<T extends Quat2Like>(out: T, t: Readonly<Vec3Like>): T {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = t[0] * 0.5;\n    out[5] = t[1] * 0.5;\n    out[6] = t[2] * 0.5;\n    out[7] = 0;\n    return out;\n  }\n\n  /**\n   * Sets a {@link Quat2} from a quaternion\n   * @category Static\n   *\n   * @param out - dual quaternion receiving operation result\n   * @param q - a normalized quaternion\n   * @returns `out`\n   */\n  static fromRotation<T extends Quat2Like>(out: T, q: Readonly<QuatLike>): T {\n    out[0] = q[0];\n    out[1] = q[1];\n    out[2] = q[2];\n    out[3] = q[3];\n    out[4] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    return out;\n  }\n\n  /**\n   * Sets a {@link Quat2} from a quaternion\n   * @category Static\n   *\n   * @param out - dual quaternion receiving operation result\n   * @param a - the matrix\n   * @returns `out`\n   */\n  static fromMat4<T extends Quat2Like>(out: T, a: Readonly<Mat4Like>): T {\n    Mat4.getRotation(Quat2.#TMP_QUAT, a);\n    Mat4.getTranslation(Quat2.#TMP_VEC3, a);\n    return Quat2.fromRotationTranslation(out, Quat2.#TMP_QUAT, Quat2.#TMP_VEC3);\n  }\n\n  /**\n   * Copy the values from one {@link Quat2} to another\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param a - the source dual quaternion\n   * @returns `out`\n   */\n  static copy<T extends Quat2Like>(out: T, a: Readonly<Quat2Like>): T {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    return out;\n  }\n\n  /**\n   * Set a {@link Quat2} to the identity dual quaternion\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @returns `out`\n   */\n  static identity<T extends Quat2Like>(out: T): T {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    return out;\n  }\n\n  /**\n   * Set the components of a {@link Quat2} to the given values\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param x1 - 1st X component\n   * @param y1 - 1st Y component\n   * @param z1 - 1st Z component\n   * @param w1 - 1st W component\n   * @param x2 - 2nd X component\n   * @param y2 - 2nd Y component\n   * @param z2 - 2nd Z component\n   * @param w2 - 2nd W component\n   * @returns `out`\n   */\n  static set<T extends Quat2Like>(out: T, x1: number, y1: number, z1: number, w1: number,\n    x2: number, y2: number, z2: number, w2: number): T {\n    out[0] = x1;\n    out[1] = y1;\n    out[2] = z1;\n    out[3] = w1;\n    out[4] = x2;\n    out[5] = y2;\n    out[6] = z2;\n    out[7] = w2;\n    return out;\n  }\n\n  /**\n   * Gets the real part of a dual quat\n   * @category Static\n   *\n   * @param out - real part\n   * @param a - Dual Quaternion\n   * @return `out`\n   */\n  static getReal<T extends QuatLike>(out: T, a: Readonly<Quat2Like>): T {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n  };\n\n  /**\n   * Gets the dual part of a dual quat\n   * @category Static\n   *\n   * @param out - dual part\n   * @param a - Dual Quaternion\n   * @return `out`\n   */\n  static getDual<T extends QuatLike>(out: T, a: Readonly<Quat2Like>): T {\n    out[0] = a[4];\n    out[1] = a[5];\n    out[2] = a[6];\n    out[3] = a[7];\n    return out;\n  }\n\n  /**\n   * Set the real component of a {@link Quat2} to the given quaternion\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param a - a quaternion representing the real part\n   * @return `out`\n   */\n  static setReal<T extends Quat2Like>(out: T, a: Readonly<QuatLike>): T {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n  };\n\n  /**\n   * Set the dual component of a {@link Quat2} to the given quaternion\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param a - a quaternion representing the dual part\n   * @return `out`\n   */\n  static setDual<T extends Quat2Like>(out: T, a: Readonly<QuatLike>): T {\n    out[4] = a[0];\n    out[5] = a[1];\n    out[6] = a[2];\n    out[7] = a[3];\n    return out;\n  }\n\n  /**\n   * Gets the translation of a normalized {@link Quat2}\n   * @category Static\n   *\n   * @param out - the receiving translation vector\n   * @param a - Dual Quaternion to be decomposed\n   * @return `out`\n   */\n  static getTranslation<T extends Vec3Like>(out: T, a: Readonly<Quat2Like>): T {\n    const ax = a[4];\n    const ay = a[5];\n    const az = a[6];\n    const aw = a[7];\n    const bx = -a[0];\n    const by = -a[1];\n    const bz = -a[2];\n    const bw = a[3];\n    out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n    return out;\n  }\n\n  /**\n   * Translates a {@link Quat2} by the given vector\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param a - the dual quaternion to translate\n   * @param v - vector to translate by\n   * @returns `out`\n   */\n  static translate<T extends Quat2Like>(out: T, a: Readonly<Quat2Like>, v: Readonly<Vec3Like>): T {\n    const ax1 = a[0];\n    const ay1 = a[1];\n    const az1 = a[2];\n    const aw1 = a[3];\n    const bx1 = v[0] * 0.5;\n    const by1 = v[1] * 0.5;\n    const bz1 = v[2] * 0.5;\n    const ax2 = a[4];\n    const ay2 = a[5];\n    const az2 = a[6];\n    const aw2 = a[7];\n    out[0] = ax1;\n    out[1] = ay1;\n    out[2] = az1;\n    out[3] = aw1;\n    out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n    out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n    out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n    out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n    return out;\n  }\n\n  /**\n   * Rotates a {@link Quat2} around the X axis\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param a - the dual quaternion to rotate\n   * @param rad - angle (in radians) to rotate\n   * @returns `out`\n   */\n  static rotateX<T extends Quat2Like>(out: T, a: Readonly<Quat2Like>, rad: number): T {\n    let bx = -a[0];\n    let by = -a[1];\n    let bz = -a[2];\n    let bw = a[3];\n    const ax = a[4];\n    const ay = a[5];\n    const az = a[6];\n    const aw = a[7];\n    const ax1 = ax * bw + aw * bx + ay * bz - az * by;\n    const ay1 = ay * bw + aw * by + az * bx - ax * bz;\n    const az1 = az * bw + aw * bz + ax * by - ay * bx;\n    const aw1 = aw * bw - ax * bx - ay * by - az * bz;\n    Quat.rotateX(out as QuatLike, a as QuatLike, rad);\n    bx = out[0];\n    by = out[1];\n    bz = out[2];\n    bw = out[3];\n    out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n    out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n    out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n    out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n    return out;\n  }\n\n  /**\n   * Rotates a {@link Quat2} around the Y axis\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param a - the dual quaternion to rotate\n   * @param rad - angle (in radians) to rotate\n   * @returns `out`\n   */\n  static rotateY<T extends Quat2Like>(out: T, a: Readonly<Quat2Like>, rad: number): T {\n    let bx = -a[0];\n    let by = -a[1];\n    let bz = -a[2];\n    let bw = a[3];\n    const ax = a[4];\n    const ay = a[5];\n    const az = a[6];\n    const aw = a[7];\n    const ax1 = ax * bw + aw * bx + ay * bz - az * by;\n    const ay1 = ay * bw + aw * by + az * bx - ax * bz;\n    const az1 = az * bw + aw * bz + ax * by - ay * bx;\n    const aw1 = aw * bw - ax * bx - ay * by - az * bz;\n    Quat.rotateY(out as QuatLike, a as QuatLike, rad);\n    bx = out[0];\n    by = out[1];\n    bz = out[2];\n    bw = out[3];\n    out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n    out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n    out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n    out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n    return out;\n  }\n\n  /**\n   * Rotates a {@link Quat2} around the Z axis\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param a - the dual quaternion to rotate\n   * @param rad - angle (in radians) to rotate\n   * @returns `out`\n   */\n  static rotateZ<T extends Quat2Like>(out: T, a: Readonly<Quat2Like>, rad: number): T {\n    let bx = -a[0];\n    let by = -a[1];\n    let bz = -a[2];\n    let bw = a[3];\n    const ax = a[4];\n    const ay = a[5];\n    const az = a[6];\n    const aw = a[7];\n    const ax1 = ax * bw + aw * bx + ay * bz - az * by;\n    const ay1 = ay * bw + aw * by + az * bx - ax * bz;\n    const az1 = az * bw + aw * bz + ax * by - ay * bx;\n    const aw1 = aw * bw - ax * bx - ay * by - az * bz;\n    Quat.rotateZ(out as QuatLike, a as QuatLike, rad);\n    bx = out[0];\n    by = out[1];\n    bz = out[2];\n    bw = out[3];\n    out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n    out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n    out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n    out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n    return out;\n  }\n\n  /**\n   * Rotates a {@link Quat2} by a given quaternion (a * q)\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param a - the dual quaternion to rotate\n   * @param q - quaternion to rotate by\n   * @returns `out`\n   */\n  static rotateByQuatAppend<T extends Quat2Like>(out: T, a: Readonly<Quat2Like>, q: Readonly<QuatLike>): T {\n    const qx = q[0];\n    const qy = q[1];\n    const qz = q[2];\n    const qw = q[3];\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n    let aw = a[3];\n\n    out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n    out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n    out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n    out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n    ax = a[4];\n    ay = a[5];\n    az = a[6];\n    aw = a[7];\n    out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n    out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n    out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n    out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n    return out;\n  }\n\n  /**\n   * Rotates a {@link Quat2} by a given quaternion (q * a)\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param q - quaternion to rotate by\n   * @param a - the dual quaternion to rotate\n   * @returns `out`\n   */\n  static rotateByQuatPrepend<T extends Quat2Like>(out: T, q: Readonly<QuatLike>, a: Readonly<Quat2Like>): T {\n    const qx = q[0];\n    const qy = q[1];\n    const qz = q[2];\n    const qw = q[3];\n    let bx = a[0];\n    let by = a[1];\n    let bz = a[2];\n    let bw = a[3];\n\n    out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n    out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n    out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n    out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n    bx = a[4];\n    by = a[5];\n    bz = a[6];\n    bw = a[7];\n    out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n    out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n    out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n    out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n    return out;\n  }\n\n  /**\n   * Rotates a {@link Quat2} around a given axis. Does the normalization automatically\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param a - the dual quaternion to rotate\n   * @param axis - the axis to rotate around\n   * @param rad - how far the rotation should be\n   * @returns `out`\n   */\n  static rotateAroundAxis<T extends Quat2Like>(out: T, a: Readonly<Quat2Like>, axis: Readonly<Vec3Like>,\n    rad: number): T {\n    // Special case for rad = 0\n    if (Math.abs(rad) < GLM_EPSILON) {\n      return Quat2.copy(out, a);\n    }\n    const axisLength = Math.sqrt(axis[0] * axis[0] + axis[1] * axis[1] + axis[2] * axis[2]);\n\n    rad *= 0.5;\n    const s = Math.sin(rad);\n    const bx = (s * axis[0]) / axisLength;\n    const by = (s * axis[1]) / axisLength;\n    const bz = (s * axis[2]) / axisLength;\n    const bw = Math.cos(rad);\n\n    const ax1 = a[0];\n    const ay1 = a[1];\n    const az1 = a[2];\n    const aw1 = a[3];\n    out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n    out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n    out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n    out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n\n    const ax = a[4];\n    const ay = a[5];\n    const az = a[6];\n    const aw = a[7];\n    out[4] = ax * bw + aw * bx + ay * bz - az * by;\n    out[5] = ay * bw + aw * by + az * bx - ax * bz;\n    out[6] = az * bw + aw * bz + ax * by - ay * bx;\n    out[7] = aw * bw - ax * bx - ay * by - az * bz;\n\n    return out;\n  }\n\n  /**\n   * Adds two {@link Quat2}s\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns `out`\n   */\n  static add<T extends Quat2Like>(out: T, a: Readonly<Quat2Like>, b: Readonly<Quat2Like>): T {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    return out;\n  }\n\n  /**\n   * Multiplies two {@link Quat2}s\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns {quat2} out\n   */\n  static multiply<T extends Quat2Like>(out: T, a: Readonly<Quat2Like>, b: Readonly<Quat2Like>): T {\n    const ax0 = a[0];\n    const ay0 = a[1];\n    const az0 = a[2];\n    const aw0 = a[3];\n    const bx1 = b[4];\n    const by1 = b[5];\n    const bz1 = b[6];\n    const bw1 = b[7];\n    const ax1 = a[4];\n    const ay1 = a[5];\n    const az1 = a[6];\n    const aw1 = a[7];\n    const bx0 = b[0];\n    const by0 = b[1];\n    const bz0 = b[2];\n    const bw0 = b[3];\n    out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n    out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n    out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n    out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n    out[4] =\n      ax0 * bw1 +\n      aw0 * bx1 +\n      ay0 * bz1 -\n      az0 * by1 +\n      ax1 * bw0 +\n      aw1 * bx0 +\n      ay1 * bz0 -\n      az1 * by0;\n    out[5] =\n      ay0 * bw1 +\n      aw0 * by1 +\n      az0 * bx1 -\n      ax0 * bz1 +\n      ay1 * bw0 +\n      aw1 * by0 +\n      az1 * bx0 -\n      ax1 * bz0;\n    out[6] =\n      az0 * bw1 +\n      aw0 * bz1 +\n      ax0 * by1 -\n      ay0 * bx1 +\n      az1 * bw0 +\n      aw1 * bz0 +\n      ax1 * by0 -\n      ay1 * bx0;\n    out[7] =\n      aw0 * bw1 -\n      ax0 * bx1 -\n      ay0 * by1 -\n      az0 * bz1 +\n      aw1 * bw0 -\n      ax1 * bx0 -\n      ay1 * by0 -\n      az1 * bz0;\n    return out;\n  }\n\n  /**\n   * Alias for {@link Quat2.multiply}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static mul<T extends Quat2Like>(out: T, a: Readonly<Quat2Like>, b: Readonly<Quat2Like>): T { return out; }\n\n  /**\n   * Scales a {@link Quat2} by a scalar value\n   * @category Static\n   *\n   * @param out - the receiving dual quaterion\n   * @param a - the dual quaternion to scale\n   * @param b - scalar value to scale the dual quaterion by\n   * @returns `out`\n   */\n  static scale<T extends Quat2Like>(out: T, a: Readonly<Quat2Like>, b: number): T {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    return out;\n  }\n\n  /**\n   * Calculates the dot product of two {@link Quat2}s (The dot product of the real parts)\n   * @category Static\n   *\n   * @param a - the first operand\n   * @param b - the second operand\n   * @returns dot product of a and b\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static dot(a: Readonly<Quat2Like>, b: Readonly<Quat2Like>): number { return 0; }\n\n  /**\n   * Performs a linear interpolation between two {@link Quat2}s\n   * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when `t = 0.5`)\n   * @category Static\n   *\n   * @param out - the receiving dual quat\n   * @param a - the first operand\n   * @param b - the second operand\n   * @param t - interpolation amount, in the range [0-1], between the two inputs\n   * @returns `out`\n   */\n  static lerp<T extends Quat2Like>(out: T, a: Readonly<Quat2Like>, b: Readonly<Quat2Like>, t: number): T {\n    const mt = 1 - t;\n    if (Quat2.dot(a, b) < 0) { t = -t; }\n\n    out[0] = a[0] * mt + b[0] * t;\n    out[1] = a[1] * mt + b[1] * t;\n    out[2] = a[2] * mt + b[2] * t;\n    out[3] = a[3] * mt + b[3] * t;\n    out[4] = a[4] * mt + b[4] * t;\n    out[5] = a[5] * mt + b[5] * t;\n    out[6] = a[6] * mt + b[6] * t;\n    out[7] = a[7] * mt + b[7] * t;\n\n    return out;\n  }\n\n  /**\n   * Calculates the inverse of a {@link Quat2}. If they are normalized, conjugate is cheaper\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param a - dual quat to calculate inverse of\n   * @returns `out`\n   */\n  static invert<T extends Quat2Like>(out: T, a: Readonly<Quat2Like>): T {\n    const sqlen = Quat2.squaredLength(a);\n    out[0] = -a[0] / sqlen;\n    out[1] = -a[1] / sqlen;\n    out[2] = -a[2] / sqlen;\n    out[3] = a[3] / sqlen;\n    out[4] = -a[4] / sqlen;\n    out[5] = -a[5] / sqlen;\n    out[6] = -a[6] / sqlen;\n    out[7] = a[7] / sqlen;\n    return out;\n  }\n\n  /**\n   * Calculates the conjugate of a {@link Quat2}. If the dual quaternion is normalized, this function is faster than\n   * {@link Quat2.invert} and produces the same result.\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param a - dual quaternion to calculate conjugate of\n   * @returns `out`\n   */\n  static conjugate<T extends Quat2Like>(out: T, a: Readonly<Quat2Like>): T {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a[3];\n    out[4] = -a[4];\n    out[5] = -a[5];\n    out[6] = -a[6];\n    out[7] = a[7];\n    return out;\n  }\n\n  /**\n   * Calculates the magnitude (length) of a {@link Quat2}\n   * @category Static\n   *\n   * @param a - dual quaternion to calculate length of\n   * @returns length of `a`\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static magnitude(a: Readonly<Quat2Like>): number { return 0; }\n\n  /**\n   * Alias for {@link Quat2.magnitude}\n   * @category Static\n   */\n  static mag(a: Readonly<Quat2Like>): number { return 0; }  // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Alias for {@link Quat2.magnitude}\n   * @category Static\n   * @deprecated Use {@link Quat2.magnitude} to avoid conflicts with builtin `length` methods/attribs\n   */\n  // Length conflicts with Function.length\n  static length(a: Readonly<Quat2Like>): number { return 0; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Alias for {@link Quat2.magnitude}\n   * @category Static\n   * @deprecated Use {@link Quat2.mag}\n   */\n  static len(a: Readonly<Quat2Like>): number { return 0; }  // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Calculates the squared length of a {@link Quat2}\n   * @category Static\n   *\n   * @param a - dual quaternion to calculate squared length of\n   * @returns squared length of a\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static squaredLength(a: Readonly<Quat2Like>): number { return 0; }\n\n  /**\n   * Alias for {@link Quat2.squaredLength}\n   * @category Static\n   */\n  static sqrLen(a: Readonly<Quat2Like>): number { return 0; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Normalize a {@link Quat2}\n   * @category Static\n   *\n   * @param out - the receiving dual quaternion\n   * @param a - dual quaternion to normalize\n   * @returns `out`\n   */\n  static normalize<T extends Quat2Like>(out: T, a: Readonly<Quat2Like>): T {\n    let magnitude = Quat2.squaredLength(a);\n    if (magnitude > 0) {\n      magnitude = Math.sqrt(magnitude);\n\n      const a0 = a[0] / magnitude;\n      const a1 = a[1] / magnitude;\n      const a2 = a[2] / magnitude;\n      const a3 = a[3] / magnitude;\n\n      const b0 = a[4];\n      const b1 = a[5];\n      const b2 = a[6];\n      const b3 = a[7];\n\n      const a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\n\n      out[0] = a0;\n      out[1] = a1;\n      out[2] = a2;\n      out[3] = a3;\n\n      out[4] = (b0 - a0 * a_dot_b) / magnitude;\n      out[5] = (b1 - a1 * a_dot_b) / magnitude;\n      out[6] = (b2 - a2 * a_dot_b) / magnitude;\n      out[7] = (b3 - a3 * a_dot_b) / magnitude;\n    }\n    return out;\n  }\n\n  /**\n   * Returns a string representation of a {@link Quat2}\n   * @category Static\n   *\n   * @param a - dual quaternion to represent as a string\n   * @returns string representation of the vector\n   */\n  static str(a: Readonly<Quat2Like>): string {\n    return `Quat2(${a.join(', ')})`;\n  }\n\n  /**\n   * Returns whether the {@link Quat2}s have exactly the same elements in the same position (when compared with ===)\n   * @category Static\n   *\n   * @param a - The first dual quaternion.\n   * @param b - The second dual quaternion.\n   * @returns True if the dual quaternions are equal, false otherwise.\n   */\n  static exactEquals(a: Readonly<Quat2Like>, b: Readonly<Quat2Like>): boolean {\n    return (\n      a[0] === b[0] &&\n      a[1] === b[1] &&\n      a[2] === b[2] &&\n      a[3] === b[3] &&\n      a[4] === b[4] &&\n      a[5] === b[5] &&\n      a[6] === b[6] &&\n      a[7] === b[7]\n    );\n  }\n\n  /**\n   * Returns whether the {@link Quat2}s have approximately the same elements in the same position.\n   * @category Static\n   *\n   * @param a - The first dual quaternion.\n   * @param b - The second dual quaternion.\n   * @returns True if the dual quaternions are equal, false otherwise.\n   */\n  static equals(a: Readonly<Quat2Like>, b: Readonly<Quat2Like>): boolean {\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const a3 = a[3];\n    const a4 = a[4];\n    const a5 = a[5];\n    const a6 = a[6];\n    const a7 = a[7];\n    const b0 = b[0];\n    const b1 = b[1];\n    const b2 = b[2];\n    const b3 = b[3];\n    const b4 = b[4];\n    const b5 = b[5];\n    const b6 = b[6];\n    const b7 = b[7];\n    return (\n      Math.abs(a0 - b0) <= GLM_EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n      Math.abs(a1 - b1) <= GLM_EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n      Math.abs(a2 - b2) <= GLM_EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n      Math.abs(a3 - b3) <= GLM_EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n      Math.abs(a4 - b4) <= GLM_EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n      Math.abs(a5 - b5) <= GLM_EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n      Math.abs(a6 - b6) <= GLM_EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n      Math.abs(a7 - b7) <= GLM_EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7))\n    );\n  }\n}\n\n// Methods which re-use the Quat implementation\n// @ts-expect-error: Ignore type error coercion.\nQuat2.dot = Quat.dot;\n// @ts-expect-error: Ignore type error coercion.\nQuat2.squaredLength = Quat.squaredLength;\n// @ts-expect-error: Ignore type error coercion.\nQuat2.sqrLen = Quat.squaredLength;\n// @ts-expect-error: Ignore type error coercion.\nQuat2.mag = Quat.magnitude;\n// @ts-expect-error: Ignore type error coercion.\nQuat2.length = Quat.magnitude;\n// @ts-expect-error: Ignore type error coercion.\nQuat2.len = Quat.magnitude;\n\n// Static method alias assignments\nQuat2.mul = Quat2.multiply;\n", "import { GLM_EPSILON } from '#gl-matrix/common';\n\nimport type { Mat2Like, Mat2dLike, Mat3Like, Mat4Like, Vec2Like } from '#gl-matrix/types';\n\n/**\n * 2 Dimensional Vector\n */\nexport class Vec2 extends Float32Array {\n  /**\n   * Create a {@link Vec2}.\n   *\n   * @category Constructor\n   */\n  constructor(...values: [Readonly<Vec2Like> | ArrayBufferLike, number?] | number[] | [undefined]) {\n    switch (values.length) {\n      case 2:{\n        const v = values[0];\n        if (typeof v === 'number') {\n          super([v, values[1]]);\n        } else {\n          super(v as ArrayBuffer, values[1], 2);\n        }\n        break;\n      }\n      case 1: {\n        const v = values[0];\n        if (v === undefined) {\n          super(2);\n        } else if (typeof v === 'number') {\n          super([v, v]);\n        } else {\n          super(v as ArrayBuffer, 0, 2);\n        }\n        break;\n      }\n      default:\n        super(2); break;\n    }\n  }\n\n  // ============\n  // Accessors\n  // ============\n\n  // Getters and setters to make component access read better.\n  // These are likely to be a little bit slower than direct array access.\n\n  /**\n   * The x component of the vector. Equivalent to `this[0];`\n   * @category Vector Components\n   */\n  get x(): number { return this[0]; }\n  set x(value: number) { this[0] = value; }\n\n  /**\n   * The y component of the vector. Equivalent to `this[1];`\n   * @category Vector Components\n   */\n  get y(): number { return this[1]; }\n  set y(value: number) { this[1] = value; }\n\n  // Alternate set of getters and setters in case this is being used to define\n  // a color.\n\n  /**\n   * The r component of the vector. Equivalent to `this[0];`\n   * @category Color Components\n   */\n  get r(): number { return this[0]; }\n  set r(value: number) { this[0] = value; }\n\n  /**\n   * The g component of the vector. Equivalent to `this[1];`\n   * @category Color Components\n   */\n  get g(): number { return this[1]; }\n  set g(value: number) { this[1] = value; }\n\n  /**\n   * The magnitude (length) of this.\n   * Equivalent to `Vec2.magnitude(this);`\n   *\n   * Magnitude is used because the `length` attribute is already defined by\n   * TypedArrays to mean the number of elements in the array.\n   *\n   * @category Accessors\n   */\n  get magnitude(): number {\n    return Math.hypot(this[0], this[1]);\n  }\n\n  /**\n   * Alias for {@link Vec2.magnitude}\n   *\n   * @category Accessors\n   */\n  get mag(): number { return this.magnitude; }\n\n  /**\n   * The squared magnitude (length) of `this`.\n   * Equivalent to `Vec2.squaredMagnitude(this);`\n   *\n   * @category Accessors\n   */\n  get squaredMagnitude(): number {\n    const x = this[0];\n    const y = this[1];\n    return x * x + y * y;\n  }\n\n  /**\n   * Alias for {@link Vec2.squaredMagnitude}\n   *\n   * @category Accessors\n   */\n  get sqrMag(): number { return this.squaredMagnitude; }\n\n  /**\n   * A string representation of `this`\n   * Equivalent to `Vec2.str(this);`\n   *\n   * @category Accessors\n   */\n  get str(): string {\n    return Vec2.str(this);\n  }\n\n  // ===================\n  // Instances methods\n  // ===================\n\n  /**\n   * Copy the values from another {@link Vec2} into `this`.\n   * @category Methods\n   *\n   * @param a the source vector\n   * @returns `this`\n   */\n  copy(a: Readonly<Vec2Like>): this {\n    this.set(a);\n    return this;\n  }\n\n  // Instead of zero(), use a.fill(0) for instances;\n\n  /**\n   * Adds a {@link Vec2} to `this`.\n   * Equivalent to `Vec2.add(this, this, b);`\n   * @category Methods\n   *\n   * @param b - The vector to add to `this`\n   * @returns `this`\n   */\n  add(b: Readonly<Vec2Like>): this {\n    this[0] += b[0];\n    this[1] += b[1];\n    return this;\n  }\n\n  /**\n   * Subtracts a {@link Vec2} from `this`.\n   * Equivalent to `Vec2.subtract(this, this, b);`\n   * @category Methods\n   *\n   * @param b - The vector to subtract from `this`\n   * @returns `this`\n   */\n  subtract(b: Readonly<Vec2Like>): this {\n    this[0] -= b[0];\n    this[1] -= b[1];\n    return this;\n  }\n\n  /**\n   * Alias for {@link Vec2.subtract}\n   * @category Methods\n   */\n  sub(b: Readonly<Vec2Like>): this { return this; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Multiplies `this` by a {@link Vec2}.\n   * Equivalent to `Vec2.multiply(this, this, b);`\n   * @category Methods\n   *\n   * @param b - The vector to multiply `this` by\n   * @returns `this`\n   */\n  multiply(b: Readonly<Vec2Like>): this {\n    this[0] *= b[0];\n    this[1] *= b[1];\n    return this;\n  }\n\n  /**\n   * Alias for {@link Vec2.multiply}\n   * @category Methods\n   */\n  mul(b: Readonly<Vec2Like>): this { return this; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Divides `this` by a {@link Vec2}.\n   * Equivalent to `Vec2.divide(this, this, b);`\n   * @category Methods\n   *\n   * @param b - The vector to divide `this` by\n   * @returns `this`\n   */\n  divide(b: Readonly<Vec2Like>): this {\n    this[0] /= b[0];\n    this[1] /= b[1];\n    return this;\n  }\n\n  /**\n   * Alias for {@link Vec2.divide}\n   * @category Methods\n   */\n  div(b: Readonly<Vec2Like>): this { return this; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Scales `this` by a scalar number.\n   * Equivalent to `Vec2.scale(this, this, b);`\n   * @category Methods\n   *\n   * @param b - Amount to scale `this` by\n   * @returns `this`\n   */\n  scale(b: number): this {\n    this[0] *= b;\n    this[1] *= b;\n    return this;\n  }\n\n  /**\n   * Calculates `this` scaled by a scalar value then adds the result to `this`.\n   * Equivalent to `Vec2.scaleAndAdd(this, this, b, scale);`\n   * @category Methods\n   *\n   * @param b - The vector to add to `this`\n   * @param scale - The amount to scale `b` by before adding\n   * @returns `this`\n   */\n  scaleAndAdd(b: Readonly<Vec2Like>, scale: number): this {\n    this[0] += b[0] * scale;\n    this[1] += b[1] * scale;\n    return this;\n  }\n\n  /**\n   * Calculates the Euclidean distance between another {@link Vec2} and `this`.\n   * Equivalent to `Vec2.distance(this, b);`\n   * @category Methods\n   *\n   * @param b - The vector to calculate the distance to\n   * @returns Distance between `this` and `b`\n   */\n  distance(b: Readonly<Vec2Like>): number {\n    return Vec2.distance(this, b);\n  }\n  /**\n   * Alias for {@link Vec2.distance}\n   * @category Methods\n   */\n  dist(b: Readonly<Vec2Like>): number { return 0; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Calculates the squared Euclidean distance between another {@link Vec2} and `this`.\n   * Equivalent to `Vec2.squaredDistance(this, b);`\n   * @category Methods\n   *\n   * @param b The vector to calculate the squared distance to\n   * @returns Squared distance between `this` and `b`\n   */\n  squaredDistance(b: Readonly<Vec2Like>): number {\n    return Vec2.squaredDistance(this, b);\n  }\n  /**\n   * Alias for {@link Vec2.squaredDistance}\n   * @category Methods\n   */\n  sqrDist(b: Readonly<Vec2Like>): number { return 0; }  // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Negates the components of `this`.\n   * Equivalent to `Vec2.negate(this, this);`\n   * @category Methods\n   *\n   * @returns `this`\n   */\n  negate(): this {\n    this[0] *= -1;\n    this[1] *= -1;\n    return this;\n  }\n\n  /**\n   * Inverts the components of `this`.\n   * Equivalent to `Vec2.inverse(this, this);`\n   * @category Methods\n   *\n   * @returns `this`\n   */\n  invert(): this {\n    this[0] = 1.0 / this[0];\n    this[1] = 1.0 / this[1];\n    return this;\n  }\n\n  /**\n   * Sets each component of `this` to it's absolute value.\n   * Equivalent to `Vec2.abs(this, this);`\n   * @category Methods\n   *\n   * @returns `this`\n   */\n  abs(): this {\n    this[0] = Math.abs(this[0]);\n    this[1] = Math.abs(this[1]);\n    return this;\n  }\n\n  /**\n   * Calculates the dot product of this and another {@link Vec2}.\n   * Equivalent to `Vec2.dot(this, b);`\n   * @category Methods\n   *\n   * @param b - The second operand\n   * @returns Dot product of `this` and `b`\n   */\n  dot(b: Readonly<Vec2Like>): number {\n    return this[0] * b[0] + this[1] * b[1];\n  }\n\n  /**\n   * Normalize `this`.\n   * Equivalent to `Vec2.normalize(this, this);`\n   * @category Methods\n   *\n   * @returns `this`\n   */\n  normalize(): this {\n    return Vec2.normalize(this, this);\n  }\n\n  // ===================\n  // Static accessors\n  // ===================\n\n  /**\n   * @category Static\n   *\n   * @returns The number of bytes in a {@link Vec2}.\n   */\n  static get BYTE_LENGTH(): number {\n    return 2 * Float32Array.BYTES_PER_ELEMENT;\n  }\n\n  // ===================\n  // Static methods\n  // ===================\n\n  /**\n   * Creates a new, empty {@link Vec2}\n   * @category Static\n   *\n   * @returns A new 2D vector\n   */\n  static create(): Vec2 {\n    return new Vec2();\n  }\n\n  /**\n   * Creates a new {@link Vec2} initialized with values from an existing vector\n   * @category Static\n   *\n   * @param a - Vector to clone\n   * @returns A new 2D vector\n   */\n  static clone(a: Readonly<Vec2Like>): Vec2 {\n    return new Vec2(a);\n  }\n\n  /**\n   * Creates a new {@link Vec2} initialized with the given values\n   * @category Static\n   *\n   * @param x - X component\n   * @param y - Y component\n   * @returns A new 2D vector\n   */\n  static fromValues(x: number, y: number): Vec2 {\n    return new Vec2(x, y);\n  }\n\n  /**\n   * Copy the values from one {@link Vec2} to another\n   * @category Static\n   *\n   * @param out - the receiving vector\n   * @param a - The source vector\n   * @returns `out`\n   */\n  static copy<T extends Vec2Like>(out: T, a: Readonly<Vec2Like>): T {\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n  }\n\n  /**\n   * Set the components of a {@link Vec2} to the given values\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param x - X component\n   * @param y - Y component\n   * @returns `out`\n   */\n  static set<T extends Vec2Like>(out: T, x: number, y: number): T {\n    out[0] = x;\n    out[1] = y;\n    return out;\n  }\n\n  /**\n   * Adds two {@link Vec2}s\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns `out`\n   */\n  static add<T extends Vec2Like>(out: T, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): T {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    return out;\n  }\n\n  /**\n   * Subtracts vector b from vector a\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns `out`\n   */\n  static subtract<T extends Vec2Like>(out: T, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): T {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    return out;\n  }\n\n  /**\n   * Alias for {@link Vec2.subtract}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static sub<T extends Vec2Like>(out: T, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): T { return out; }\n\n  /**\n   * Multiplies two {@link Vec2}s\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns `out`\n   */\n  static multiply<T extends Vec2Like>(out: T, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): T {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    return out;\n  }\n\n  /**\n   * Alias for {@link Vec2.multiply}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static mul<T extends Vec2Like>(out: T, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): T { return out; }\n\n  /**\n   * Divides two {@link Vec2}s\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns `out`\n   */\n  static divide<T extends Vec2Like>(out: T, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): T {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    return out;\n  }\n\n  /**\n   * Alias for {@link Vec2.divide}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static div<T extends Vec2Like>(out: T, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): T { return out; }\n\n  /**\n   * Math.ceil the components of a {@link Vec2}\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - Vector to ceil\n   * @returns `out`\n   */\n  static ceil<T extends Vec2Like>(out: T, a: Readonly<Vec2Like>): T {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    return out;\n  }\n\n  /**\n   * Math.floor the components of a {@link Vec2}\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - Vector to floor\n   * @returns `out`\n   */\n  static floor<T extends Vec2Like>(out: T, a: Readonly<Vec2Like>): T {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    return out;\n  }\n\n  /**\n   * Returns the minimum of two {@link Vec2}s\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns `out`\n   */\n  static min<T extends Vec2Like>(out: T, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): T {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    return out;\n  }\n\n  /**\n   * Returns the maximum of two {@link Vec2}s\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns `out`\n   */\n  static max<T extends Vec2Like>(out: T, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): T {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    return out;\n  }\n\n  /**\n   * Math.round the components of a {@link Vec2}\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - Vector to round\n   * @returns `out`\n   */\n  static round<T extends Vec2Like>(out: T, a: Readonly<Vec2Like>): T {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    return out;\n  }\n\n  /**\n   * Scales a {@link Vec2} by a scalar number\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - The vector to scale\n   * @param b - Amount to scale the vector by\n   * @returns `out`\n   */\n  static scale<T extends Vec2Like>(out: T, a: Readonly<Vec2Like>, b: number): T {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    return out;\n  }\n\n  /**\n   * Adds two Vec2's after scaling the second operand by a scalar value\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - The first operand\n   * @param b - The second operand\n   * @param scale - The amount to scale b by before adding\n   * @returns `out`\n   */\n  static scaleAndAdd<T extends Vec2Like>(out: T, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>, scale: number): T {\n    out[0] = a[0] + b[0] * scale;\n    out[1] = a[1] + b[1] * scale;\n    return out;\n  }\n\n  /**\n   * Calculates the Euclidean distance between two {@link Vec2}s\n   * @category Static\n   *\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns distance between `a` and `b`\n   */\n  static distance(a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): number {\n    return Math.hypot(b[0] - a[0], b[1] - a[1]);\n  }\n\n  /**\n   * Alias for {@link Vec2.distance}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static dist(a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): number { return 0; }\n\n  /**\n   * Calculates the squared Euclidean distance between two {@link Vec2}s\n   * @category Static\n   *\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns Squared distance between `a` and `b`\n   */\n  static squaredDistance(a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): number {\n    const x = b[0] - a[0];\n    const y = b[1] - a[1];\n    return x * x + y * y;\n  }\n\n  /**\n   * Alias for {@link Vec2.distance}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static sqrDist(a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): number { return 0; }\n\n  /**\n   * Calculates the magnitude (length) of a {@link Vec2}\n   * @category Static\n   *\n   * @param a - Vector to calculate magnitude of\n   * @returns Magnitude of a\n   */\n  static magnitude(a: Readonly<Vec2Like>): number {\n    const x = a[0];\n    const y = a[1];\n    return Math.sqrt(x * x + y * y);\n  }\n\n  /**\n   * Alias for {@link Vec2.magnitude}\n   * @category Static\n   */\n  static mag(a: Readonly<Vec2Like>): number { return 0; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Alias for {@link Vec2.magnitude}\n   * @category Static\n   * @deprecated Use {@link Vec2.magnitude} to avoid conflicts with builtin `length` methods/attribs\n   *\n   * @param a - vector to calculate length of\n   * @returns length of a\n   */\n  // Length conflicts with Function.length\n  static length(a: Readonly<Vec2Like>): number { return 0; }  // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Alias for {@link Vec2.magnitude}\n   * @category Static\n   * @deprecated Use {@link Vec2.mag}\n   */\n  static len(a: Readonly<Vec2Like>): number { return 0; } // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Calculates the squared length of a {@link Vec2}\n   * @category Static\n   *\n   * @param a - Vector to calculate squared length of\n   * @returns Squared length of a\n   */\n  static squaredLength(a: Readonly<Vec2Like>): number {\n    const x = a[0];\n    const y = a[1];\n    return x * x + y * y;\n  }\n\n  /**\n   * Alias for {@link Vec2.squaredLength}\n   * @category Static\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static sqrLen(a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): number { return 0; }\n\n  /**\n   * Negates the components of a {@link Vec2}\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - Vector to negate\n   * @returns `out`\n   */\n  static negate<T extends Vec2Like>(out: T, a: Readonly<Vec2Like>): T {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    return out;\n  }\n\n  /**\n   * Returns the inverse of the components of a {@link Vec2}\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - Vector to invert\n   * @returns `out`\n   */\n  static inverse<T extends Vec2Like>(out: T, a: Readonly<Vec2Like>): T {\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    return out;\n  }\n\n  /**\n   * Returns the absolute value of the components of a {@link Vec2}\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - Vector to compute the absolute values of\n   * @returns `out`\n   */\n  static abs<T extends Vec2Like>(out: T, a: Readonly<Vec2Like>): T {\n    out[0] = Math.abs(a[0]);\n    out[1] = Math.abs(a[1]);\n    return out;\n  }\n\n  /**\n   * Normalize a {@link Vec2}\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - Vector to normalize\n   * @returns `out`\n   */\n  static normalize<T extends Vec2Like>(out: T, a: Readonly<Vec2Like>): T {\n    const x = a[0];\n    const y = a[1];\n    let len = x * x + y * y;\n    if (len > 0) {\n      // TODO: evaluate use of glm_invsqrt here?\n      len = 1 / Math.sqrt(len);\n    }\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    return out;\n  }\n\n  /**\n   * Calculates the dot product of two {@link Vec2}s\n   * @category Static\n   *\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns Dot product of `a` and `b`\n   */\n  static dot(a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): number {\n    return a[0] * b[0] + a[1] * b[1];\n  }\n\n  /**\n   * Computes the cross product of two {@link Vec2}s\n   * Note that the cross product must by definition produce a 3D vector.\n   * For this reason there is also not instance equivalent for this function.\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns `out`\n   */\n  static cross<T extends Vec2Like>(out: T, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): T {\n    const z = a[0] * b[1] - a[1] * b[0];\n    out[0] = out[1] = 0;\n    out[2] = z;\n    return out;\n  }\n\n  /**\n   * Performs a linear interpolation between two {@link Vec2}s\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @param a - The first operand\n   * @param b - The second operand\n   * @param t - Interpolation amount, in the range [0-1], between the two inputs\n   * @returns `out`\n   */\n  static lerp<T extends Vec2Like>(out: T, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>, t: number): T {\n    const ax = a[0];\n    const ay = a[1];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    return out;\n  }\n\n  /**\n   * Transforms the {@link Vec2} with a {@link Mat2}\n   *\n   * @param out - The receiving vector\n   * @param a - The vector to transform\n   * @param m - Matrix to transform with\n   * @returns `out`\n   * @category Static\n   */\n  static transformMat2<T extends Vec2Like>(out: T, a: Readonly<Vec2Like>, m: Readonly<Mat2Like>): T {\n    const x = a[0];\n    const y = a[1];\n    out[0] = m[0] * x + m[2] * y;\n    out[1] = m[1] * x + m[3] * y;\n    return out;\n  }\n\n  /**\n   * Transforms the {@link Vec2} with a {@link Mat2d}\n   *\n   * @param out - The receiving vector\n   * @param a - The vector to transform\n   * @param m - Matrix to transform with\n   * @returns `out`\n   * @category Static\n   */\n  static transformMat2d<T extends Vec2Like>(out: T, a: Readonly<Vec2Like>, m: Readonly<Mat2dLike>): T {\n    const x = a[0];\n    const y = a[1];\n    out[0] = m[0] * x + m[2] * y + m[4];\n    out[1] = m[1] * x + m[3] * y + m[5];\n    return out;\n  }\n\n  /**\n   * Transforms the {@link Vec2} with a {@link Mat3}\n   * 3rd vector component is implicitly '1'\n   *\n   * @param out - The receiving vector\n   * @param a - The vector to transform\n   * @param m - Matrix to transform with\n   * @returns `out`\n   * @category Static\n   */\n  static transformMat3<T extends Vec2Like>(out: T, a: Readonly<Vec2Like>, m: Readonly<Mat3Like>): T {\n    const x = a[0];\n    const y = a[1];\n    out[0] = m[0] * x + m[3] * y + m[6];\n    out[1] = m[1] * x + m[4] * y + m[7];\n    return out;\n  }\n\n  /**\n   * Transforms the {@link Vec2} with a {@link Mat4}\n   * 3rd vector component is implicitly '0'\n   * 4th vector component is implicitly '1'\n   *\n   * @param out - The receiving vector\n   * @param a - The vector to transform\n   * @param m - Matrix to transform with\n   * @returns `out`\n   * @category Static\n   */\n  static transformMat4<T extends Vec2Like>(out: T, a: Readonly<Vec2Like>, m: Readonly<Mat4Like>): T {\n    const x = a[0];\n    const y = a[1];\n    out[0] = m[0] * x + m[4] * y + m[12];\n    out[1] = m[1] * x + m[5] * y + m[13];\n    return out;\n  }\n\n  /**\n   * Rotate a 2D vector\n   * @category Static\n   *\n   * @param out - The receiving {@link Vec2}\n   * @param a - The {@link Vec2} point to rotate\n   * @param b - The origin of the rotation\n   * @param rad - The angle of rotation in radians\n   * @returns `out`\n   */\n  static rotate<T extends Vec2Like>(out: T, a: Readonly<Vec2Like>, b: Readonly<Vec2Like>, rad: number): T {\n    // Translate point to the origin\n    const p0 = a[0] - b[0];\n    const p1 = a[1] - b[1];\n    const sinC = Math.sin(rad);\n    const cosC = Math.cos(rad);\n\n    // perform rotation and translate to correct position\n    out[0] = p0 * cosC - p1 * sinC + b[0];\n    out[1] = p0 * sinC + p1 * cosC + b[1];\n\n    return out;\n  }\n\n  /**\n   * Get the angle between two 2D vectors\n   * @category Static\n   *\n   * @param a - The first operand\n   * @param b - The second operand\n   * @returns The angle in radians\n   */\n  static angle(a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): number {\n    const x1 = a[0];\n    const y1 = a[1];\n    const x2 = b[0];\n    const y2 = b[1];\n    // mag is the product of the magnitudes of a and b\n    const  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2);\n    // mag &&.. short circuits if mag == 0\n    const cosine = mag && (x1 * x2 + y1 * y2) / mag;\n    // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n    return Math.acos(Math.min(Math.max(cosine, -1), 1));\n  }\n\n  /**\n   * Set the components of a {@link Vec2} to zero\n   * @category Static\n   *\n   * @param out - The receiving vector\n   * @returns `out`\n   */\n  static zero<T extends Vec2Like>(out: T): T {\n    out[0] = 0.0;\n    out[1] = 0.0;\n    return out;\n  }\n\n  /**\n   * Returns whether the vectors have exactly the same elements in the same position (when compared with ===)\n   * @category Static\n   *\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns `true` if the vectors components are ===, `false` otherwise.\n   */\n  static exactEquals(a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): boolean {\n    return a[0] === b[0] && a[1] === b[1];\n  }\n\n  /**\n   * Returns whether the vectors have approximately the same elements in the same position.\n   * @category Static\n   *\n   * @param a - The first vector.\n   * @param b - The second vector.\n   * @returns `true` if the vectors are approximately equal, `false` otherwise.\n   */\n  static equals(a: Readonly<Vec2Like>, b: Readonly<Vec2Like>): boolean {\n    const a0 = a[0];\n    const a1 = a[1];\n    const b0 = b[0];\n    const b1 = b[1];\n    return (\n      Math.abs(a0 - b0) <= GLM_EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n      Math.abs(a1 - b1) <= GLM_EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1))\n    );\n  }\n\n  /**\n   * Returns a string representation of a vector\n   * @category Static\n   *\n   * @param a - Vector to represent as a string\n   * @returns String representation of the vector\n   */\n  static str(a: Readonly<Vec2Like>): string {\n    return `Vec2(${a.join(', ')})`;\n  }\n}\n\n// Instance method alias assignments\nVec2.prototype.sub = Vec2.prototype.subtract;             // eslint-disable-line @typescript-eslint/unbound-method\nVec2.prototype.mul = Vec2.prototype.multiply;             // eslint-disable-line @typescript-eslint/unbound-method\nVec2.prototype.div = Vec2.prototype.divide;               // eslint-disable-line @typescript-eslint/unbound-method\nVec2.prototype.dist = Vec2.prototype.distance;            // eslint-disable-line @typescript-eslint/unbound-method\nVec2.prototype.sqrDist = Vec2.prototype.squaredDistance;  // eslint-disable-line @typescript-eslint/unbound-method\n\n// Static method alias assignments\nVec2.sub = Vec2.subtract;\nVec2.mul = Vec2.multiply;\nVec2.div = Vec2.divide;\nVec2.dist = Vec2.distance;\nVec2.sqrDist = Vec2.squaredDistance;\nVec2.sqrLen = Vec2.squaredLength;\nVec2.mag = Vec2.magnitude;\nVec2.length = Vec2.magnitude;\nVec2.len = Vec2.magnitude;\n", "/**\n * Constant used in `gl-matrix` angle conversions.\n */\nconst GLM_DEG_TO_RAD: number = Math.PI / 180;\n\n/**\n * Constant used in `gl-matrix` angle conversions.\n */\nconst GLM_RAD_TO_DEG: number = 180 / Math.PI;\n\n/**\n * Convert `radians` to `degrees`.\n *\n * @param value - Angle in `radians`.\n * @returns Angle in `degrees`.\n */\nexport function toDegree(value: number): number {\n  return value * GLM_RAD_TO_DEG;\n}\n\n/**\n * Convert `degrees` to `radians`.\n *\n * @param value - Angle in `degrees`.\n * @returns Angle in `radians`.\n */\nexport function toRadian(value: number): number {\n  return value * GLM_DEG_TO_RAD;\n}\n"],
  "mappings": "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",
  "names": ["_TMP_VEC3", "_TMP_VEC3"]
}
