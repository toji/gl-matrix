// gl-matrix - v4.0.0-beta.4 - A high performance matrix and vector library.
// @author Brandon Jones
// @author Colin MacKenzie IV
// @license MIT (https://github.com/toji/gl-matrix/blob/master/LICENSE.md)
var j=class y extends Float64Array{static#e=new Float64Array([1,0,0,1]);constructor(...e){switch(e.length){case 4:super(e);break;case 2:super(e[0],e[1],4);break;case 1:let t=e[0];t===void 0?super(y.#e):typeof t=="number"?super([t,t,t,t]):super(t,0,4);break;default:super(y.#e);break}}get str(){return y.str(this)}copy(e){return this.set(e),this}identity(){return this.set(y.#e),this}multiply(e){return y.multiply(this,this,e)}mul(e){return this}transpose(){return y.transpose(this,this)}invert(){return y.invert(this,this)}scale(e){return y.scale(this,this,e)}rotate(e){return y.rotate(this,this,e)}static get BYTE_LENGTH(){return 4*Float64Array.BYTES_PER_ELEMENT}static create(){return new y}static clone(e){return new y(e)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}static fromValues(...e){return new y(...e)}static set(e,...t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}static identity(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e}static transpose(e,t){if(e===t){let n=t[1];e[1]=t[2],e[2]=n}else e[0]=t[0],e[1]=t[2],e[2]=t[1],e[3]=t[3];return e}static invert(e,t){let n=t[0],s=t[1],r=t[2],i=t[3],a=n*i-r*s;return a?(a=1/a,e[0]=i*a,e[1]=-s*a,e[2]=-r*a,e[3]=n*a,e):null}static adjoint(e,t){let n=t[0];return e[0]=t[3],e[1]=-t[1],e[2]=-t[2],e[3]=n,e}static determinant(e){return e[0]*e[3]-e[2]*e[1]}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e}static subtract(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e}static sub(e,t,n){return e}static multiply(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=n[0],d=n[1],l=n[2],L=n[3];return e[0]=s*c+i*d,e[1]=r*c+a*d,e[2]=s*l+i*L,e[3]=r*l+a*L,e}static mul(e,t,n){return e}static rotate(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=Math.sin(n),d=Math.cos(n);return e[0]=s*d+i*c,e[1]=r*d+a*c,e[2]=s*-c+i*d,e[3]=r*-c+a*d,e}static scale(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=n[0],d=n[1];return e[0]=s*c,e[1]=r*c,e[2]=i*d,e[3]=a*d,e}static fromRotation(e,t){let n=Math.sin(t),s=Math.cos(t);return e[0]=s,e[1]=n,e[2]=-n,e[3]=s,e}static fromScaling(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=t[1],e}static frob(e){return Math.sqrt(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]+e[3]*e[3])}static multiplyScalar(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e}static multiplyScalarAndAdd(e,t,n,s){return e[0]=t[0]+n[0]*s,e[1]=t[1]+n[1]*s,e[2]=t[2]+n[2]*s,e[3]=t[3]+n[3]*s,e}static LDU(e,t,n,s){return e[2]=s[2]/s[0],n[0]=s[0],n[1]=s[1],n[3]=s[3]-e[2]*n[1],[e,t,n]}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]}static equals(e,t){let n=e[0],s=e[1],r=e[2],i=e[3],a=t[0],c=t[1],d=t[2],l=t[3];return Math.abs(n-a)<=1e-6*Math.max(1,Math.abs(n),Math.abs(a))&&Math.abs(s-c)<=1e-6*Math.max(1,Math.abs(s),Math.abs(c))&&Math.abs(r-d)<=1e-6*Math.max(1,Math.abs(r),Math.abs(d))&&Math.abs(i-l)<=1e-6*Math.max(1,Math.abs(i),Math.abs(l))}static str(e){return`Mat2(${e.join(", ")})`}};j.prototype.mul=j.prototype.multiply;j.mul=j.multiply;j.sub=j.subtract;var Z=class y extends Float64Array{static#e=new Float64Array([1,0,0,1,0,0]);constructor(...e){switch(e.length){case 6:super(e);break;case 2:super(e[0],e[1],6);break;case 1:let t=e[0];t===void 0?super(y.#e):typeof t=="number"?super([t,t,t,t,t,t]):super(t,0,6);break;default:super(y.#e);break}}get str(){return y.str(this)}copy(e){return this.set(e),this}identity(){return this.set(y.#e),this}multiply(e){return y.multiply(this,this,e)}mul(e){return this}translate(e){return y.translate(this,this,e)}rotate(e){return y.rotate(this,this,e)}scale(e){return y.scale(this,this,e)}static get BYTE_LENGTH(){return 6*Float64Array.BYTES_PER_ELEMENT}static create(){return new y}static clone(e){return new y(e)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e}static fromValues(...e){return new y(...e)}static set(e,...t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e}static identity(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e[4]=0,e[5]=0,e}static invert(e,t){let n=t[0],s=t[1],r=t[2],i=t[3],a=t[4],c=t[5],d=n*i-s*r;return d?(d=1/d,e[0]=i*d,e[1]=-s*d,e[2]=-r*d,e[3]=n*d,e[4]=(r*c-i*a)*d,e[5]=(s*a-n*c)*d,e):null}static determinant(e){return e[0]*e[3]-e[1]*e[2]}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e[4]=t[4]+n[4],e[5]=t[5]+n[5],e}static subtract(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e[4]=t[4]-n[4],e[5]=t[5]-n[5],e}static sub(e,t,n){return e}static multiply(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=t[4],d=t[5],l=n[0],L=n[1],h=n[2],M=n[3],k=n[4],T=n[5];return e[0]=s*l+i*L,e[1]=r*l+a*L,e[2]=s*h+i*M,e[3]=r*h+a*M,e[4]=s*k+i*T+c,e[5]=r*k+a*T+d,e}static mul(e,t,n){return e}static translate(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=t[4],d=t[5],l=n[0],L=n[1];return e[0]=s,e[1]=r,e[2]=i,e[3]=a,e[4]=s*l+i*L+c,e[5]=r*l+a*L+d,e}static rotate(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=t[4],d=t[5],l=Math.sin(n),L=Math.cos(n);return e[0]=s*L+i*l,e[1]=r*L+a*l,e[2]=s*-l+i*L,e[3]=r*-l+a*L,e[4]=c,e[5]=d,e}static scale(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=t[4],d=t[5],l=n[0],L=n[1];return e[0]=s*l,e[1]=r*l,e[2]=i*L,e[3]=a*L,e[4]=c,e[5]=d,e}static fromTranslation(e,t){return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e[4]=t[0],e[5]=t[1],e}static fromRotation(e,t){let n=Math.sin(t),s=Math.cos(t);return e[0]=s,e[1]=n,e[2]=-n,e[3]=s,e[4]=0,e[5]=0,e}static fromScaling(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=t[1],e[4]=0,e[5]=0,e}static frob(e){return Math.sqrt(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]+e[3]*e[3]+e[4]*e[4]+e[5]*e[5]+1)}static multiplyScalar(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*n,e[5]=t[5]*n,e}static multiplyScalarAndAdd(e,t,n,s){return e[0]=t[0]+n[0]*s,e[1]=t[1]+n[1]*s,e[2]=t[2]+n[2]*s,e[3]=t[3]+n[3]*s,e[4]=t[4]+n[4]*s,e[5]=t[5]+n[5]*s,e}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]}static equals(e,t){let n=e[0],s=e[1],r=e[2],i=e[3],a=e[4],c=e[5],d=t[0],l=t[1],L=t[2],h=t[3],M=t[4],k=t[5];return Math.abs(n-d)<=1e-6*Math.max(1,Math.abs(n),Math.abs(d))&&Math.abs(s-l)<=1e-6*Math.max(1,Math.abs(s),Math.abs(l))&&Math.abs(r-L)<=1e-6*Math.max(1,Math.abs(r),Math.abs(L))&&Math.abs(i-h)<=1e-6*Math.max(1,Math.abs(i),Math.abs(h))&&Math.abs(a-M)<=1e-6*Math.max(1,Math.abs(a),Math.abs(M))&&Math.abs(c-k)<=1e-6*Math.max(1,Math.abs(c),Math.abs(k))}static str(e){return`Mat2d(${e.join(", ")})`}};Z.mul=Z.multiply;Z.sub=Z.subtract;var P=class y extends Float64Array{static#e=new Float64Array([1,0,0,0,1,0,0,0,1]);constructor(...e){switch(e.length){case 9:super(e);break;case 2:super(e[0],e[1],9);break;case 1:let t=e[0];t===void 0?super(y.#e):typeof t=="number"?super([t,t,t,t,t,t,t,t,t]):super(t,0,9);break;default:super(y.#e);break}}get str(){return y.str(this)}copy(e){return this.set(e),this}identity(){return this.set(y.#e),this}multiply(e){return y.multiply(this,this,e)}mul(e){return this}transpose(){return y.transpose(this,this)}invert(){return y.invert(this,this)}translate(e){return y.translate(this,this,e)}rotate(e){return y.rotate(this,this,e)}scale(e){return y.scale(this,this,e)}static get BYTE_LENGTH(){return 9*Float64Array.BYTES_PER_ELEMENT}static create(){return new y}static clone(e){return new y(e)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}static fromValues(...e){return new y(...e)}static set(e,...t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}static identity(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}static transpose(e,t){if(e===t){let n=t[1],s=t[2],r=t[5];e[1]=t[3],e[2]=t[6],e[3]=n,e[5]=t[7],e[6]=s,e[7]=r}else e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8];return e}static invert(e,t){let n=t[0],s=t[1],r=t[2],i=t[3],a=t[4],c=t[5],d=t[6],l=t[7],L=t[8],h=L*a-c*l,M=-L*i+c*d,k=l*i-a*d,T=n*h+s*M+r*k;return T?(T=1/T,e[0]=h*T,e[1]=(-L*s+r*l)*T,e[2]=(c*s-r*a)*T,e[3]=M*T,e[4]=(L*n-r*d)*T,e[5]=(-c*n+r*i)*T,e[6]=k*T,e[7]=(-l*n+s*d)*T,e[8]=(a*n-s*i)*T,e):null}static adjoint(e,t){let n=t[0],s=t[1],r=t[2],i=t[3],a=t[4],c=t[5],d=t[6],l=t[7],L=t[8];return e[0]=a*L-c*l,e[1]=r*l-s*L,e[2]=s*c-r*a,e[3]=c*d-i*L,e[4]=n*L-r*d,e[5]=r*i-n*c,e[6]=i*l-a*d,e[7]=s*d-n*l,e[8]=n*a-s*i,e}static determinant(e){let t=e[0],n=e[1],s=e[2],r=e[3],i=e[4],a=e[5],c=e[6],d=e[7],l=e[8];return t*(l*i-a*d)+n*(-l*r+a*c)+s*(d*r-i*c)}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e[4]=t[4]+n[4],e[5]=t[5]+n[5],e[6]=t[6]+n[6],e[7]=t[7]+n[7],e[8]=t[8]+n[8],e}static subtract(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e[4]=t[4]-n[4],e[5]=t[5]-n[5],e[6]=t[6]-n[6],e[7]=t[7]-n[7],e[8]=t[8]-n[8],e}static sub(e,t,n){return e}static multiply(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=t[4],d=t[5],l=t[6],L=t[7],h=t[8],M=n[0],k=n[1],T=n[2];return e[0]=M*s+k*a+T*l,e[1]=M*r+k*c+T*L,e[2]=M*i+k*d+T*h,M=n[3],k=n[4],T=n[5],e[3]=M*s+k*a+T*l,e[4]=M*r+k*c+T*L,e[5]=M*i+k*d+T*h,M=n[6],k=n[7],T=n[8],e[6]=M*s+k*a+T*l,e[7]=M*r+k*c+T*L,e[8]=M*i+k*d+T*h,e}static mul(e,t,n){return e}static translate(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=t[4],d=t[5],l=t[6],L=t[7],h=t[8],M=n[0],k=n[1];return e[0]=s,e[1]=r,e[2]=i,e[3]=a,e[4]=c,e[5]=d,e[6]=M*s+k*a+l,e[7]=M*r+k*c+L,e[8]=M*i+k*d+h,e}static rotate(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=t[4],d=t[5],l=t[6],L=t[7],h=t[8],M=Math.sin(n),k=Math.cos(n);return e[0]=k*s+M*a,e[1]=k*r+M*c,e[2]=k*i+M*d,e[3]=k*a-M*s,e[4]=k*c-M*r,e[5]=k*d-M*i,e[6]=l,e[7]=L,e[8]=h,e}static scale(e,t,n){let s=n[0],r=n[1];return e[0]=s*t[0],e[1]=s*t[1],e[2]=s*t[2],e[3]=r*t[3],e[4]=r*t[4],e[5]=r*t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}static fromTranslation(e,t){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=t[0],e[7]=t[1],e[8]=1,e}static fromRotation(e,t){let n=Math.sin(t),s=Math.cos(t);return e[0]=s,e[1]=n,e[2]=0,e[3]=-n,e[4]=s,e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}static fromScaling(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=0,e[4]=t[1],e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}static fromMat2d(e,t){return e[0]=t[0],e[1]=t[1],e[2]=0,e[3]=t[2],e[4]=t[3],e[5]=0,e[6]=t[4],e[7]=t[5],e[8]=1,e}static fromQuat(e,t){let n=t[0],s=t[1],r=t[2],i=t[3],a=n+n,c=s+s,d=r+r,l=n*a,L=s*a,h=s*c,M=r*a,k=r*c,T=r*d,m=i*a,R=i*c,o=i*d;return e[0]=1-h-T,e[3]=L-o,e[6]=M+R,e[1]=L+o,e[4]=1-l-T,e[7]=k-m,e[2]=M-R,e[5]=k+m,e[8]=1-l-h,e}static fromMat4(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[4],e[4]=t[5],e[5]=t[6],e[6]=t[8],e[7]=t[9],e[8]=t[10],e}static normalFromMat4(e,t){let n=t[0],s=t[1],r=t[2],i=t[4],a=t[5],c=t[6],d=t[8],l=t[9],L=t[10];return e[0]=a*L-c*l,e[1]=r*l-s*L,e[2]=s*c-r*a,e[3]=c*d-i*L,e[4]=n*L-r*d,e[5]=r*i-n*c,e[6]=i*l-a*d,e[7]=s*d-n*l,e[8]=n*a-s*i,e}static normalFromMat4Fast(e,t){return e}static projection(e,t,n){return e[0]=2/t,e[1]=0,e[2]=0,e[3]=0,e[4]=-2/n,e[5]=0,e[6]=-1,e[7]=1,e[8]=1,e}static frob(e){return Math.sqrt(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]+e[3]*e[3]+e[4]*e[4]+e[5]*e[5]+e[6]*e[6]+e[7]*e[7]+e[8]*e[8])}static multiplyScalar(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*n,e[5]=t[5]*n,e[6]=t[6]*n,e[7]=t[7]*n,e[8]=t[8]*n,e}static multiplyScalarAndAdd(e,t,n,s){return e[0]=t[0]+n[0]*s,e[1]=t[1]+n[1]*s,e[2]=t[2]+n[2]*s,e[3]=t[3]+n[3]*s,e[4]=t[4]+n[4]*s,e[5]=t[5]+n[5]*s,e[6]=t[6]+n[6]*s,e[7]=t[7]+n[7]*s,e[8]=t[8]+n[8]*s,e}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]&&e[8]===t[8]}static equals(e,t){let n=e[0],s=e[1],r=e[2],i=e[3],a=e[4],c=e[5],d=e[6],l=e[7],L=e[8],h=t[0],M=t[1],k=t[2],T=t[3],m=t[4],R=t[5],o=t[6],V=t[7],b=t[8];return Math.abs(n-h)<=1e-6*Math.max(1,Math.abs(n),Math.abs(h))&&Math.abs(s-M)<=1e-6*Math.max(1,Math.abs(s),Math.abs(M))&&Math.abs(r-k)<=1e-6*Math.max(1,Math.abs(r),Math.abs(k))&&Math.abs(i-T)<=1e-6*Math.max(1,Math.abs(i),Math.abs(T))&&Math.abs(a-m)<=1e-6*Math.max(1,Math.abs(a),Math.abs(m))&&Math.abs(c-R)<=1e-6*Math.max(1,Math.abs(c),Math.abs(R))&&Math.abs(d-o)<=1e-6*Math.max(1,Math.abs(d),Math.abs(o))&&Math.abs(l-V)<=1e-6*Math.max(1,Math.abs(l),Math.abs(V))&&Math.abs(L-b)<=1e-6*Math.max(1,Math.abs(L),Math.abs(b))}static str(e){return`Mat3(${e.join(", ")})`}};P.prototype.mul=P.prototype.multiply;P.mul=P.multiply;P.sub=P.subtract;P.normalFromMat4Fast=P.normalFromMat4;var Y=class y extends Float64Array{static#e=new Float64Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);static#t=new Float64Array(3);constructor(...e){switch(e.length){case 16:super(e);break;case 2:super(e[0],e[1],16);break;case 1:let t=e[0];t===void 0?super(y.#e):typeof t=="number"?super([t,t,t,t,t,t,t,t,t,t,t,t,t,t,t,t]):super(t,0,16);break;default:super(y.#e);break}}get str(){return y.str(this)}copy(e){return this.set(e),this}identity(){return this.set(y.#e),this}multiply(e){return y.multiply(this,this,e)}mul(e){return this}transpose(){return y.transpose(this,this)}invert(){return y.invert(this,this)}translate(e){return y.translate(this,this,e)}rotate(e,t){return y.rotate(this,this,e,t)}scale(e){return y.scale(this,this,e)}rotateX(e){return y.rotateX(this,this,e)}rotateY(e){return y.rotateY(this,this,e)}rotateZ(e){return y.rotateZ(this,this,e)}perspectiveNO(e,t,n,s){return y.perspectiveNO(this,e,t,n,s)}perspectiveZO(e,t,n,s){return y.perspectiveZO(this,e,t,n,s)}orthoNO(e,t,n,s,r,i){return y.orthoNO(this,e,t,n,s,r,i)}orthoZO(e,t,n,s,r,i){return y.orthoZO(this,e,t,n,s,r,i)}static get BYTE_LENGTH(){return 16*Float64Array.BYTES_PER_ELEMENT}static create(){return new y}static clone(e){return new y(e)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}static fromValues(...e){return new y(...e)}static set(e,...t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}static identity(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static transpose(e,t){if(e===t){let n=t[1],s=t[2],r=t[3],i=t[6],a=t[7],c=t[11];e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=n,e[6]=t[9],e[7]=t[13],e[8]=s,e[9]=i,e[11]=t[14],e[12]=r,e[13]=a,e[14]=c}else e[0]=t[0],e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=t[1],e[5]=t[5],e[6]=t[9],e[7]=t[13],e[8]=t[2],e[9]=t[6],e[10]=t[10],e[11]=t[14],e[12]=t[3],e[13]=t[7],e[14]=t[11],e[15]=t[15];return e}static invert(e,t){let n=t[0],s=t[1],r=t[2],i=t[3],a=t[4],c=t[5],d=t[6],l=t[7],L=t[8],h=t[9],M=t[10],k=t[11],T=t[12],m=t[13],R=t[14],o=t[15],V=n*c-s*a,b=n*d-r*a,x=n*l-i*a,p=s*d-r*c,f=s*l-i*c,F=r*l-i*d,q=L*m-h*T,B=L*R-M*T,Q=L*o-k*T,N=h*R-M*m,I=h*o-k*m,S=M*o-k*R,D=V*S-b*I+x*N+p*Q-f*B+F*q;return D?(D=1/D,e[0]=(c*S-d*I+l*N)*D,e[1]=(r*I-s*S-i*N)*D,e[2]=(m*F-R*f+o*p)*D,e[3]=(M*f-h*F-k*p)*D,e[4]=(d*Q-a*S-l*B)*D,e[5]=(n*S-r*Q+i*B)*D,e[6]=(R*x-T*F-o*b)*D,e[7]=(L*F-M*x+k*b)*D,e[8]=(a*I-c*Q+l*q)*D,e[9]=(s*Q-n*I-i*q)*D,e[10]=(T*f-m*x+o*V)*D,e[11]=(h*x-L*f-k*V)*D,e[12]=(c*B-a*N-d*q)*D,e[13]=(n*N-s*B+r*q)*D,e[14]=(m*b-T*p-R*V)*D,e[15]=(L*p-h*b+M*V)*D,e):null}static adjoint(e,t){let n=t[0],s=t[1],r=t[2],i=t[3],a=t[4],c=t[5],d=t[6],l=t[7],L=t[8],h=t[9],M=t[10],k=t[11],T=t[12],m=t[13],R=t[14],o=t[15],V=n*c-s*a,b=n*d-r*a,x=n*l-i*a,p=s*d-r*c,f=s*l-i*c,F=r*l-i*d,q=L*m-h*T,B=L*R-M*T,Q=L*o-k*T,N=h*R-M*m,I=h*o-k*m,S=M*o-k*R;return e[0]=c*S-d*I+l*N,e[1]=r*I-s*S-i*N,e[2]=m*F-R*f+o*p,e[3]=M*f-h*F-k*p,e[4]=d*Q-a*S-l*B,e[5]=n*S-r*Q+i*B,e[6]=R*x-T*F-o*b,e[7]=L*F-M*x+k*b,e[8]=a*I-c*Q+l*q,e[9]=s*Q-n*I-i*q,e[10]=T*f-m*x+o*V,e[11]=h*x-L*f-k*V,e[12]=c*B-a*N-d*q,e[13]=n*N-s*B+r*q,e[14]=m*b-T*p-R*V,e[15]=L*p-h*b+M*V,e}static determinant(e){let t=e[0],n=e[1],s=e[2],r=e[3],i=e[4],a=e[5],c=e[6],d=e[7],l=e[8],L=e[9],h=e[10],M=e[11],k=e[12],T=e[13],m=e[14],R=e[15],o=t*a-n*i,V=t*c-s*i,b=n*c-s*a,x=l*T-L*k,p=l*m-h*k,f=L*m-h*T,F=t*f-n*p+s*x,q=i*f-a*p+c*x,B=l*b-L*V+h*o,Q=k*b-T*V+m*o;return d*F-r*q+R*B-M*Q}static multiply(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=t[4],d=t[5],l=t[6],L=t[7],h=t[8],M=t[9],k=t[10],T=t[11],m=t[12],R=t[13],o=t[14],V=t[15],b=n[0],x=n[1],p=n[2],f=n[3];return e[0]=b*s+x*c+p*h+f*m,e[1]=b*r+x*d+p*M+f*R,e[2]=b*i+x*l+p*k+f*o,e[3]=b*a+x*L+p*T+f*V,b=n[4],x=n[5],p=n[6],f=n[7],e[4]=b*s+x*c+p*h+f*m,e[5]=b*r+x*d+p*M+f*R,e[6]=b*i+x*l+p*k+f*o,e[7]=b*a+x*L+p*T+f*V,b=n[8],x=n[9],p=n[10],f=n[11],e[8]=b*s+x*c+p*h+f*m,e[9]=b*r+x*d+p*M+f*R,e[10]=b*i+x*l+p*k+f*o,e[11]=b*a+x*L+p*T+f*V,b=n[12],x=n[13],p=n[14],f=n[15],e[12]=b*s+x*c+p*h+f*m,e[13]=b*r+x*d+p*M+f*R,e[14]=b*i+x*l+p*k+f*o,e[15]=b*a+x*L+p*T+f*V,e}static mul(e,t,n){return e}static translate(e,t,n){let s=n[0],r=n[1],i=n[2];if(t===e)e[12]=t[0]*s+t[4]*r+t[8]*i+t[12],e[13]=t[1]*s+t[5]*r+t[9]*i+t[13],e[14]=t[2]*s+t[6]*r+t[10]*i+t[14],e[15]=t[3]*s+t[7]*r+t[11]*i+t[15];else{let a=t[0],c=t[1],d=t[2],l=t[3],L=t[4],h=t[5],M=t[6],k=t[7],T=t[8],m=t[9],R=t[10],o=t[11];e[0]=a,e[1]=c,e[2]=d,e[3]=l,e[4]=L,e[5]=h,e[6]=M,e[7]=k,e[8]=T,e[9]=m,e[10]=R,e[11]=o,e[12]=a*s+L*r+T*i+t[12],e[13]=c*s+h*r+m*i+t[13],e[14]=d*s+M*r+R*i+t[14],e[15]=l*s+k*r+o*i+t[15]}return e}static scale(e,t,n){let s=n[0],r=n[1],i=n[2];return e[0]=t[0]*s,e[1]=t[1]*s,e[2]=t[2]*s,e[3]=t[3]*s,e[4]=t[4]*r,e[5]=t[5]*r,e[6]=t[6]*r,e[7]=t[7]*r,e[8]=t[8]*i,e[9]=t[9]*i,e[10]=t[10]*i,e[11]=t[11]*i,e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}static rotate(e,t,n,s){let r=s[0],i=s[1],a=s[2],c=Math.sqrt(r*r+i*i+a*a);if(c<1e-6)return null;c=1/c,r*=c,i*=c,a*=c;let d=Math.sin(n),l=Math.cos(n),L=1-l,h=t[0],M=t[1],k=t[2],T=t[3],m=t[4],R=t[5],o=t[6],V=t[7],b=t[8],x=t[9],p=t[10],f=t[11],F=r*r*L+l,q=i*r*L+a*d,B=a*r*L-i*d,Q=r*i*L-a*d,N=i*i*L+l,I=a*i*L+r*d,S=r*a*L+i*d,D=i*a*L-r*d,G=a*a*L+l;return e[0]=h*F+m*q+b*B,e[1]=M*F+R*q+x*B,e[2]=k*F+o*q+p*B,e[3]=T*F+V*q+f*B,e[4]=h*Q+m*N+b*I,e[5]=M*Q+R*N+x*I,e[6]=k*Q+o*N+p*I,e[7]=T*Q+V*N+f*I,e[8]=h*S+m*D+b*G,e[9]=M*S+R*D+x*G,e[10]=k*S+o*D+p*G,e[11]=T*S+V*D+f*G,t!==e&&(e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e}static rotateX(e,t,n){let s=Math.sin(n),r=Math.cos(n),i=t[4],a=t[5],c=t[6],d=t[7],l=t[8],L=t[9],h=t[10],M=t[11];return t!==e&&(e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[4]=i*r+l*s,e[5]=a*r+L*s,e[6]=c*r+h*s,e[7]=d*r+M*s,e[8]=l*r-i*s,e[9]=L*r-a*s,e[10]=h*r-c*s,e[11]=M*r-d*s,e}static rotateY(e,t,n){let s=Math.sin(n),r=Math.cos(n),i=t[0],a=t[1],c=t[2],d=t[3],l=t[8],L=t[9],h=t[10],M=t[11];return t!==e&&(e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[0]=i*r-l*s,e[1]=a*r-L*s,e[2]=c*r-h*s,e[3]=d*r-M*s,e[8]=i*s+l*r,e[9]=a*s+L*r,e[10]=c*s+h*r,e[11]=d*s+M*r,e}static rotateZ(e,t,n){let s=Math.sin(n),r=Math.cos(n),i=t[0],a=t[1],c=t[2],d=t[3],l=t[4],L=t[5],h=t[6],M=t[7];return t!==e&&(e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[0]=i*r+l*s,e[1]=a*r+L*s,e[2]=c*r+h*s,e[3]=d*r+M*s,e[4]=l*r-i*s,e[5]=L*r-a*s,e[6]=h*r-c*s,e[7]=M*r-d*s,e}static fromTranslation(e,t){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=t[0],e[13]=t[1],e[14]=t[2],e[15]=1,e}static fromScaling(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=t[1],e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=t[2],e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static fromRotation(e,t,n){let s=n[0],r=n[1],i=n[2],a=Math.sqrt(s*s+r*r+i*i);if(a<1e-6)return null;a=1/a,s*=a,r*=a,i*=a;let c=Math.sin(t),d=Math.cos(t),l=1-d;return e[0]=s*s*l+d,e[1]=r*s*l+i*c,e[2]=i*s*l-r*c,e[3]=0,e[4]=s*r*l-i*c,e[5]=r*r*l+d,e[6]=i*r*l+s*c,e[7]=0,e[8]=s*i*l+r*c,e[9]=r*i*l-s*c,e[10]=i*i*l+d,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static fromXRotation(e,t){let n=Math.sin(t),s=Math.cos(t);return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=s,e[6]=n,e[7]=0,e[8]=0,e[9]=-n,e[10]=s,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static fromYRotation(e,t){let n=Math.sin(t),s=Math.cos(t);return e[0]=s,e[1]=0,e[2]=-n,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=n,e[9]=0,e[10]=s,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static fromZRotation(e,t){let n=Math.sin(t),s=Math.cos(t);return e[0]=s,e[1]=n,e[2]=0,e[3]=0,e[4]=-n,e[5]=s,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static fromRotationTranslation(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=s+s,d=r+r,l=i+i,L=s*c,h=s*d,M=s*l,k=r*d,T=r*l,m=i*l,R=a*c,o=a*d,V=a*l;return e[0]=1-(k+m),e[1]=h+V,e[2]=M-o,e[3]=0,e[4]=h-V,e[5]=1-(L+m),e[6]=T+R,e[7]=0,e[8]=M+o,e[9]=T-R,e[10]=1-(L+k),e[11]=0,e[12]=n[0],e[13]=n[1],e[14]=n[2],e[15]=1,e}static fromQuat2(e,t){let n=-t[0],s=-t[1],r=-t[2],i=t[3],a=t[4],c=t[5],d=t[6],l=t[7],L=n*n+s*s+r*r+i*i;return L>0?(y.#t[0]=(a*i+l*n+c*r-d*s)*2/L,y.#t[1]=(c*i+l*s+d*n-a*r)*2/L,y.#t[2]=(d*i+l*r+a*s-c*n)*2/L):(y.#t[0]=(a*i+l*n+c*r-d*s)*2,y.#t[1]=(c*i+l*s+d*n-a*r)*2,y.#t[2]=(d*i+l*r+a*s-c*n)*2),y.fromRotationTranslation(e,t,y.#t),e}static normalFromMat4(e,t){let n=t[0],s=t[1],r=t[2],i=t[4],a=t[5],c=t[6],d=t[8],l=t[9],L=t[10];return e[0]=a*L-c*l,e[1]=r*l-s*L,e[2]=s*c-r*a,e[3]=0,e[4]=c*d-i*L,e[5]=n*L-r*d,e[6]=r*i-n*c,e[7]=0,e[8]=i*l-a*d,e[9]=s*d-n*l,e[10]=n*a-s*i,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static normalFromMat4Fast(e,t){return e}static getTranslation(e,t){return e[0]=t[12],e[1]=t[13],e[2]=t[14],e}static getScaling(e,t){let n=t[0],s=t[1],r=t[2],i=t[4],a=t[5],c=t[6],d=t[8],l=t[9],L=t[10];return e[0]=Math.sqrt(n*n+s*s+r*r),e[1]=Math.sqrt(i*i+a*a+c*c),e[2]=Math.sqrt(d*d+l*l+L*L),e}static getRotation(e,t){y.getScaling(y.#t,t);let n=1/y.#t[0],s=1/y.#t[1],r=1/y.#t[2],i=t[0]*n,a=t[1]*s,c=t[2]*r,d=t[4]*n,l=t[5]*s,L=t[6]*r,h=t[8]*n,M=t[9]*s,k=t[10]*r,T=i+l+k,m=0;return T>0?(m=Math.sqrt(T+1)*2,e[3]=.25*m,e[0]=(L-M)/m,e[1]=(h-c)/m,e[2]=(a-d)/m):i>l&&i>k?(m=Math.sqrt(1+i-l-k)*2,e[3]=(L-M)/m,e[0]=.25*m,e[1]=(a+d)/m,e[2]=(h+c)/m):l>k?(m=Math.sqrt(1+l-i-k)*2,e[3]=(h-c)/m,e[0]=(a+d)/m,e[1]=.25*m,e[2]=(L+M)/m):(m=Math.sqrt(1+k-i-l)*2,e[3]=(a-d)/m,e[0]=(h+c)/m,e[1]=(L+M)/m,e[2]=.25*m),e}static decompose(e,t,n,s){t[0]=s[12],t[1]=s[13],t[2]=s[14];let r=s[0],i=s[1],a=s[2],c=s[4],d=s[5],l=s[6],L=s[8],h=s[9],M=s[10];n[0]=Math.sqrt(r*r+i*i+a*a),n[1]=Math.sqrt(c*c+d*d+l*l),n[2]=Math.sqrt(L*L+h*h+M*M);let k=1/n[0],T=1/n[1],m=1/n[2],R=r*k,o=i*T,V=a*m,b=c*k,x=d*T,p=l*m,f=L*k,F=h*T,q=M*m,B=R+x+q,Q=0;return B>0?(Q=Math.sqrt(B+1)*2,e[3]=.25*Q,e[0]=(p-F)/Q,e[1]=(f-V)/Q,e[2]=(o-b)/Q):R>x&&R>q?(Q=Math.sqrt(1+R-x-q)*2,e[3]=(p-F)/Q,e[0]=.25*Q,e[1]=(o+b)/Q,e[2]=(f+V)/Q):x>q?(Q=Math.sqrt(1+x-R-q)*2,e[3]=(f-V)/Q,e[0]=(o+b)/Q,e[1]=.25*Q,e[2]=(p+F)/Q):(Q=Math.sqrt(1+q-R-x)*2,e[3]=(o-b)/Q,e[0]=(f+V)/Q,e[1]=(p+F)/Q,e[2]=.25*Q),e}static fromRotationTranslationScale(e,t,n,s){let r=t[0],i=t[1],a=t[2],c=t[3],d=r+r,l=i+i,L=a+a,h=r*d,M=r*l,k=r*L,T=i*l,m=i*L,R=a*L,o=c*d,V=c*l,b=c*L,x=s[0],p=s[1],f=s[2];return e[0]=(1-(T+R))*x,e[1]=(M+b)*x,e[2]=(k-V)*x,e[3]=0,e[4]=(M-b)*p,e[5]=(1-(h+R))*p,e[6]=(m+o)*p,e[7]=0,e[8]=(k+V)*f,e[9]=(m-o)*f,e[10]=(1-(h+T))*f,e[11]=0,e[12]=n[0],e[13]=n[1],e[14]=n[2],e[15]=1,e}static fromRotationTranslationScaleOrigin(e,t,n,s,r){let i=t[0],a=t[1],c=t[2],d=t[3],l=i+i,L=a+a,h=c+c,M=i*l,k=i*L,T=i*h,m=a*L,R=a*h,o=c*h,V=d*l,b=d*L,x=d*h,p=s[0],f=s[1],F=s[2],q=r[0],B=r[1],Q=r[2],N=(1-(m+o))*p,I=(k+x)*p,S=(T-b)*p,D=(k-x)*f,G=(1-(M+o))*f,X=(R+V)*f,$=(T+b)*F,C=(R-V)*F,U=(1-(M+m))*F;return e[0]=N,e[1]=I,e[2]=S,e[3]=0,e[4]=D,e[5]=G,e[6]=X,e[7]=0,e[8]=$,e[9]=C,e[10]=U,e[11]=0,e[12]=n[0]+q-(N*q+D*B+$*Q),e[13]=n[1]+B-(I*q+G*B+C*Q),e[14]=n[2]+Q-(S*q+X*B+U*Q),e[15]=1,e}static fromQuat(e,t){let n=t[0],s=t[1],r=t[2],i=t[3],a=n+n,c=s+s,d=r+r,l=n*a,L=s*a,h=s*c,M=r*a,k=r*c,T=r*d,m=i*a,R=i*c,o=i*d;return e[0]=1-h-T,e[1]=L+o,e[2]=M-R,e[3]=0,e[4]=L-o,e[5]=1-l-T,e[6]=k+m,e[7]=0,e[8]=M+R,e[9]=k-m,e[10]=1-l-h,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static frustumNO(e,t,n,s,r,i,a=1/0){let c=1/(n-t),d=1/(r-s);if(e[0]=i*2*c,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=i*2*d,e[6]=0,e[7]=0,e[8]=(n+t)*c,e[9]=(r+s)*d,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,a!=null&&a!==1/0){let l=1/(i-a);e[10]=(a+i)*l,e[14]=2*a*i*l}else e[10]=-1,e[14]=-2*i;return e}static frustum(e,t,n,s,r,i,a=1/0){return e}static frustumZO(e,t,n,s,r,i,a=1/0){let c=1/(n-t),d=1/(r-s);if(e[0]=i*2*c,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=i*2*d,e[6]=0,e[7]=0,e[8]=(n+t)*c,e[9]=(r+s)*d,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,a!=null&&a!==1/0){let l=1/(i-a);e[10]=a*l,e[14]=a*i*l}else e[10]=-1,e[14]=-i;return e}static perspectiveNO(e,t,n,s,r=1/0){let i=1/Math.tan(t/2);if(e[0]=i/n,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=i,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,r!=null&&r!==1/0){let a=1/(s-r);e[10]=(r+s)*a,e[14]=2*r*s*a}else e[10]=-1,e[14]=-2*s;return e}static perspective(e,t,n,s,r=1/0){return e}static perspectiveZO(e,t,n,s,r=1/0){let i=1/Math.tan(t/2);if(e[0]=i/n,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=i,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,r!=null&&r!==1/0){let a=1/(s-r);e[10]=r*a,e[14]=r*s*a}else e[10]=-1,e[14]=-s;return e}static perspectiveFromFieldOfView(e,t,n,s){let r=Math.tan(t.upDegrees*Math.PI/180),i=Math.tan(t.downDegrees*Math.PI/180),a=Math.tan(t.leftDegrees*Math.PI/180),c=Math.tan(t.rightDegrees*Math.PI/180),d=2/(a+c),l=2/(r+i);return e[0]=d,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=l,e[6]=0,e[7]=0,e[8]=-((a-c)*d*.5),e[9]=(r-i)*l*.5,e[10]=s/(n-s),e[11]=-1,e[12]=0,e[13]=0,e[14]=s*n/(n-s),e[15]=0,e}static orthoNO(e,t,n,s,r,i,a){let c=1/(t-n),d=1/(s-r),l=1/(i-a);return e[0]=-2*c,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=-2*d,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=2*l,e[11]=0,e[12]=(t+n)*c,e[13]=(r+s)*d,e[14]=(a+i)*l,e[15]=1,e}static ortho(e,t,n,s,r,i,a){return e}static orthoZO(e,t,n,s,r,i,a){let c=1/(t-n),d=1/(s-r),l=1/(i-a);return e[0]=-2*c,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=-2*d,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=l,e[11]=0,e[12]=(t+n)*c,e[13]=(r+s)*d,e[14]=i*l,e[15]=1,e}static lookAt(e,t,n,s){let r=t[0],i=t[1],a=t[2],c=s[0],d=s[1],l=s[2],L=n[0],h=n[1],M=n[2];if(Math.abs(r-L)<1e-6&&Math.abs(i-h)<1e-6&&Math.abs(a-M)<1e-6)return y.identity(e);let k=r-L,T=i-h,m=a-M,R=1/Math.sqrt(k*k+T*T+m*m);k*=R,T*=R,m*=R;let o=d*m-l*T,V=l*k-c*m,b=c*T-d*k;R=Math.sqrt(o*o+V*V+b*b),R?(R=1/R,o*=R,V*=R,b*=R):(o=0,V=0,b=0);let x=T*b-m*V,p=m*o-k*b,f=k*V-T*o;return R=Math.sqrt(x*x+p*p+f*f),R?(R=1/R,x*=R,p*=R,f*=R):(x=0,p=0,f=0),e[0]=o,e[1]=x,e[2]=k,e[3]=0,e[4]=V,e[5]=p,e[6]=T,e[7]=0,e[8]=b,e[9]=f,e[10]=m,e[11]=0,e[12]=-(o*r+V*i+b*a),e[13]=-(x*r+p*i+f*a),e[14]=-(k*r+T*i+m*a),e[15]=1,e}static targetTo(e,t,n,s){let r=t[0],i=t[1],a=t[2],c=s[0],d=s[1],l=s[2],L=r-n[0],h=i-n[1],M=a-n[2],k=L*L+h*h+M*M;k>0&&(k=1/Math.sqrt(k),L*=k,h*=k,M*=k);let T=d*M-l*h,m=l*L-c*M,R=c*h-d*L;return k=T*T+m*m+R*R,k>0&&(k=1/Math.sqrt(k),T*=k,m*=k,R*=k),e[0]=T,e[1]=m,e[2]=R,e[3]=0,e[4]=h*R-M*m,e[5]=M*T-L*R,e[6]=L*m-h*T,e[7]=0,e[8]=L,e[9]=h,e[10]=M,e[11]=0,e[12]=r,e[13]=i,e[14]=a,e[15]=1,e}static frob(e){return Math.sqrt(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]+e[3]*e[3]+e[4]*e[4]+e[5]*e[5]+e[6]*e[6]+e[7]*e[7]+e[8]*e[8]+e[9]*e[9]+e[10]*e[10]+e[11]*e[11]+e[12]*e[12]+e[13]*e[13]+e[14]*e[14]+e[15]*e[15])}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e[4]=t[4]+n[4],e[5]=t[5]+n[5],e[6]=t[6]+n[6],e[7]=t[7]+n[7],e[8]=t[8]+n[8],e[9]=t[9]+n[9],e[10]=t[10]+n[10],e[11]=t[11]+n[11],e[12]=t[12]+n[12],e[13]=t[13]+n[13],e[14]=t[14]+n[14],e[15]=t[15]+n[15],e}static subtract(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e[4]=t[4]-n[4],e[5]=t[5]-n[5],e[6]=t[6]-n[6],e[7]=t[7]-n[7],e[8]=t[8]-n[8],e[9]=t[9]-n[9],e[10]=t[10]-n[10],e[11]=t[11]-n[11],e[12]=t[12]-n[12],e[13]=t[13]-n[13],e[14]=t[14]-n[14],e[15]=t[15]-n[15],e}static sub(e,t,n){return e}static multiplyScalar(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*n,e[5]=t[5]*n,e[6]=t[6]*n,e[7]=t[7]*n,e[8]=t[8]*n,e[9]=t[9]*n,e[10]=t[10]*n,e[11]=t[11]*n,e[12]=t[12]*n,e[13]=t[13]*n,e[14]=t[14]*n,e[15]=t[15]*n,e}static multiplyScalarAndAdd(e,t,n,s){return e[0]=t[0]+n[0]*s,e[1]=t[1]+n[1]*s,e[2]=t[2]+n[2]*s,e[3]=t[3]+n[3]*s,e[4]=t[4]+n[4]*s,e[5]=t[5]+n[5]*s,e[6]=t[6]+n[6]*s,e[7]=t[7]+n[7]*s,e[8]=t[8]+n[8]*s,e[9]=t[9]+n[9]*s,e[10]=t[10]+n[10]*s,e[11]=t[11]+n[11]*s,e[12]=t[12]+n[12]*s,e[13]=t[13]+n[13]*s,e[14]=t[14]+n[14]*s,e[15]=t[15]+n[15]*s,e}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]&&e[8]===t[8]&&e[9]===t[9]&&e[10]===t[10]&&e[11]===t[11]&&e[12]===t[12]&&e[13]===t[13]&&e[14]===t[14]&&e[15]===t[15]}static equals(e,t){let n=e[0],s=e[1],r=e[2],i=e[3],a=e[4],c=e[5],d=e[6],l=e[7],L=e[8],h=e[9],M=e[10],k=e[11],T=e[12],m=e[13],R=e[14],o=e[15],V=t[0],b=t[1],x=t[2],p=t[3],f=t[4],F=t[5],q=t[6],B=t[7],Q=t[8],N=t[9],I=t[10],S=t[11],D=t[12],G=t[13],X=t[14],$=t[15];return Math.abs(n-V)<=1e-6*Math.max(1,Math.abs(n),Math.abs(V))&&Math.abs(s-b)<=1e-6*Math.max(1,Math.abs(s),Math.abs(b))&&Math.abs(r-x)<=1e-6*Math.max(1,Math.abs(r),Math.abs(x))&&Math.abs(i-p)<=1e-6*Math.max(1,Math.abs(i),Math.abs(p))&&Math.abs(a-f)<=1e-6*Math.max(1,Math.abs(a),Math.abs(f))&&Math.abs(c-F)<=1e-6*Math.max(1,Math.abs(c),Math.abs(F))&&Math.abs(d-q)<=1e-6*Math.max(1,Math.abs(d),Math.abs(q))&&Math.abs(l-B)<=1e-6*Math.max(1,Math.abs(l),Math.abs(B))&&Math.abs(L-Q)<=1e-6*Math.max(1,Math.abs(L),Math.abs(Q))&&Math.abs(h-N)<=1e-6*Math.max(1,Math.abs(h),Math.abs(N))&&Math.abs(M-I)<=1e-6*Math.max(1,Math.abs(M),Math.abs(I))&&Math.abs(k-S)<=1e-6*Math.max(1,Math.abs(k),Math.abs(S))&&Math.abs(T-D)<=1e-6*Math.max(1,Math.abs(T),Math.abs(D))&&Math.abs(m-G)<=1e-6*Math.max(1,Math.abs(m),Math.abs(G))&&Math.abs(R-X)<=1e-6*Math.max(1,Math.abs(R),Math.abs(X))&&Math.abs(o-$)<=1e-6*Math.max(1,Math.abs(o),Math.abs($))}static str(e){return`Mat4(${e.join(", ")})`}};Y.prototype.mul=Y.prototype.multiply;Y.sub=Y.subtract;Y.mul=Y.multiply;Y.frustum=Y.frustumNO;Y.perspective=Y.perspectiveNO;Y.ortho=Y.orthoNO;Y.normalFromMat4Fast=Y.normalFromMat4;var w=class y extends Float64Array{constructor(...e){switch(e.length){case 3:super(e);break;case 2:super(e[0],e[1],3);break;case 1:{let t=e[0];t===void 0?super(3):typeof t=="number"?super([t,t,t]):super(t,0,3);break}default:super(3);break}}get x(){return this[0]}set x(e){this[0]=e}get y(){return this[1]}set y(e){this[1]=e}get z(){return this[2]}set z(e){this[2]=e}get r(){return this[0]}set r(e){this[0]=e}get g(){return this[1]}set g(e){this[1]=e}get b(){return this[2]}set b(e){this[2]=e}get magnitude(){let e=this[0],t=this[1],n=this[2];return Math.sqrt(e*e+t*t+n*n)}get mag(){return this.magnitude}get squaredMagnitude(){let e=this[0],t=this[1],n=this[2];return e*e+t*t+n*n}get sqrMag(){return this.squaredMagnitude}get str(){return y.str(this)}copy(e){return this.set(e),this}add(e){return this[0]+=e[0],this[1]+=e[1],this[2]+=e[2],this}subtract(e){return this[0]-=e[0],this[1]-=e[1],this[2]-=e[2],this}sub(e){return this}multiply(e){return this[0]*=e[0],this[1]*=e[1],this[2]*=e[2],this}mul(e){return this}divide(e){return this[0]/=e[0],this[1]/=e[1],this[2]/=e[2],this}div(e){return this}scale(e){return this[0]*=e,this[1]*=e,this[2]*=e,this}scaleAndAdd(e,t){return this[0]+=e[0]*t,this[1]+=e[1]*t,this[2]+=e[2]*t,this}distance(e){return y.distance(this,e)}dist(e){return 0}squaredDistance(e){return y.squaredDistance(this,e)}sqrDist(e){return 0}negate(){return this[0]*=-1,this[1]*=-1,this[2]*=-1,this}invert(){return this[0]=1/this[0],this[1]=1/this[1],this[2]=1/this[2],this}abs(){return this[0]=Math.abs(this[0]),this[1]=Math.abs(this[1]),this[2]=Math.abs(this[2]),this}dot(e){return this[0]*e[0]+this[1]*e[1]+this[2]*e[2]}normalize(){return y.normalize(this,this)}static get BYTE_LENGTH(){return 3*Float64Array.BYTES_PER_ELEMENT}static create(){return new y}static clone(e){return new y(e)}static magnitude(e){let t=e[0],n=e[1],s=e[2];return Math.sqrt(t*t+n*n+s*s)}static mag(e){return 0}static length(e){return 0}static len(e){return 0}static fromValues(e,t,n){return new y(e,t,n)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e}static set(e,t,n,s){return e[0]=t,e[1]=n,e[2]=s,e}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e}static subtract(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e}static sub(e,t,n){return e}static multiply(e,t,n){return e[0]=t[0]*n[0],e[1]=t[1]*n[1],e[2]=t[2]*n[2],e}static mul(e,t,n){return e}static divide(e,t,n){return e[0]=t[0]/n[0],e[1]=t[1]/n[1],e[2]=t[2]/n[2],e}static div(e,t,n){return e}static ceil(e,t){return e[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e[2]=Math.ceil(t[2]),e}static floor(e,t){return e[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e[2]=Math.floor(t[2]),e}static min(e,t,n){return e[0]=Math.min(t[0],n[0]),e[1]=Math.min(t[1],n[1]),e[2]=Math.min(t[2],n[2]),e}static max(e,t,n){return e[0]=Math.max(t[0],n[0]),e[1]=Math.max(t[1],n[1]),e[2]=Math.max(t[2],n[2]),e}static scale(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e}static scaleAndAdd(e,t,n,s){return e[0]=t[0]+n[0]*s,e[1]=t[1]+n[1]*s,e[2]=t[2]+n[2]*s,e}static distance(e,t){let n=t[0]-e[0],s=t[1]-e[1],r=t[2]-e[2];return Math.sqrt(n*n+s*s+r*r)}static dist(e,t){return 0}static squaredDistance(e,t){let n=t[0]-e[0],s=t[1]-e[1],r=t[2]-e[2];return n*n+s*s+r*r}static sqrDist(e,t){return 0}static squaredLength(e){let t=e[0],n=e[1],s=e[2];return t*t+n*n+s*s}static sqrLen(e,t){return 0}static negate(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e}static inverse(e,t){return e[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e}static abs(e,t){return e[0]=Math.abs(t[0]),e[1]=Math.abs(t[1]),e[2]=Math.abs(t[2]),e}static normalize(e,t){let n=t[0],s=t[1],r=t[2],i=n*n+s*s+r*r;return i>0&&(i=1/Math.sqrt(i)),e[0]=t[0]*i,e[1]=t[1]*i,e[2]=t[2]*i,e}static dot(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}static cross(e,t,n){let s=t[0],r=t[1],i=t[2],a=n[0],c=n[1],d=n[2];return e[0]=r*d-i*c,e[1]=i*a-s*d,e[2]=s*c-r*a,e}static lerp(e,t,n,s){let r=t[0],i=t[1],a=t[2];return e[0]=r+s*(n[0]-r),e[1]=i+s*(n[1]-i),e[2]=a+s*(n[2]-a),e}static slerp(e,t,n,s){let r=Math.acos(Math.min(Math.max(y.dot(t,n),-1),1)),i=Math.sin(r),a=Math.sin((1-s)*r)/i,c=Math.sin(s*r)/i;return e[0]=a*t[0]+c*n[0],e[1]=a*t[1]+c*n[1],e[2]=a*t[2]+c*n[2],e}static hermite(e,t,n,s,r,i){let a=i*i,c=a*(2*i-3)+1,d=a*(i-2)+i,l=a*(i-1),L=a*(3-2*i);return e[0]=t[0]*c+n[0]*d+s[0]*l+r[0]*L,e[1]=t[1]*c+n[1]*d+s[1]*l+r[1]*L,e[2]=t[2]*c+n[2]*d+s[2]*l+r[2]*L,e}static bezier(e,t,n,s,r,i){let a=1-i,c=a*a,d=i*i,l=c*a,L=3*i*c,h=3*d*a,M=d*i;return e[0]=t[0]*l+n[0]*L+s[0]*h+r[0]*M,e[1]=t[1]*l+n[1]*L+s[1]*h+r[1]*M,e[2]=t[2]*l+n[2]*L+s[2]*h+r[2]*M,e}static transformMat4(e,t,n){let s=t[0],r=t[1],i=t[2],a=n[3]*s+n[7]*r+n[11]*i+n[15]||1;return e[0]=(n[0]*s+n[4]*r+n[8]*i+n[12])/a,e[1]=(n[1]*s+n[5]*r+n[9]*i+n[13])/a,e[2]=(n[2]*s+n[6]*r+n[10]*i+n[14])/a,e}static transformMat3(e,t,n){let s=t[0],r=t[1],i=t[2];return e[0]=s*n[0]+r*n[3]+i*n[6],e[1]=s*n[1]+r*n[4]+i*n[7],e[2]=s*n[2]+r*n[5]+i*n[8],e}static transformQuat(e,t,n){let s=n[0],r=n[1],i=n[2],a=n[3]*2,c=t[0],d=t[1],l=t[2],L=r*l-i*d,h=i*c-s*l,M=s*d-r*c,k=(r*M-i*h)*2,T=(i*L-s*M)*2,m=(s*h-r*L)*2;return e[0]=c+L*a+k,e[1]=d+h*a+T,e[2]=l+M*a+m,e}static rotateX(e,t,n,s){let r=n[1],i=n[2],a=t[1]-r,c=t[2]-i;return e[0]=t[0],e[1]=a*Math.cos(s)-c*Math.sin(s)+r,e[2]=a*Math.sin(s)+c*Math.cos(s)+i,e}static rotateY(e,t,n,s){let r=n[0],i=n[2],a=t[0]-r,c=t[2]-i;return e[0]=c*Math.sin(s)+a*Math.cos(s)+r,e[1]=t[1],e[2]=c*Math.cos(s)-a*Math.sin(s)+i,e}static rotateZ(e,t,n,s){let r=n[0],i=n[1],a=t[0]-r,c=t[1]-i;return e[0]=a*Math.cos(s)-c*Math.sin(s)+r,e[1]=a*Math.sin(s)+c*Math.cos(s)+i,e[2]=n[2],e}static angle(e,t){let n=e[0],s=e[1],r=e[2],i=t[0],a=t[1],c=t[2],d=Math.sqrt((n*n+s*s+r*r)*(i*i+a*a+c*c)),l=d&&y.dot(e,t)/d;return Math.acos(Math.min(Math.max(l,-1),1))}static zero(e){return e[0]=0,e[1]=0,e[2]=0,e}static str(e){return`Vec3(${e.join(", ")})`}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]}static equals(e,t){let n=e[0],s=e[1],r=e[2],i=t[0],a=t[1],c=t[2];return Math.abs(n-i)<=1e-6*Math.max(1,Math.abs(n),Math.abs(i))&&Math.abs(s-a)<=1e-6*Math.max(1,Math.abs(s),Math.abs(a))&&Math.abs(r-c)<=1e-6*Math.max(1,Math.abs(r),Math.abs(c))}};w.prototype.sub=w.prototype.subtract;w.prototype.mul=w.prototype.multiply;w.prototype.div=w.prototype.divide;w.prototype.dist=w.prototype.distance;w.prototype.sqrDist=w.prototype.squaredDistance;w.sub=w.subtract;w.mul=w.multiply;w.div=w.divide;w.dist=w.distance;w.sqrDist=w.squaredDistance;w.sqrLen=w.squaredLength;w.mag=w.magnitude;w.length=w.magnitude;w.len=w.magnitude;var z=class y extends Float64Array{constructor(...e){switch(e.length){case 4:super(e);break;case 2:super(e[0],e[1],4);break;case 1:{let t=e[0];t===void 0?super(4):typeof t=="number"?super([t,t,t,t]):super(t,0,4);break}default:super(4);break}}get x(){return this[0]}set x(e){this[0]=e}get y(){return this[1]}set y(e){this[1]=e}get z(){return this[2]}set z(e){this[2]=e}get w(){return this[3]}set w(e){this[3]=e}get r(){return this[0]}set r(e){this[0]=e}get g(){return this[1]}set g(e){this[1]=e}get b(){return this[2]}set b(e){this[2]=e}get a(){return this[3]}set a(e){this[3]=e}get magnitude(){let e=this[0],t=this[1],n=this[2],s=this[3];return Math.sqrt(e*e+t*t+n*n+s*s)}get mag(){return this.magnitude}get str(){return y.str(this)}copy(e){return super.set(e),this}add(e){return this[0]+=e[0],this[1]+=e[1],this[2]+=e[2],this[3]+=e[3],this}subtract(e){return this[0]-=e[0],this[1]-=e[1],this[2]-=e[2],this[3]-=e[3],this}sub(e){return this}multiply(e){return this[0]*=e[0],this[1]*=e[1],this[2]*=e[2],this[3]*=e[3],this}mul(e){return this}divide(e){return this[0]/=e[0],this[1]/=e[1],this[2]/=e[2],this[3]/=e[3],this}div(e){return this}scale(e){return this[0]*=e,this[1]*=e,this[2]*=e,this[3]*=e,this}scaleAndAdd(e,t){return this[0]+=e[0]*t,this[1]+=e[1]*t,this[2]+=e[2]*t,this[3]+=e[3]*t,this}distance(e){return y.distance(this,e)}dist(e){return 0}squaredDistance(e){return y.squaredDistance(this,e)}sqrDist(e){return 0}negate(){return this[0]*=-1,this[1]*=-1,this[2]*=-1,this[3]*=-1,this}invert(){return this[0]=1/this[0],this[1]=1/this[1],this[2]=1/this[2],this[3]=1/this[3],this}abs(){return this[0]=Math.abs(this[0]),this[1]=Math.abs(this[1]),this[2]=Math.abs(this[2]),this[3]=Math.abs(this[3]),this}dot(e){return this[0]*e[0]+this[1]*e[1]+this[2]*e[2]+this[3]*e[3]}normalize(){return y.normalize(this,this)}static get BYTE_LENGTH(){return 4*Float64Array.BYTES_PER_ELEMENT}static create(){return new y}static clone(e){return new y(e)}static fromValues(e,t,n,s){return new y(e,t,n,s)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}static set(e,t,n,s,r){return e[0]=t,e[1]=n,e[2]=s,e[3]=r,e}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e}static subtract(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e}static sub(e,t,n){return e}static multiply(e,t,n){return e[0]=t[0]*n[0],e[1]=t[1]*n[1],e[2]=t[2]*n[2],e[3]=t[3]*n[3],e}static mul(e,t,n){return e}static divide(e,t,n){return e[0]=t[0]/n[0],e[1]=t[1]/n[1],e[2]=t[2]/n[2],e[3]=t[3]/n[3],e}static div(e,t,n){return e}static ceil(e,t){return e[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e[2]=Math.ceil(t[2]),e[3]=Math.ceil(t[3]),e}static floor(e,t){return e[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e[2]=Math.floor(t[2]),e[3]=Math.floor(t[3]),e}static min(e,t,n){return e[0]=Math.min(t[0],n[0]),e[1]=Math.min(t[1],n[1]),e[2]=Math.min(t[2],n[2]),e[3]=Math.min(t[3],n[3]),e}static max(e,t,n){return e[0]=Math.max(t[0],n[0]),e[1]=Math.max(t[1],n[1]),e[2]=Math.max(t[2],n[2]),e[3]=Math.max(t[3],n[3]),e}static round(e,t){return e[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e[2]=Math.round(t[2]),e[3]=Math.round(t[3]),e}static scale(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e}static scaleAndAdd(e,t,n,s){return e[0]=t[0]+n[0]*s,e[1]=t[1]+n[1]*s,e[2]=t[2]+n[2]*s,e[3]=t[3]+n[3]*s,e}static distance(e,t){let n=t[0]-e[0],s=t[1]-e[1],r=t[2]-e[2],i=t[3]-e[3];return Math.hypot(n,s,r,i)}static dist(e,t){return 0}static squaredDistance(e,t){let n=t[0]-e[0],s=t[1]-e[1],r=t[2]-e[2],i=t[3]-e[3];return n*n+s*s+r*r+i*i}static sqrDist(e,t){return 0}static magnitude(e){let t=e[0],n=e[1],s=e[2],r=e[3];return Math.sqrt(t*t+n*n+s*s+r*r)}static mag(e){return 0}static length(e){return 0}static len(e){return 0}static squaredLength(e){let t=e[0],n=e[1],s=e[2],r=e[3];return t*t+n*n+s*s+r*r}static sqrLen(e){return 0}static negate(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=-t[3],e}static inverse(e,t){return e[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e[3]=1/t[3],e}static abs(e,t){return e[0]=Math.abs(t[0]),e[1]=Math.abs(t[1]),e[2]=Math.abs(t[2]),e[3]=Math.abs(t[3]),e}static normalize(e,t){let n=t[0],s=t[1],r=t[2],i=t[3],a=n*n+s*s+r*r+i*i;return a>0&&(a=1/Math.sqrt(a)),e[0]=n*a,e[1]=s*a,e[2]=r*a,e[3]=i*a,e}static dot(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]}static cross(e,t,n,s){let r=n[0]*s[1]-n[1]*s[0],i=n[0]*s[2]-n[2]*s[0],a=n[0]*s[3]-n[3]*s[0],c=n[1]*s[2]-n[2]*s[1],d=n[1]*s[3]-n[3]*s[1],l=n[2]*s[3]-n[3]*s[2],L=t[0],h=t[1],M=t[2],k=t[3];return e[0]=h*l-M*d+k*c,e[1]=-(L*l)+M*a-k*i,e[2]=L*d-h*a+k*r,e[3]=-(L*c)+h*i-M*r,e}static lerp(e,t,n,s){let r=t[0],i=t[1],a=t[2],c=t[3];return e[0]=r+s*(n[0]-r),e[1]=i+s*(n[1]-i),e[2]=a+s*(n[2]-a),e[3]=c+s*(n[3]-c),e}static transformMat4(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3];return e[0]=n[0]*s+n[4]*r+n[8]*i+n[12]*a,e[1]=n[1]*s+n[5]*r+n[9]*i+n[13]*a,e[2]=n[2]*s+n[6]*r+n[10]*i+n[14]*a,e[3]=n[3]*s+n[7]*r+n[11]*i+n[15]*a,e}static transformQuat(e,t,n){let s=t[0],r=t[1],i=t[2],a=n[0],c=n[1],d=n[2],l=n[3],L=l*s+c*i-d*r,h=l*r+d*s-a*i,M=l*i+a*r-c*s,k=-a*s-c*r-d*i;return e[0]=L*l+k*-a+h*-d-M*-c,e[1]=h*l+k*-c+M*-a-L*-d,e[2]=M*l+k*-d+L*-c-h*-a,e[3]=t[3],e}static zero(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=0,e}static str(e){return`Vec4(${e.join(", ")})`}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]}static equals(e,t){let n=e[0],s=e[1],r=e[2],i=e[3],a=t[0],c=t[1],d=t[2],l=t[3];return Math.abs(n-a)<=1e-6*Math.max(1,Math.abs(n),Math.abs(a))&&Math.abs(s-c)<=1e-6*Math.max(1,Math.abs(s),Math.abs(c))&&Math.abs(r-d)<=1e-6*Math.max(1,Math.abs(r),Math.abs(d))&&Math.abs(i-l)<=1e-6*Math.max(1,Math.abs(i),Math.abs(l))}};z.prototype.sub=z.prototype.subtract;z.prototype.mul=z.prototype.multiply;z.prototype.div=z.prototype.divide;z.prototype.dist=z.prototype.distance;z.prototype.sqrDist=z.prototype.squaredDistance;z.sub=z.subtract;z.mul=z.multiply;z.div=z.divide;z.dist=z.distance;z.sqrDist=z.squaredDistance;z.sqrLen=z.squaredLength;z.mag=z.magnitude;z.length=z.magnitude;z.len=z.magnitude;var H=new Float64Array([0,0,0,1]),A=class y extends Float64Array{static#e="zyx";static#t=new Float64Array(4);static#r=new Float64Array(4);static#n=new Float64Array(9);static#s=new Float64Array(3);static#i=new Float64Array([1,0,0]);static#a=new Float64Array([0,1,0]);constructor(...e){switch(e.length){case 4:super(e);break;case 2:super(e[0],e[1],4);break;case 1:{let t=e[0];t===void 0?super(H):typeof t=="number"?super([t,t,t,t]):super(t,0,4);break}default:super(H);break}}get x(){return this[0]}set x(e){this[0]=e}get y(){return this[1]}set y(e){this[1]=e}get z(){return this[2]}set z(e){this[2]=e}get w(){return this[3]}set w(e){this[3]=e}get magnitude(){let e=this[0],t=this[1],n=this[2],s=this[3];return Math.sqrt(e*e+t*t+n*n+s*s)}get mag(){return this.magnitude}get str(){return y.str(this)}copy(e){return super.set(e),this}identity(){return this.set(H),this}multiply(e){return y.multiply(this,this,e)}mul(e){return this}rotateX(e){return y.rotateX(this,this,e)}rotateY(e){return y.rotateY(this,this,e)}rotateZ(e){return y.rotateZ(this,this,e)}invert(){return y.invert(this,this)}scale(e){return this[0]*=e,this[1]*=e,this[2]*=e,this[3]*=e,this}dot(e){return y.dot(this,e)}static get BYTE_LENGTH(){return 4*Float64Array.BYTES_PER_ELEMENT}static create(){return new y}static identity(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e}static setAxisAngle(e,t,n){n*=.5;let s=Math.sin(n);return e[0]=s*t[0],e[1]=s*t[1],e[2]=s*t[2],e[3]=Math.cos(n),e}static getAxisAngle(e,t){let n=Math.acos(t[3])*2,s=Math.sin(n/2);return s>1e-6?(e[0]=t[0]/s,e[1]=t[1]/s,e[2]=t[2]/s):(e[0]=1,e[1]=0,e[2]=0),n}static getAngle(e,t){let n=y.dot(e,t);return Math.acos(2*n*n-1)}static multiply(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=n[0],d=n[1],l=n[2],L=n[3];return e[0]=s*L+a*c+r*l-i*d,e[1]=r*L+a*d+i*c-s*l,e[2]=i*L+a*l+s*d-r*c,e[3]=a*L-s*c-r*d-i*l,e}static rotateX(e,t,n){n*=.5;let s=t[0],r=t[1],i=t[2],a=t[3],c=Math.sin(n),d=Math.cos(n);return e[0]=s*d+a*c,e[1]=r*d+i*c,e[2]=i*d-r*c,e[3]=a*d-s*c,e}static rotateY(e,t,n){n*=.5;let s=t[0],r=t[1],i=t[2],a=t[3],c=Math.sin(n),d=Math.cos(n);return e[0]=s*d-i*c,e[1]=r*d+a*c,e[2]=i*d+s*c,e[3]=a*d-r*c,e}static rotateZ(e,t,n){n*=.5;let s=t[0],r=t[1],i=t[2],a=t[3],c=Math.sin(n),d=Math.cos(n);return e[0]=s*d+r*c,e[1]=r*d-s*c,e[2]=i*d+a*c,e[3]=a*d-i*c,e}static calculateW(e,t){let n=t[0],s=t[1],r=t[2];return e[0]=n,e[1]=s,e[2]=r,e[3]=Math.sqrt(Math.abs(1-n*n-s*s-r*r)),e}static exp(e,t){let n=t[0],s=t[1],r=t[2],i=t[3],a=Math.sqrt(n*n+s*s+r*r),c=Math.exp(i),d=a>0?c*Math.sin(a)/a:0;return e[0]=n*d,e[1]=s*d,e[2]=r*d,e[3]=c*Math.cos(a),e}static ln(e,t){let n=t[0],s=t[1],r=t[2],i=t[3],a=Math.sqrt(n*n+s*s+r*r),c=a>0?Math.atan2(a,i)/a:0;return e[0]=n*c,e[1]=s*c,e[2]=r*c,e[3]=.5*Math.log(n*n+s*s+r*r+i*i),e}static pow(e,t,n){return y.ln(e,t),y.scale(e,e,n),y.exp(e,e),e}static slerp(e,t,n,s){let r=t[0],i=t[1],a=t[2],c=t[3],d=n[0],l=n[1],L=n[2],h=n[3],M,k,T=r*d+i*l+a*L+c*h;if(T<0&&(T=-T,d=-d,l=-l,L=-L,h=-h),1-T>1e-6){let m=Math.acos(T),R=Math.sin(m);M=Math.sin((1-s)*m)/R,k=Math.sin(s*m)/R}else M=1-s,k=s;return e[0]=M*r+k*d,e[1]=M*i+k*l,e[2]=M*a+k*L,e[3]=M*c+k*h,e}static invert(e,t){let n=t[0],s=t[1],r=t[2],i=t[3],a=n*n+s*s+r*r+i*i,c=a?1/a:0;return e[0]=-n*c,e[1]=-s*c,e[2]=-r*c,e[3]=i*c,e}static conjugate(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=t[3],e}static fromMat3(e,t){let n=t[0]+t[4]+t[8],s;if(n>0)s=Math.sqrt(n+1),e[3]=.5*s,s=.5/s,e[0]=(t[5]-t[7])*s,e[1]=(t[6]-t[2])*s,e[2]=(t[1]-t[3])*s;else{let r=0;t[4]>t[0]&&(r=1),t[8]>t[r*3+r]&&(r=2);let i=(r+1)%3,a=(r+2)%3;s=Math.sqrt(t[r*3+r]-t[i*3+i]-t[a*3+a]+1),e[r]=.5*s,s=.5/s,e[3]=(t[i*3+a]-t[a*3+i])*s,e[i]=(t[i*3+r]+t[r*3+i])*s,e[a]=(t[a*3+r]+t[r*3+a])*s}return e}static fromEuler(e,t,n,s,r=y.#e){let i=.5*Math.PI/180;t*=i,n*=i,s*=i;let a=Math.sin(t),c=Math.cos(t),d=Math.sin(n),l=Math.cos(n),L=Math.sin(s),h=Math.cos(s);switch(r){case"xyz":e[0]=a*l*h+c*d*L,e[1]=c*d*h-a*l*L,e[2]=c*l*L+a*d*h,e[3]=c*l*h-a*d*L;break;case"xzy":e[0]=a*l*h-c*d*L,e[1]=c*d*h-a*l*L,e[2]=c*l*L+a*d*h,e[3]=c*l*h+a*d*L;break;case"yxz":e[0]=a*l*h+c*d*L,e[1]=c*d*h-a*l*L,e[2]=c*l*L-a*d*h,e[3]=c*l*h+a*d*L;break;case"yzx":e[0]=a*l*h+c*d*L,e[1]=c*d*h+a*l*L,e[2]=c*l*L-a*d*h,e[3]=c*l*h-a*d*L;break;case"zxy":e[0]=a*l*h-c*d*L,e[1]=c*d*h+a*l*L,e[2]=c*l*L+a*d*h,e[3]=c*l*h-a*d*L;break;case"zyx":e[0]=a*l*h-c*d*L,e[1]=c*d*h+a*l*L,e[2]=c*l*L-a*d*h,e[3]=c*l*h+a*d*L;break;default:throw new Error(`Unknown angle order ${r}`)}return e}static str(e){return`Quat(${e.join(", ")})`}static clone(e){return new y(e)}static fromValues(e,t,n,s){return new y(e,t,n,s)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}static set(e,t,n,s,r){return e}static add(e,t,n){return e}static mul(e,t,n){return e}static scale(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e}static dot(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]}static lerp(e,t,n,s){return e}static magnitude(e){return 0}static mag(e){return 0}static length(e){return 0}static len(e){return 0}static squaredLength(e){return 0}static sqrLen(e){return 0}static normalize(e,t){return e}static exactEquals(e,t){return!1}static equals(e,t){return!1}static rotationTo(e,t,n){let s=w.dot(t,n);return s<-.999999?(w.cross(y.#s,y.#i,t),w.mag(y.#s)<1e-6&&w.cross(y.#s,y.#a,t),w.normalize(y.#s,y.#s),y.setAxisAngle(e,y.#s,Math.PI),e):s>.999999?(e[0]=0,e[1]=0,e[2]=0,e[3]=1,e):(w.cross(y.#s,t,n),e[0]=y.#s[0],e[1]=y.#s[1],e[2]=y.#s[2],e[3]=1+s,y.normalize(e,e))}static sqlerp(e,t,n,s,r,i){return y.slerp(y.#t,t,r,i),y.slerp(y.#r,n,s,i),y.slerp(e,y.#t,y.#r,2*i*(1-i)),e}static setAxes(e,t,n,s){return y.#n[0]=n[0],y.#n[3]=n[1],y.#n[6]=n[2],y.#n[1]=s[0],y.#n[4]=s[1],y.#n[7]=s[2],y.#n[2]=-t[0],y.#n[5]=-t[1],y.#n[8]=-t[2],y.normalize(e,y.fromMat3(e,y.#n))}};A.set=z.set;A.add=z.add;A.lerp=z.lerp;A.normalize=z.normalize;A.squaredLength=z.squaredLength;A.sqrLen=z.squaredLength;A.exactEquals=z.exactEquals;A.equals=z.equals;A.magnitude=z.magnitude;A.prototype.mul=A.prototype.multiply;A.mul=A.multiply;A.mag=A.magnitude;A.length=A.magnitude;A.len=A.magnitude;var W=new Float64Array([0,0,0,1,0,0,0,0]),O=class y extends Float64Array{static#e=new Float64Array(4);static#t=new Float64Array(3);constructor(...e){switch(e.length){case 8:super(e);break;case 2:super(e[0],e[1],8);break;case 1:{let t=e[0];t===void 0?super(W):typeof t=="number"?super([t,t,t,t,t,t,t,t]):super(t,0,8);break}default:super(W);break}}get str(){return y.str(this)}copy(e){return super.set(e),this}static get BYTE_LENGTH(){return 8*Float64Array.BYTES_PER_ELEMENT}static create(){return new y}static clone(e){return new y(e)}static fromValues(e,t,n,s,r,i,a,c){return new y(e,t,n,s,r,i,a,c)}static fromRotationTranslationValues(e,t,n,s,r,i,a){let c=r*.5,d=i*.5,l=a*.5;return new y(e,t,n,s,c*s+d*n-l*t,d*s+l*e-c*n,l*s+c*t-d*e,-c*e-d*t-l*n)}static fromRotationTranslation(e,t,n){let s=n[0]*.5,r=n[1]*.5,i=n[2]*.5,a=t[0],c=t[1],d=t[2],l=t[3];return e[0]=a,e[1]=c,e[2]=d,e[3]=l,e[4]=s*l+r*d-i*c,e[5]=r*l+i*a-s*d,e[6]=i*l+s*c-r*a,e[7]=-s*a-r*c-i*d,e}static fromTranslation(e,t){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e[4]=t[0]*.5,e[5]=t[1]*.5,e[6]=t[2]*.5,e[7]=0,e}static fromRotation(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=0,e[5]=0,e[6]=0,e[7]=0,e}static fromMat4(e,t){return Y.getRotation(y.#e,t),Y.getTranslation(y.#t,t),y.fromRotationTranslation(e,y.#e,y.#t)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e}static identity(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e[4]=0,e[5]=0,e[6]=0,e[7]=0,e}static set(e,t,n,s,r,i,a,c,d){return e[0]=t,e[1]=n,e[2]=s,e[3]=r,e[4]=i,e[5]=a,e[6]=c,e[7]=d,e}static getReal(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}static getDual(e,t){return e[0]=t[4],e[1]=t[5],e[2]=t[6],e[3]=t[7],e}static setReal(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}static setDual(e,t){return e[4]=t[0],e[5]=t[1],e[6]=t[2],e[7]=t[3],e}static getTranslation(e,t){let n=t[4],s=t[5],r=t[6],i=t[7],a=-t[0],c=-t[1],d=-t[2],l=t[3];return e[0]=(n*l+i*a+s*d-r*c)*2,e[1]=(s*l+i*c+r*a-n*d)*2,e[2]=(r*l+i*d+n*c-s*a)*2,e}static translate(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=n[0]*.5,d=n[1]*.5,l=n[2]*.5,L=t[4],h=t[5],M=t[6],k=t[7];return e[0]=s,e[1]=r,e[2]=i,e[3]=a,e[4]=a*c+r*l-i*d+L,e[5]=a*d+i*c-s*l+h,e[6]=a*l+s*d-r*c+M,e[7]=-s*c-r*d-i*l+k,e}static rotateX(e,t,n){let s=-t[0],r=-t[1],i=-t[2],a=t[3],c=t[4],d=t[5],l=t[6],L=t[7],h=c*a+L*s+d*i-l*r,M=d*a+L*r+l*s-c*i,k=l*a+L*i+c*r-d*s,T=L*a-c*s-d*r-l*i;return A.rotateX(e,t,n),s=e[0],r=e[1],i=e[2],a=e[3],e[4]=h*a+T*s+M*i-k*r,e[5]=M*a+T*r+k*s-h*i,e[6]=k*a+T*i+h*r-M*s,e[7]=T*a-h*s-M*r-k*i,e}static rotateY(e,t,n){let s=-t[0],r=-t[1],i=-t[2],a=t[3],c=t[4],d=t[5],l=t[6],L=t[7],h=c*a+L*s+d*i-l*r,M=d*a+L*r+l*s-c*i,k=l*a+L*i+c*r-d*s,T=L*a-c*s-d*r-l*i;return A.rotateY(e,t,n),s=e[0],r=e[1],i=e[2],a=e[3],e[4]=h*a+T*s+M*i-k*r,e[5]=M*a+T*r+k*s-h*i,e[6]=k*a+T*i+h*r-M*s,e[7]=T*a-h*s-M*r-k*i,e}static rotateZ(e,t,n){let s=-t[0],r=-t[1],i=-t[2],a=t[3],c=t[4],d=t[5],l=t[6],L=t[7],h=c*a+L*s+d*i-l*r,M=d*a+L*r+l*s-c*i,k=l*a+L*i+c*r-d*s,T=L*a-c*s-d*r-l*i;return A.rotateZ(e,t,n),s=e[0],r=e[1],i=e[2],a=e[3],e[4]=h*a+T*s+M*i-k*r,e[5]=M*a+T*r+k*s-h*i,e[6]=k*a+T*i+h*r-M*s,e[7]=T*a-h*s-M*r-k*i,e}static rotateByQuatAppend(e,t,n){let s=n[0],r=n[1],i=n[2],a=n[3],c=t[0],d=t[1],l=t[2],L=t[3];return e[0]=c*a+L*s+d*i-l*r,e[1]=d*a+L*r+l*s-c*i,e[2]=l*a+L*i+c*r-d*s,e[3]=L*a-c*s-d*r-l*i,c=t[4],d=t[5],l=t[6],L=t[7],e[4]=c*a+L*s+d*i-l*r,e[5]=d*a+L*r+l*s-c*i,e[6]=l*a+L*i+c*r-d*s,e[7]=L*a-c*s-d*r-l*i,e}static rotateByQuatPrepend(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=n[0],d=n[1],l=n[2],L=n[3];return e[0]=s*L+a*c+r*l-i*d,e[1]=r*L+a*d+i*c-s*l,e[2]=i*L+a*l+s*d-r*c,e[3]=a*L-s*c-r*d-i*l,c=n[4],d=n[5],l=n[6],L=n[7],e[4]=s*L+a*c+r*l-i*d,e[5]=r*L+a*d+i*c-s*l,e[6]=i*L+a*l+s*d-r*c,e[7]=a*L-s*c-r*d-i*l,e}static rotateAroundAxis(e,t,n,s){if(Math.abs(s)<1e-6)return y.copy(e,t);let r=Math.sqrt(n[0]*n[0]+n[1]*n[1]+n[2]*n[2]);s*=.5;let i=Math.sin(s),a=i*n[0]/r,c=i*n[1]/r,d=i*n[2]/r,l=Math.cos(s),L=t[0],h=t[1],M=t[2],k=t[3];e[0]=L*l+k*a+h*d-M*c,e[1]=h*l+k*c+M*a-L*d,e[2]=M*l+k*d+L*c-h*a,e[3]=k*l-L*a-h*c-M*d;let T=t[4],m=t[5],R=t[6],o=t[7];return e[4]=T*l+o*a+m*d-R*c,e[5]=m*l+o*c+R*a-T*d,e[6]=R*l+o*d+T*c-m*a,e[7]=o*l-T*a-m*c-R*d,e}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e[4]=t[4]+n[4],e[5]=t[5]+n[5],e[6]=t[6]+n[6],e[7]=t[7]+n[7],e}static multiply(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=n[4],d=n[5],l=n[6],L=n[7],h=t[4],M=t[5],k=t[6],T=t[7],m=n[0],R=n[1],o=n[2],V=n[3];return e[0]=s*V+a*m+r*o-i*R,e[1]=r*V+a*R+i*m-s*o,e[2]=i*V+a*o+s*R-r*m,e[3]=a*V-s*m-r*R-i*o,e[4]=s*L+a*c+r*l-i*d+h*V+T*m+M*o-k*R,e[5]=r*L+a*d+i*c-s*l+M*V+T*R+k*m-h*o,e[6]=i*L+a*l+s*d-r*c+k*V+T*o+h*R-M*m,e[7]=a*L-s*c-r*d-i*l+T*V-h*m-M*R-k*o,e}static mul(e,t,n){return e}static scale(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*n,e[5]=t[5]*n,e[6]=t[6]*n,e[7]=t[7]*n,e}static dot(e,t){return 0}static lerp(e,t,n,s){let r=1-s;return y.dot(t,n)<0&&(s=-s),e[0]=t[0]*r+n[0]*s,e[1]=t[1]*r+n[1]*s,e[2]=t[2]*r+n[2]*s,e[3]=t[3]*r+n[3]*s,e[4]=t[4]*r+n[4]*s,e[5]=t[5]*r+n[5]*s,e[6]=t[6]*r+n[6]*s,e[7]=t[7]*r+n[7]*s,e}static invert(e,t){let n=y.squaredLength(t);return e[0]=-t[0]/n,e[1]=-t[1]/n,e[2]=-t[2]/n,e[3]=t[3]/n,e[4]=-t[4]/n,e[5]=-t[5]/n,e[6]=-t[6]/n,e[7]=t[7]/n,e}static conjugate(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=t[3],e[4]=-t[4],e[5]=-t[5],e[6]=-t[6],e[7]=t[7],e}static magnitude(e){return 0}static mag(e){return 0}static length(e){return 0}static len(e){return 0}static squaredLength(e){return 0}static sqrLen(e){return 0}static normalize(e,t){let n=y.squaredLength(t);if(n>0){n=Math.sqrt(n);let s=t[0]/n,r=t[1]/n,i=t[2]/n,a=t[3]/n,c=t[4],d=t[5],l=t[6],L=t[7],h=s*c+r*d+i*l+a*L;e[0]=s,e[1]=r,e[2]=i,e[3]=a,e[4]=(c-s*h)/n,e[5]=(d-r*h)/n,e[6]=(l-i*h)/n,e[7]=(L-a*h)/n}return e}static str(e){return`Quat2(${e.join(", ")})`}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]}static equals(e,t){let n=e[0],s=e[1],r=e[2],i=e[3],a=e[4],c=e[5],d=e[6],l=e[7],L=t[0],h=t[1],M=t[2],k=t[3],T=t[4],m=t[5],R=t[6],o=t[7];return Math.abs(n-L)<=1e-6*Math.max(1,Math.abs(n),Math.abs(L))&&Math.abs(s-h)<=1e-6*Math.max(1,Math.abs(s),Math.abs(h))&&Math.abs(r-M)<=1e-6*Math.max(1,Math.abs(r),Math.abs(M))&&Math.abs(i-k)<=1e-6*Math.max(1,Math.abs(i),Math.abs(k))&&Math.abs(a-T)<=1e-6*Math.max(1,Math.abs(a),Math.abs(T))&&Math.abs(c-m)<=1e-6*Math.max(1,Math.abs(c),Math.abs(m))&&Math.abs(d-R)<=1e-6*Math.max(1,Math.abs(d),Math.abs(R))&&Math.abs(l-o)<=1e-6*Math.max(1,Math.abs(l),Math.abs(o))}};O.dot=A.dot;O.squaredLength=A.squaredLength;O.sqrLen=A.squaredLength;O.mag=A.magnitude;O.length=A.magnitude;O.len=A.magnitude;O.mul=O.multiply;var E=class y extends Float64Array{constructor(...e){switch(e.length){case 2:{let t=e[0];typeof t=="number"?super([t,e[1]]):super(t,e[1],2);break}case 1:{let t=e[0];t===void 0?super(2):typeof t=="number"?super([t,t]):super(t,0,2);break}default:super(2);break}}get x(){return this[0]}set x(e){this[0]=e}get y(){return this[1]}set y(e){this[1]=e}get r(){return this[0]}set r(e){this[0]=e}get g(){return this[1]}set g(e){this[1]=e}get magnitude(){return Math.hypot(this[0],this[1])}get mag(){return this.magnitude}get squaredMagnitude(){let e=this[0],t=this[1];return e*e+t*t}get sqrMag(){return this.squaredMagnitude}get str(){return y.str(this)}copy(e){return this.set(e),this}add(e){return this[0]+=e[0],this[1]+=e[1],this}subtract(e){return this[0]-=e[0],this[1]-=e[1],this}sub(e){return this}multiply(e){return this[0]*=e[0],this[1]*=e[1],this}mul(e){return this}divide(e){return this[0]/=e[0],this[1]/=e[1],this}div(e){return this}scale(e){return this[0]*=e,this[1]*=e,this}scaleAndAdd(e,t){return this[0]+=e[0]*t,this[1]+=e[1]*t,this}distance(e){return y.distance(this,e)}dist(e){return 0}squaredDistance(e){return y.squaredDistance(this,e)}sqrDist(e){return 0}negate(){return this[0]*=-1,this[1]*=-1,this}invert(){return this[0]=1/this[0],this[1]=1/this[1],this}abs(){return this[0]=Math.abs(this[0]),this[1]=Math.abs(this[1]),this}dot(e){return this[0]*e[0]+this[1]*e[1]}normalize(){return y.normalize(this,this)}static get BYTE_LENGTH(){return 2*Float64Array.BYTES_PER_ELEMENT}static create(){return new y}static clone(e){return new y(e)}static fromValues(e,t){return new y(e,t)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e}static set(e,t,n){return e[0]=t,e[1]=n,e}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e}static subtract(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e}static sub(e,t,n){return e}static multiply(e,t,n){return e[0]=t[0]*n[0],e[1]=t[1]*n[1],e}static mul(e,t,n){return e}static divide(e,t,n){return e[0]=t[0]/n[0],e[1]=t[1]/n[1],e}static div(e,t,n){return e}static ceil(e,t){return e[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e}static floor(e,t){return e[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e}static min(e,t,n){return e[0]=Math.min(t[0],n[0]),e[1]=Math.min(t[1],n[1]),e}static max(e,t,n){return e[0]=Math.max(t[0],n[0]),e[1]=Math.max(t[1],n[1]),e}static round(e,t){return e[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e}static scale(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e}static scaleAndAdd(e,t,n,s){return e[0]=t[0]+n[0]*s,e[1]=t[1]+n[1]*s,e}static distance(e,t){return Math.hypot(t[0]-e[0],t[1]-e[1])}static dist(e,t){return 0}static squaredDistance(e,t){let n=t[0]-e[0],s=t[1]-e[1];return n*n+s*s}static sqrDist(e,t){return 0}static magnitude(e){let t=e[0],n=e[1];return Math.sqrt(t*t+n*n)}static mag(e){return 0}static length(e){return 0}static len(e){return 0}static squaredLength(e){let t=e[0],n=e[1];return t*t+n*n}static sqrLen(e,t){return 0}static negate(e,t){return e[0]=-t[0],e[1]=-t[1],e}static inverse(e,t){return e[0]=1/t[0],e[1]=1/t[1],e}static abs(e,t){return e[0]=Math.abs(t[0]),e[1]=Math.abs(t[1]),e}static normalize(e,t){let n=t[0],s=t[1],r=n*n+s*s;return r>0&&(r=1/Math.sqrt(r)),e[0]=t[0]*r,e[1]=t[1]*r,e}static dot(e,t){return e[0]*t[0]+e[1]*t[1]}static cross(e,t,n){let s=t[0]*n[1]-t[1]*n[0];return e[0]=e[1]=0,e[2]=s,e}static lerp(e,t,n,s){let r=t[0],i=t[1];return e[0]=r+s*(n[0]-r),e[1]=i+s*(n[1]-i),e}static transformMat2(e,t,n){let s=t[0],r=t[1];return e[0]=n[0]*s+n[2]*r,e[1]=n[1]*s+n[3]*r,e}static transformMat2d(e,t,n){let s=t[0],r=t[1];return e[0]=n[0]*s+n[2]*r+n[4],e[1]=n[1]*s+n[3]*r+n[5],e}static transformMat3(e,t,n){let s=t[0],r=t[1];return e[0]=n[0]*s+n[3]*r+n[6],e[1]=n[1]*s+n[4]*r+n[7],e}static transformMat4(e,t,n){let s=t[0],r=t[1];return e[0]=n[0]*s+n[4]*r+n[12],e[1]=n[1]*s+n[5]*r+n[13],e}static rotate(e,t,n,s){let r=t[0]-n[0],i=t[1]-n[1],a=Math.sin(s),c=Math.cos(s);return e[0]=r*c-i*a+n[0],e[1]=r*a+i*c+n[1],e}static angle(e,t){let n=e[0],s=e[1],r=t[0],i=t[1],a=Math.sqrt(n*n+s*s)*Math.sqrt(r*r+i*i),c=a&&(n*r+s*i)/a;return Math.acos(Math.min(Math.max(c,-1),1))}static zero(e){return e[0]=0,e[1]=0,e}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]}static equals(e,t){let n=e[0],s=e[1],r=t[0],i=t[1];return Math.abs(n-r)<=1e-6*Math.max(1,Math.abs(n),Math.abs(r))&&Math.abs(s-i)<=1e-6*Math.max(1,Math.abs(s),Math.abs(i))}static str(e){return`Vec2(${e.join(", ")})`}};E.prototype.sub=E.prototype.subtract;E.prototype.mul=E.prototype.multiply;E.prototype.div=E.prototype.divide;E.prototype.dist=E.prototype.distance;E.prototype.sqrDist=E.prototype.squaredDistance;E.sub=E.subtract;E.mul=E.multiply;E.div=E.divide;E.dist=E.distance;E.sqrDist=E.squaredDistance;E.sqrLen=E.squaredLength;E.mag=E.magnitude;E.length=E.magnitude;E.len=E.magnitude;var J=Math.PI/180,K=180/Math.PI;function xe(y){return y*K}function Ve(y){return y*J}export{j as Mat2,Z as Mat2d,P as Mat3,Y as Mat4,A as Quat,O as Quat2,E as Vec2,w as Vec3,z as Vec4,xe as toDegree,Ve as toRadian};
//# sourceMappingURL=gl-matrix-f64.min.js.map
