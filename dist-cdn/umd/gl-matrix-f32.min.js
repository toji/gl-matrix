// gl-matrix - v4.0.0-beta.3 - A high performance matrix and vector library.
// @author Brandon Jones
// @author Colin MacKenzie IV
// @license MIT (https://github.com/toji/gl-matrix/blob/master/LICENSE.md)
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.glMatrix = {}));
})(this, (function (exports) { 'use strict';

  function _assertThisInitialized(e) {
    if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return e;
  }
  function _callSuper(t, o, e) {
    return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
  }
  function _classCallCheck(a, n) {
    if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
  }
  function _construct(t, e, r) {
    if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);
    var o = [null];
    o.push.apply(o, e);
    var p = new (t.bind.apply(t, o))();
    return r && _setPrototypeOf(p, r.prototype), p;
  }
  function _defineProperties(e, r) {
    for (var t = 0; t < r.length; t++) {
      var o = r[t];
      o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);
    }
  }
  function _createClass(e, r, t) {
    return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
      writable: !1
    }), e;
  }
  function _get() {
    return _get = "undefined" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function (e, t, r) {
      var p = _superPropBase(e, t);
      if (p) {
        var n = Object.getOwnPropertyDescriptor(p, t);
        return n.get ? n.get.call(arguments.length < 3 ? e : r) : n.value;
      }
    }, _get.apply(null, arguments);
  }
  function _getPrototypeOf(t) {
    return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {
      return t.__proto__ || Object.getPrototypeOf(t);
    }, _getPrototypeOf(t);
  }
  function _inherits(t, e) {
    if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
    t.prototype = Object.create(e && e.prototype, {
      constructor: {
        value: t,
        writable: !0,
        configurable: !0
      }
    }), Object.defineProperty(t, "prototype", {
      writable: !1
    }), e && _setPrototypeOf(t, e);
  }
  function _isNativeFunction(t) {
    try {
      return -1 !== Function.toString.call(t).indexOf("[native code]");
    } catch (n) {
      return "function" == typeof t;
    }
  }
  function _isNativeReflectConstruct() {
    try {
      var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    } catch (t) {}
    return (_isNativeReflectConstruct = function () {
      return !!t;
    })();
  }
  function _possibleConstructorReturn(t, e) {
    if (e && ("object" == typeof e || "function" == typeof e)) return e;
    if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
    return _assertThisInitialized(t);
  }
  function _setPrototypeOf(t, e) {
    return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {
      return t.__proto__ = e, t;
    }, _setPrototypeOf(t, e);
  }
  function _superPropBase(t, o) {
    for (; !{}.hasOwnProperty.call(t, o) && null !== (t = _getPrototypeOf(t)););
    return t;
  }
  function _superPropGet(t, o, e, r) {
    var p = _get(_getPrototypeOf(t.prototype ), o, e);
    return "function" == typeof p ? function (t) {
      return p.apply(e, t);
    } : p;
  }
  function _toPrimitive(t, r) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r);
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (String )(t);
  }
  function _toPropertyKey(t) {
    var i = _toPrimitive(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _wrapNativeSuper(t) {
    var r = "function" == typeof Map ? new Map() : void 0;
    return _wrapNativeSuper = function (t) {
      if (null === t || !_isNativeFunction(t)) return t;
      if ("function" != typeof t) throw new TypeError("Super expression must either be null or a function");
      if (void 0 !== r) {
        if (r.has(t)) return r.get(t);
        r.set(t, Wrapper);
      }
      function Wrapper() {
        return _construct(t, arguments, _getPrototypeOf(this).constructor);
      }
      return Wrapper.prototype = Object.create(t.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: !1,
          writable: !0,
          configurable: !0
        }
      }), _setPrototypeOf(Wrapper, t);
    }, _wrapNativeSuper(t);
  }

  // gl-matrix - v4.0.0-beta.3 - A high performance matrix and vector library.
  // @author Brandon Jones
  // @author Colin MacKenzie IV
  // @license MIT (https://github.com/toji/gl-matrix/blob/master/LICENSE.md)
  var Me = function Me(E) {
    throw TypeError(E);
  };
  var oe = function oe(E, e, t) {
    return e.has(E) || Me("Cannot " + t);
  };
  var w = function w(E, e, t) {
      return oe(E, e, "read from private field"), t ? t.call(E) : e.get(E);
    },
    G = function G(E, e, t) {
      return e.has(E) ? Me("Cannot add the same private member more than once") : e instanceof WeakSet ? e.add(E) : e.set(E, t);
    };
  var ee,
    C = /*#__PURE__*/function (_Float32Array) {
      function C() {
        var _this;
        _classCallCheck(this, C);
        for (var _len = arguments.length, e = new Array(_len), _key = 0; _key < _len; _key++) {
          e[_key] = arguments[_key];
        }
        switch (e.length) {
          case 4:
            _this = _callSuper(this, C, [e]);
            break;
          case 2:
            _this = _callSuper(this, C, [e[0], e[1], 4]);
            break;
          case 1:
            var t = e[0];
            t === void 0 ? _this = _callSuper(this, C, [w(C, ee)]) : typeof t == "number" ? _this = _callSuper(this, C, [[t, t, t, t]]) : _this = _callSuper(this, C, [t, 0, 4]);
            break;
          default:
            _this = _callSuper(this, C, [w(C, ee)]);
            break;
        }
        return _assertThisInitialized(_this);
      }
      _inherits(C, _Float32Array);
      return _createClass(C, [{
        key: "str",
        get: function get() {
          return C.str(this);
        }
      }, {
        key: "copy",
        value: function copy(e) {
          return this.set(e), this;
        }
      }, {
        key: "identity",
        value: function identity() {
          return this.set(w(C, ee)), this;
        }
      }, {
        key: "multiply",
        value: function multiply(e) {
          return C.multiply(this, this, e);
        }
      }, {
        key: "mul",
        value: function mul(e) {
          return this;
        }
      }, {
        key: "transpose",
        value: function transpose() {
          return C.transpose(this, this);
        }
      }, {
        key: "invert",
        value: function invert() {
          return C.invert(this, this);
        }
      }, {
        key: "scale",
        value: function scale(e) {
          return C.scale(this, this, e);
        }
      }, {
        key: "rotate",
        value: function rotate(e) {
          return C.rotate(this, this, e);
        }
      }], [{
        key: "BYTE_LENGTH",
        get: function get() {
          return 4 * Float32Array.BYTES_PER_ELEMENT;
        }
      }, {
        key: "create",
        value: function create() {
          return new C();
        }
      }, {
        key: "clone",
        value: function clone(e) {
          return new C(e);
        }
      }, {
        key: "copy",
        value: function copy(e, t) {
          return e[0] = t[0], e[1] = t[1], e[2] = t[2], e[3] = t[3], e;
        }
      }, {
        key: "fromValues",
        value: function fromValues() {
          for (var _len2 = arguments.length, e = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            e[_key2] = arguments[_key2];
          }
          return _construct(C, e);
        }
      }, {
        key: "set",
        value: function set(e) {
          return e[0] = arguments.length <= 1 ? undefined : arguments[1], e[1] = arguments.length <= 2 ? undefined : arguments[2], e[2] = arguments.length <= 3 ? undefined : arguments[3], e[3] = arguments.length <= 4 ? undefined : arguments[4], e;
        }
      }, {
        key: "identity",
        value: function identity(e) {
          return e[0] = 1, e[1] = 0, e[2] = 0, e[3] = 1, e;
        }
      }, {
        key: "transpose",
        value: function transpose(e, t) {
          if (e === t) {
            var n = t[1];
            e[1] = t[2], e[2] = n;
          } else e[0] = t[0], e[1] = t[2], e[2] = t[1], e[3] = t[3];
          return e;
        }
      }, {
        key: "invert",
        value: function invert(e, t) {
          var n = t[0],
            s = t[1],
            r = t[2],
            a = t[3],
            i = n * a - r * s;
          return i ? (i = 1 / i, e[0] = a * i, e[1] = -s * i, e[2] = -r * i, e[3] = n * i, e) : null;
        }
      }, {
        key: "adjoint",
        value: function adjoint(e, t) {
          var n = t[0];
          return e[0] = t[3], e[1] = -t[1], e[2] = -t[2], e[3] = n, e;
        }
      }, {
        key: "determinant",
        value: function determinant(e) {
          return e[0] * e[3] - e[2] * e[1];
        }
      }, {
        key: "add",
        value: function add(e, t, n) {
          return e[0] = t[0] + n[0], e[1] = t[1] + n[1], e[2] = t[2] + n[2], e[3] = t[3] + n[3], e;
        }
      }, {
        key: "subtract",
        value: function subtract(e, t, n) {
          return e[0] = t[0] - n[0], e[1] = t[1] - n[1], e[2] = t[2] - n[2], e[3] = t[3] - n[3], e;
        }
      }, {
        key: "sub",
        value: function sub(e, t, n) {
          return e;
        }
      }, {
        key: "multiply",
        value: function multiply(e, t, n) {
          var s = t[0],
            r = t[1],
            a = t[2],
            i = t[3],
            c = n[0],
            y = n[1],
            d = n[2],
            l = n[3];
          return e[0] = s * c + a * y, e[1] = r * c + i * y, e[2] = s * d + a * l, e[3] = r * d + i * l, e;
        }
      }, {
        key: "mul",
        value: function mul(e, t, n) {
          return e;
        }
      }, {
        key: "rotate",
        value: function rotate(e, t, n) {
          var s = t[0],
            r = t[1],
            a = t[2],
            i = t[3],
            c = Math.sin(n),
            y = Math.cos(n);
          return e[0] = s * y + a * c, e[1] = r * y + i * c, e[2] = s * -c + a * y, e[3] = r * -c + i * y, e;
        }
      }, {
        key: "scale",
        value: function scale(e, t, n) {
          var s = t[0],
            r = t[1],
            a = t[2],
            i = t[3],
            c = n[0],
            y = n[1];
          return e[0] = s * c, e[1] = r * c, e[2] = a * y, e[3] = i * y, e;
        }
      }, {
        key: "fromRotation",
        value: function fromRotation(e, t) {
          var n = Math.sin(t),
            s = Math.cos(t);
          return e[0] = s, e[1] = n, e[2] = -n, e[3] = s, e;
        }
      }, {
        key: "fromScaling",
        value: function fromScaling(e, t) {
          return e[0] = t[0], e[1] = 0, e[2] = 0, e[3] = t[1], e;
        }
      }, {
        key: "frob",
        value: function frob(e) {
          return Math.sqrt(e[0] * e[0] + e[1] * e[1] + e[2] * e[2] + e[3] * e[3]);
        }
      }, {
        key: "multiplyScalar",
        value: function multiplyScalar(e, t, n) {
          return e[0] = t[0] * n, e[1] = t[1] * n, e[2] = t[2] * n, e[3] = t[3] * n, e;
        }
      }, {
        key: "multiplyScalarAndAdd",
        value: function multiplyScalarAndAdd(e, t, n, s) {
          return e[0] = t[0] + n[0] * s, e[1] = t[1] + n[1] * s, e[2] = t[2] + n[2] * s, e[3] = t[3] + n[3] * s, e;
        }
      }, {
        key: "LDU",
        value: function LDU(e, t, n, s) {
          return e[2] = s[2] / s[0], n[0] = s[0], n[1] = s[1], n[3] = s[3] - e[2] * n[1], [e, t, n];
        }
      }, {
        key: "exactEquals",
        value: function exactEquals(e, t) {
          return e[0] === t[0] && e[1] === t[1] && e[2] === t[2] && e[3] === t[3];
        }
      }, {
        key: "equals",
        value: function equals(e, t) {
          var n = e[0],
            s = e[1],
            r = e[2],
            a = e[3],
            i = t[0],
            c = t[1],
            y = t[2],
            d = t[3];
          return Math.abs(n - i) <= 1e-6 * Math.max(1, Math.abs(n), Math.abs(i)) && Math.abs(s - c) <= 1e-6 * Math.max(1, Math.abs(s), Math.abs(c)) && Math.abs(r - y) <= 1e-6 * Math.max(1, Math.abs(r), Math.abs(y)) && Math.abs(a - d) <= 1e-6 * Math.max(1, Math.abs(a), Math.abs(d));
        }
      }, {
        key: "str",
        value: function str(e) {
          return "Mat2(".concat(e.join(", "), ")");
        }
      }]);
    }(/*#__PURE__*/_wrapNativeSuper(Float32Array));
  ee = new WeakMap(), G(C, ee, new Float32Array([1, 0, 0, 1]));
  var u = C;
  u.prototype.mul = u.prototype.multiply;
  u.mul = u.multiply;
  u.sub = u.subtract;
  var te,
    $ = /*#__PURE__*/function (_Float32Array2) {
      function $() {
        var _this2;
        _classCallCheck(this, $);
        for (var _len3 = arguments.length, e = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          e[_key3] = arguments[_key3];
        }
        switch (e.length) {
          case 6:
            _this2 = _callSuper(this, $, [e]);
            break;
          case 2:
            _this2 = _callSuper(this, $, [e[0], e[1], 6]);
            break;
          case 1:
            var t = e[0];
            t === void 0 ? _this2 = _callSuper(this, $, [w($, te)]) : typeof t == "number" ? _this2 = _callSuper(this, $, [[t, t, t, t, t, t]]) : _this2 = _callSuper(this, $, [t, 0, 6]);
            break;
          default:
            _this2 = _callSuper(this, $, [w($, te)]);
            break;
        }
        return _assertThisInitialized(_this2);
      }
      _inherits($, _Float32Array2);
      return _createClass($, [{
        key: "str",
        get: function get() {
          return $.str(this);
        }
      }, {
        key: "copy",
        value: function copy(e) {
          return this.set(e), this;
        }
      }, {
        key: "identity",
        value: function identity() {
          return this.set(w($, te)), this;
        }
      }, {
        key: "multiply",
        value: function multiply(e) {
          return $.multiply(this, this, e);
        }
      }, {
        key: "mul",
        value: function mul(e) {
          return this;
        }
      }, {
        key: "translate",
        value: function translate(e) {
          return $.translate(this, this, e);
        }
      }, {
        key: "rotate",
        value: function rotate(e) {
          return $.rotate(this, this, e);
        }
      }, {
        key: "scale",
        value: function scale(e) {
          return $.scale(this, this, e);
        }
      }], [{
        key: "BYTE_LENGTH",
        get: function get() {
          return 6 * Float32Array.BYTES_PER_ELEMENT;
        }
      }, {
        key: "create",
        value: function create() {
          return new $();
        }
      }, {
        key: "clone",
        value: function clone(e) {
          return new $(e);
        }
      }, {
        key: "copy",
        value: function copy(e, t) {
          return e[0] = t[0], e[1] = t[1], e[2] = t[2], e[3] = t[3], e[4] = t[4], e[5] = t[5], e;
        }
      }, {
        key: "fromValues",
        value: function fromValues() {
          for (var _len4 = arguments.length, e = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            e[_key4] = arguments[_key4];
          }
          return _construct($, e);
        }
      }, {
        key: "set",
        value: function set(e) {
          return e[0] = arguments.length <= 1 ? undefined : arguments[1], e[1] = arguments.length <= 2 ? undefined : arguments[2], e[2] = arguments.length <= 3 ? undefined : arguments[3], e[3] = arguments.length <= 4 ? undefined : arguments[4], e[4] = arguments.length <= 5 ? undefined : arguments[5], e[5] = arguments.length <= 6 ? undefined : arguments[6], e;
        }
      }, {
        key: "identity",
        value: function identity(e) {
          return e[0] = 1, e[1] = 0, e[2] = 0, e[3] = 1, e[4] = 0, e[5] = 0, e;
        }
      }, {
        key: "invert",
        value: function invert(e, t) {
          var n = t[0],
            s = t[1],
            r = t[2],
            a = t[3],
            i = t[4],
            c = t[5],
            y = n * a - s * r;
          return y ? (y = 1 / y, e[0] = a * y, e[1] = -s * y, e[2] = -r * y, e[3] = n * y, e[4] = (r * c - a * i) * y, e[5] = (s * i - n * c) * y, e) : null;
        }
      }, {
        key: "determinant",
        value: function determinant(e) {
          return e[0] * e[3] - e[1] * e[2];
        }
      }, {
        key: "add",
        value: function add(e, t, n) {
          return e[0] = t[0] + n[0], e[1] = t[1] + n[1], e[2] = t[2] + n[2], e[3] = t[3] + n[3], e[4] = t[4] + n[4], e[5] = t[5] + n[5], e;
        }
      }, {
        key: "subtract",
        value: function subtract(e, t, n) {
          return e[0] = t[0] - n[0], e[1] = t[1] - n[1], e[2] = t[2] - n[2], e[3] = t[3] - n[3], e[4] = t[4] - n[4], e[5] = t[5] - n[5], e;
        }
      }, {
        key: "sub",
        value: function sub(e, t, n) {
          return e;
        }
      }, {
        key: "multiply",
        value: function multiply(e, t, n) {
          var s = t[0],
            r = t[1],
            a = t[2],
            i = t[3],
            c = t[4],
            y = t[5],
            d = n[0],
            l = n[1],
            L = n[2],
            k = n[3],
            h = n[4],
            b = n[5];
          return e[0] = s * d + a * l, e[1] = r * d + i * l, e[2] = s * L + a * k, e[3] = r * L + i * k, e[4] = s * h + a * b + c, e[5] = r * h + i * b + y, e;
        }
      }, {
        key: "mul",
        value: function mul(e, t, n) {
          return e;
        }
      }, {
        key: "translate",
        value: function translate(e, t, n) {
          var s = t[0],
            r = t[1],
            a = t[2],
            i = t[3],
            c = t[4],
            y = t[5],
            d = n[0],
            l = n[1];
          return e[0] = s, e[1] = r, e[2] = a, e[3] = i, e[4] = s * d + a * l + c, e[5] = r * d + i * l + y, e;
        }
      }, {
        key: "rotate",
        value: function rotate(e, t, n) {
          var s = t[0],
            r = t[1],
            a = t[2],
            i = t[3],
            c = t[4],
            y = t[5],
            d = Math.sin(n),
            l = Math.cos(n);
          return e[0] = s * l + a * d, e[1] = r * l + i * d, e[2] = s * -d + a * l, e[3] = r * -d + i * l, e[4] = c, e[5] = y, e;
        }
      }, {
        key: "scale",
        value: function scale(e, t, n) {
          var s = t[0],
            r = t[1],
            a = t[2],
            i = t[3],
            c = t[4],
            y = t[5],
            d = n[0],
            l = n[1];
          return e[0] = s * d, e[1] = r * d, e[2] = a * l, e[3] = i * l, e[4] = c, e[5] = y, e;
        }
      }, {
        key: "fromTranslation",
        value: function fromTranslation(e, t) {
          return e[0] = 1, e[1] = 0, e[2] = 0, e[3] = 1, e[4] = t[0], e[5] = t[1], e;
        }
      }, {
        key: "fromRotation",
        value: function fromRotation(e, t) {
          var n = Math.sin(t),
            s = Math.cos(t);
          return e[0] = s, e[1] = n, e[2] = -n, e[3] = s, e[4] = 0, e[5] = 0, e;
        }
      }, {
        key: "fromScaling",
        value: function fromScaling(e, t) {
          return e[0] = t[0], e[1] = 0, e[2] = 0, e[3] = t[1], e[4] = 0, e[5] = 0, e;
        }
      }, {
        key: "frob",
        value: function frob(e) {
          return Math.sqrt(e[0] * e[0] + e[1] * e[1] + e[2] * e[2] + e[3] * e[3] + e[4] * e[4] + e[5] * e[5] + 1);
        }
      }, {
        key: "multiplyScalar",
        value: function multiplyScalar(e, t, n) {
          return e[0] = t[0] * n, e[1] = t[1] * n, e[2] = t[2] * n, e[3] = t[3] * n, e[4] = t[4] * n, e[5] = t[5] * n, e;
        }
      }, {
        key: "multiplyScalarAndAdd",
        value: function multiplyScalarAndAdd(e, t, n, s) {
          return e[0] = t[0] + n[0] * s, e[1] = t[1] + n[1] * s, e[2] = t[2] + n[2] * s, e[3] = t[3] + n[3] * s, e[4] = t[4] + n[4] * s, e[5] = t[5] + n[5] * s, e;
        }
      }, {
        key: "exactEquals",
        value: function exactEquals(e, t) {
          return e[0] === t[0] && e[1] === t[1] && e[2] === t[2] && e[3] === t[3] && e[4] === t[4] && e[5] === t[5];
        }
      }, {
        key: "equals",
        value: function equals(e, t) {
          var n = e[0],
            s = e[1],
            r = e[2],
            a = e[3],
            i = e[4],
            c = e[5],
            y = t[0],
            d = t[1],
            l = t[2],
            L = t[3],
            k = t[4],
            h = t[5];
          return Math.abs(n - y) <= 1e-6 * Math.max(1, Math.abs(n), Math.abs(y)) && Math.abs(s - d) <= 1e-6 * Math.max(1, Math.abs(s), Math.abs(d)) && Math.abs(r - l) <= 1e-6 * Math.max(1, Math.abs(r), Math.abs(l)) && Math.abs(a - L) <= 1e-6 * Math.max(1, Math.abs(a), Math.abs(L)) && Math.abs(i - k) <= 1e-6 * Math.max(1, Math.abs(i), Math.abs(k)) && Math.abs(c - h) <= 1e-6 * Math.max(1, Math.abs(c), Math.abs(h));
        }
      }, {
        key: "str",
        value: function str(e) {
          return "Mat2d(".concat(e.join(", "), ")");
        }
      }]);
    }(/*#__PURE__*/_wrapNativeSuper(Float32Array));
  te = new WeakMap(), G($, te, new Float32Array([1, 0, 0, 1, 0, 0]));
  var _ = $;
  _.mul = _.multiply;
  _.sub = _.subtract;
  var ne,
    X = /*#__PURE__*/function (_Float32Array3) {
      function X() {
        var _this3;
        _classCallCheck(this, X);
        for (var _len5 = arguments.length, e = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
          e[_key5] = arguments[_key5];
        }
        switch (e.length) {
          case 9:
            _this3 = _callSuper(this, X, [e]);
            break;
          case 2:
            _this3 = _callSuper(this, X, [e[0], e[1], 9]);
            break;
          case 1:
            var t = e[0];
            t === void 0 ? _this3 = _callSuper(this, X, [w(X, ne)]) : typeof t == "number" ? _this3 = _callSuper(this, X, [[t, t, t, t, t, t, t, t, t]]) : _this3 = _callSuper(this, X, [t, 0, 9]);
            break;
          default:
            _this3 = _callSuper(this, X, [w(X, ne)]);
            break;
        }
        return _assertThisInitialized(_this3);
      }
      _inherits(X, _Float32Array3);
      return _createClass(X, [{
        key: "str",
        get: function get() {
          return X.str(this);
        }
      }, {
        key: "copy",
        value: function copy(e) {
          return this.set(e), this;
        }
      }, {
        key: "identity",
        value: function identity() {
          return this.set(w(X, ne)), this;
        }
      }, {
        key: "multiply",
        value: function multiply(e) {
          return X.multiply(this, this, e);
        }
      }, {
        key: "mul",
        value: function mul(e) {
          return this;
        }
      }, {
        key: "transpose",
        value: function transpose() {
          return X.transpose(this, this);
        }
      }, {
        key: "invert",
        value: function invert() {
          return X.invert(this, this);
        }
      }, {
        key: "translate",
        value: function translate(e) {
          return X.translate(this, this, e);
        }
      }, {
        key: "rotate",
        value: function rotate(e) {
          return X.rotate(this, this, e);
        }
      }, {
        key: "scale",
        value: function scale(e) {
          return X.scale(this, this, e);
        }
      }], [{
        key: "BYTE_LENGTH",
        get: function get() {
          return 9 * Float32Array.BYTES_PER_ELEMENT;
        }
      }, {
        key: "create",
        value: function create() {
          return new X();
        }
      }, {
        key: "clone",
        value: function clone(e) {
          return new X(e);
        }
      }, {
        key: "copy",
        value: function copy(e, t) {
          return e[0] = t[0], e[1] = t[1], e[2] = t[2], e[3] = t[3], e[4] = t[4], e[5] = t[5], e[6] = t[6], e[7] = t[7], e[8] = t[8], e;
        }
      }, {
        key: "fromValues",
        value: function fromValues() {
          for (var _len6 = arguments.length, e = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
            e[_key6] = arguments[_key6];
          }
          return _construct(X, e);
        }
      }, {
        key: "set",
        value: function set(e) {
          return e[0] = arguments.length <= 1 ? undefined : arguments[1], e[1] = arguments.length <= 2 ? undefined : arguments[2], e[2] = arguments.length <= 3 ? undefined : arguments[3], e[3] = arguments.length <= 4 ? undefined : arguments[4], e[4] = arguments.length <= 5 ? undefined : arguments[5], e[5] = arguments.length <= 6 ? undefined : arguments[6], e[6] = arguments.length <= 7 ? undefined : arguments[7], e[7] = arguments.length <= 8 ? undefined : arguments[8], e[8] = arguments.length <= 9 ? undefined : arguments[9], e;
        }
      }, {
        key: "identity",
        value: function identity(e) {
          return e[0] = 1, e[1] = 0, e[2] = 0, e[3] = 0, e[4] = 1, e[5] = 0, e[6] = 0, e[7] = 0, e[8] = 1, e;
        }
      }, {
        key: "transpose",
        value: function transpose(e, t) {
          if (e === t) {
            var n = t[1],
              s = t[2],
              r = t[5];
            e[1] = t[3], e[2] = t[6], e[3] = n, e[5] = t[7], e[6] = s, e[7] = r;
          } else e[0] = t[0], e[1] = t[3], e[2] = t[6], e[3] = t[1], e[4] = t[4], e[5] = t[7], e[6] = t[2], e[7] = t[5], e[8] = t[8];
          return e;
        }
      }, {
        key: "invert",
        value: function invert(e, t) {
          var n = t[0],
            s = t[1],
            r = t[2],
            a = t[3],
            i = t[4],
            c = t[5],
            y = t[6],
            d = t[7],
            l = t[8],
            L = l * i - c * d,
            k = -l * a + c * y,
            h = d * a - i * y,
            b = n * L + s * k + r * h;
          return b ? (b = 1 / b, e[0] = L * b, e[1] = (-l * s + r * d) * b, e[2] = (c * s - r * i) * b, e[3] = k * b, e[4] = (l * n - r * y) * b, e[5] = (-c * n + r * a) * b, e[6] = h * b, e[7] = (-d * n + s * y) * b, e[8] = (i * n - s * a) * b, e) : null;
        }
      }, {
        key: "adjoint",
        value: function adjoint(e, t) {
          var n = t[0],
            s = t[1],
            r = t[2],
            a = t[3],
            i = t[4],
            c = t[5],
            y = t[6],
            d = t[7],
            l = t[8];
          return e[0] = i * l - c * d, e[1] = r * d - s * l, e[2] = s * c - r * i, e[3] = c * y - a * l, e[4] = n * l - r * y, e[5] = r * a - n * c, e[6] = a * d - i * y, e[7] = s * y - n * d, e[8] = n * i - s * a, e;
        }
      }, {
        key: "determinant",
        value: function determinant(e) {
          var t = e[0],
            n = e[1],
            s = e[2],
            r = e[3],
            a = e[4],
            i = e[5],
            c = e[6],
            y = e[7],
            d = e[8];
          return t * (d * a - i * y) + n * (-d * r + i * c) + s * (y * r - a * c);
        }
      }, {
        key: "add",
        value: function add(e, t, n) {
          return e[0] = t[0] + n[0], e[1] = t[1] + n[1], e[2] = t[2] + n[2], e[3] = t[3] + n[3], e[4] = t[4] + n[4], e[5] = t[5] + n[5], e[6] = t[6] + n[6], e[7] = t[7] + n[7], e[8] = t[8] + n[8], e;
        }
      }, {
        key: "subtract",
        value: function subtract(e, t, n) {
          return e[0] = t[0] - n[0], e[1] = t[1] - n[1], e[2] = t[2] - n[2], e[3] = t[3] - n[3], e[4] = t[4] - n[4], e[5] = t[5] - n[5], e[6] = t[6] - n[6], e[7] = t[7] - n[7], e[8] = t[8] - n[8], e;
        }
      }, {
        key: "sub",
        value: function sub(e, t, n) {
          return e;
        }
      }, {
        key: "multiply",
        value: function multiply(e, t, n) {
          var s = t[0],
            r = t[1],
            a = t[2],
            i = t[3],
            c = t[4],
            y = t[5],
            d = t[6],
            l = t[7],
            L = t[8],
            k = n[0],
            h = n[1],
            b = n[2];
          return e[0] = k * s + h * i + b * d, e[1] = k * r + h * c + b * l, e[2] = k * a + h * y + b * L, k = n[3], h = n[4], b = n[5], e[3] = k * s + h * i + b * d, e[4] = k * r + h * c + b * l, e[5] = k * a + h * y + b * L, k = n[6], h = n[7], b = n[8], e[6] = k * s + h * i + b * d, e[7] = k * r + h * c + b * l, e[8] = k * a + h * y + b * L, e;
        }
      }, {
        key: "mul",
        value: function mul(e, t, n) {
          return e;
        }
      }, {
        key: "translate",
        value: function translate(e, t, n) {
          var s = t[0],
            r = t[1],
            a = t[2],
            i = t[3],
            c = t[4],
            y = t[5],
            d = t[6],
            l = t[7],
            L = t[8],
            k = n[0],
            h = n[1];
          return e[0] = s, e[1] = r, e[2] = a, e[3] = i, e[4] = c, e[5] = y, e[6] = k * s + h * i + d, e[7] = k * r + h * c + l, e[8] = k * a + h * y + L, e;
        }
      }, {
        key: "rotate",
        value: function rotate(e, t, n) {
          var s = t[0],
            r = t[1],
            a = t[2],
            i = t[3],
            c = t[4],
            y = t[5],
            d = t[6],
            l = t[7],
            L = t[8],
            k = Math.sin(n),
            h = Math.cos(n);
          return e[0] = h * s + k * i, e[1] = h * r + k * c, e[2] = h * a + k * y, e[3] = h * i - k * s, e[4] = h * c - k * r, e[5] = h * y - k * a, e[6] = d, e[7] = l, e[8] = L, e;
        }
      }, {
        key: "scale",
        value: function scale(e, t, n) {
          var s = n[0],
            r = n[1];
          return e[0] = s * t[0], e[1] = s * t[1], e[2] = s * t[2], e[3] = r * t[3], e[4] = r * t[4], e[5] = r * t[5], e[6] = t[6], e[7] = t[7], e[8] = t[8], e;
        }
      }, {
        key: "fromTranslation",
        value: function fromTranslation(e, t) {
          return e[0] = 1, e[1] = 0, e[2] = 0, e[3] = 0, e[4] = 1, e[5] = 0, e[6] = t[0], e[7] = t[1], e[8] = 1, e;
        }
      }, {
        key: "fromRotation",
        value: function fromRotation(e, t) {
          var n = Math.sin(t),
            s = Math.cos(t);
          return e[0] = s, e[1] = n, e[2] = 0, e[3] = -n, e[4] = s, e[5] = 0, e[6] = 0, e[7] = 0, e[8] = 1, e;
        }
      }, {
        key: "fromScaling",
        value: function fromScaling(e, t) {
          return e[0] = t[0], e[1] = 0, e[2] = 0, e[3] = 0, e[4] = t[1], e[5] = 0, e[6] = 0, e[7] = 0, e[8] = 1, e;
        }
      }, {
        key: "fromMat2d",
        value: function fromMat2d(e, t) {
          return e[0] = t[0], e[1] = t[1], e[2] = 0, e[3] = t[2], e[4] = t[3], e[5] = 0, e[6] = t[4], e[7] = t[5], e[8] = 1, e;
        }
      }, {
        key: "fromQuat",
        value: function fromQuat(e, t) {
          var n = t[0],
            s = t[1],
            r = t[2],
            a = t[3],
            i = n + n,
            c = s + s,
            y = r + r,
            d = n * i,
            l = s * i,
            L = s * c,
            k = r * i,
            h = r * c,
            b = r * y,
            x = a * i,
            M = a * c,
            T = a * y;
          return e[0] = 1 - L - b, e[3] = l - T, e[6] = k + M, e[1] = l + T, e[4] = 1 - d - b, e[7] = h - x, e[2] = k - M, e[5] = h + x, e[8] = 1 - d - L, e;
        }
      }, {
        key: "fromMat4",
        value: function fromMat4(e, t) {
          return e[0] = t[0], e[1] = t[1], e[2] = t[2], e[3] = t[4], e[4] = t[5], e[5] = t[6], e[6] = t[8], e[7] = t[9], e[8] = t[10], e;
        }
      }, {
        key: "normalFromMat4",
        value: function normalFromMat4(e, t) {
          var n = t[0],
            s = t[1],
            r = t[2],
            a = t[4],
            i = t[5],
            c = t[6],
            y = t[8],
            d = t[9],
            l = t[10];
          return e[0] = i * l - c * d, e[1] = r * d - s * l, e[2] = s * c - r * i, e[3] = c * y - a * l, e[4] = n * l - r * y, e[5] = r * a - n * c, e[6] = a * d - i * y, e[7] = s * y - n * d, e[8] = n * i - s * a, e;
        }
      }, {
        key: "normalFromMat4Fast",
        value: function normalFromMat4Fast(e, t) {
          return e;
        }
      }, {
        key: "projection",
        value: function projection(e, t, n) {
          return e[0] = 2 / t, e[1] = 0, e[2] = 0, e[3] = 0, e[4] = -2 / n, e[5] = 0, e[6] = -1, e[7] = 1, e[8] = 1, e;
        }
      }, {
        key: "frob",
        value: function frob(e) {
          return Math.sqrt(e[0] * e[0] + e[1] * e[1] + e[2] * e[2] + e[3] * e[3] + e[4] * e[4] + e[5] * e[5] + e[6] * e[6] + e[7] * e[7] + e[8] * e[8]);
        }
      }, {
        key: "multiplyScalar",
        value: function multiplyScalar(e, t, n) {
          return e[0] = t[0] * n, e[1] = t[1] * n, e[2] = t[2] * n, e[3] = t[3] * n, e[4] = t[4] * n, e[5] = t[5] * n, e[6] = t[6] * n, e[7] = t[7] * n, e[8] = t[8] * n, e;
        }
      }, {
        key: "multiplyScalarAndAdd",
        value: function multiplyScalarAndAdd(e, t, n, s) {
          return e[0] = t[0] + n[0] * s, e[1] = t[1] + n[1] * s, e[2] = t[2] + n[2] * s, e[3] = t[3] + n[3] * s, e[4] = t[4] + n[4] * s, e[5] = t[5] + n[5] * s, e[6] = t[6] + n[6] * s, e[7] = t[7] + n[7] * s, e[8] = t[8] + n[8] * s, e;
        }
      }, {
        key: "exactEquals",
        value: function exactEquals(e, t) {
          return e[0] === t[0] && e[1] === t[1] && e[2] === t[2] && e[3] === t[3] && e[4] === t[4] && e[5] === t[5] && e[6] === t[6] && e[7] === t[7] && e[8] === t[8];
        }
      }, {
        key: "equals",
        value: function equals(e, t) {
          var n = e[0],
            s = e[1],
            r = e[2],
            a = e[3],
            i = e[4],
            c = e[5],
            y = e[6],
            d = e[7],
            l = e[8],
            L = t[0],
            k = t[1],
            h = t[2],
            b = t[3],
            x = t[4],
            M = t[5],
            T = t[6],
            R = t[7],
            m = t[8];
          return Math.abs(n - L) <= 1e-6 * Math.max(1, Math.abs(n), Math.abs(L)) && Math.abs(s - k) <= 1e-6 * Math.max(1, Math.abs(s), Math.abs(k)) && Math.abs(r - h) <= 1e-6 * Math.max(1, Math.abs(r), Math.abs(h)) && Math.abs(a - b) <= 1e-6 * Math.max(1, Math.abs(a), Math.abs(b)) && Math.abs(i - x) <= 1e-6 * Math.max(1, Math.abs(i), Math.abs(x)) && Math.abs(c - M) <= 1e-6 * Math.max(1, Math.abs(c), Math.abs(M)) && Math.abs(y - T) <= 1e-6 * Math.max(1, Math.abs(y), Math.abs(T)) && Math.abs(d - R) <= 1e-6 * Math.max(1, Math.abs(d), Math.abs(R)) && Math.abs(l - m) <= 1e-6 * Math.max(1, Math.abs(l), Math.abs(m));
        }
      }, {
        key: "str",
        value: function str(e) {
          return "Mat3(".concat(e.join(", "), ")");
        }
      }]);
    }(/*#__PURE__*/_wrapNativeSuper(Float32Array));
  ne = new WeakMap(), G(X, ne, new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1]));
  var J = X;
  J.prototype.mul = J.prototype.multiply;
  J.mul = J.multiply;
  J.sub = J.subtract;
  J.normalFromMat4Fast = J.normalFromMat4;
  var se,
    H,
    A = /*#__PURE__*/function (_Float32Array4) {
      function A() {
        var _this4;
        _classCallCheck(this, A);
        for (var _len7 = arguments.length, e = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
          e[_key7] = arguments[_key7];
        }
        switch (e.length) {
          case 16:
            _this4 = _callSuper(this, A, [e]);
            break;
          case 2:
            _this4 = _callSuper(this, A, [e[0], e[1], 16]);
            break;
          case 1:
            var t = e[0];
            t === void 0 ? _this4 = _callSuper(this, A, [w(A, se)]) : typeof t == "number" ? _this4 = _callSuper(this, A, [[t, t, t, t, t, t, t, t, t, t, t, t, t, t, t, t]]) : _this4 = _callSuper(this, A, [t, 0, 16]);
            break;
          default:
            _this4 = _callSuper(this, A, [w(A, se)]);
            break;
        }
        return _assertThisInitialized(_this4);
      }
      _inherits(A, _Float32Array4);
      return _createClass(A, [{
        key: "str",
        get: function get() {
          return A.str(this);
        }
      }, {
        key: "copy",
        value: function copy(e) {
          return this.set(e), this;
        }
      }, {
        key: "identity",
        value: function identity() {
          return this.set(w(A, se)), this;
        }
      }, {
        key: "multiply",
        value: function multiply(e) {
          return A.multiply(this, this, e);
        }
      }, {
        key: "mul",
        value: function mul(e) {
          return this;
        }
      }, {
        key: "transpose",
        value: function transpose() {
          return A.transpose(this, this);
        }
      }, {
        key: "invert",
        value: function invert() {
          return A.invert(this, this);
        }
      }, {
        key: "translate",
        value: function translate(e) {
          return A.translate(this, this, e);
        }
      }, {
        key: "rotate",
        value: function rotate(e, t) {
          return A.rotate(this, this, e, t);
        }
      }, {
        key: "scale",
        value: function scale(e) {
          return A.scale(this, this, e);
        }
      }, {
        key: "rotateX",
        value: function rotateX(e) {
          return A.rotateX(this, this, e);
        }
      }, {
        key: "rotateY",
        value: function rotateY(e) {
          return A.rotateY(this, this, e);
        }
      }, {
        key: "rotateZ",
        value: function rotateZ(e) {
          return A.rotateZ(this, this, e);
        }
      }, {
        key: "perspectiveNO",
        value: function perspectiveNO(e, t, n, s) {
          return A.perspectiveNO(this, e, t, n, s);
        }
      }, {
        key: "perspectiveZO",
        value: function perspectiveZO(e, t, n, s) {
          return A.perspectiveZO(this, e, t, n, s);
        }
      }, {
        key: "orthoNO",
        value: function orthoNO(e, t, n, s, r, a) {
          return A.orthoNO(this, e, t, n, s, r, a);
        }
      }, {
        key: "orthoZO",
        value: function orthoZO(e, t, n, s, r, a) {
          return A.orthoZO(this, e, t, n, s, r, a);
        }
      }], [{
        key: "BYTE_LENGTH",
        get: function get() {
          return 16 * Float32Array.BYTES_PER_ELEMENT;
        }
      }, {
        key: "create",
        value: function create() {
          return new A();
        }
      }, {
        key: "clone",
        value: function clone(e) {
          return new A(e);
        }
      }, {
        key: "copy",
        value: function copy(e, t) {
          return e[0] = t[0], e[1] = t[1], e[2] = t[2], e[3] = t[3], e[4] = t[4], e[5] = t[5], e[6] = t[6], e[7] = t[7], e[8] = t[8], e[9] = t[9], e[10] = t[10], e[11] = t[11], e[12] = t[12], e[13] = t[13], e[14] = t[14], e[15] = t[15], e;
        }
      }, {
        key: "fromValues",
        value: function fromValues() {
          for (var _len8 = arguments.length, e = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
            e[_key8] = arguments[_key8];
          }
          return _construct(A, e);
        }
      }, {
        key: "set",
        value: function set(e) {
          return e[0] = arguments.length <= 1 ? undefined : arguments[1], e[1] = arguments.length <= 2 ? undefined : arguments[2], e[2] = arguments.length <= 3 ? undefined : arguments[3], e[3] = arguments.length <= 4 ? undefined : arguments[4], e[4] = arguments.length <= 5 ? undefined : arguments[5], e[5] = arguments.length <= 6 ? undefined : arguments[6], e[6] = arguments.length <= 7 ? undefined : arguments[7], e[7] = arguments.length <= 8 ? undefined : arguments[8], e[8] = arguments.length <= 9 ? undefined : arguments[9], e[9] = arguments.length <= 10 ? undefined : arguments[10], e[10] = arguments.length <= 11 ? undefined : arguments[11], e[11] = arguments.length <= 12 ? undefined : arguments[12], e[12] = arguments.length <= 13 ? undefined : arguments[13], e[13] = arguments.length <= 14 ? undefined : arguments[14], e[14] = arguments.length <= 15 ? undefined : arguments[15], e[15] = arguments.length <= 16 ? undefined : arguments[16], e;
        }
      }, {
        key: "identity",
        value: function identity(e) {
          return e[0] = 1, e[1] = 0, e[2] = 0, e[3] = 0, e[4] = 0, e[5] = 1, e[6] = 0, e[7] = 0, e[8] = 0, e[9] = 0, e[10] = 1, e[11] = 0, e[12] = 0, e[13] = 0, e[14] = 0, e[15] = 1, e;
        }
      }, {
        key: "transpose",
        value: function transpose(e, t) {
          if (e === t) {
            var n = t[1],
              s = t[2],
              r = t[3],
              a = t[6],
              i = t[7],
              c = t[11];
            e[1] = t[4], e[2] = t[8], e[3] = t[12], e[4] = n, e[6] = t[9], e[7] = t[13], e[8] = s, e[9] = a, e[11] = t[14], e[12] = r, e[13] = i, e[14] = c;
          } else e[0] = t[0], e[1] = t[4], e[2] = t[8], e[3] = t[12], e[4] = t[1], e[5] = t[5], e[6] = t[9], e[7] = t[13], e[8] = t[2], e[9] = t[6], e[10] = t[10], e[11] = t[14], e[12] = t[3], e[13] = t[7], e[14] = t[11], e[15] = t[15];
          return e;
        }
      }, {
        key: "invert",
        value: function invert(e, t) {
          var n = t[0],
            s = t[1],
            r = t[2],
            a = t[3],
            i = t[4],
            c = t[5],
            y = t[6],
            d = t[7],
            l = t[8],
            L = t[9],
            k = t[10],
            h = t[11],
            b = t[12],
            x = t[13],
            M = t[14],
            T = t[15],
            R = n * c - s * i,
            m = n * y - r * i,
            o = n * d - a * i,
            g = s * y - r * c,
            z = s * d - a * c,
            S = r * d - a * y,
            B = l * x - L * b,
            N = l * M - k * b,
            Q = l * T - h * b,
            P = L * M - k * x,
            O = L * T - h * x,
            Y = k * T - h * M,
            I = R * Y - m * O + o * P + g * Q - z * N + S * B;
          return I ? (I = 1 / I, e[0] = (c * Y - y * O + d * P) * I, e[1] = (r * O - s * Y - a * P) * I, e[2] = (x * S - M * z + T * g) * I, e[3] = (k * z - L * S - h * g) * I, e[4] = (y * Q - i * Y - d * N) * I, e[5] = (n * Y - r * Q + a * N) * I, e[6] = (M * o - b * S - T * m) * I, e[7] = (l * S - k * o + h * m) * I, e[8] = (i * O - c * Q + d * B) * I, e[9] = (s * Q - n * O - a * B) * I, e[10] = (b * z - x * o + T * R) * I, e[11] = (L * o - l * z - h * R) * I, e[12] = (c * N - i * P - y * B) * I, e[13] = (n * P - s * N + r * B) * I, e[14] = (x * m - b * g - M * R) * I, e[15] = (l * g - L * m + k * R) * I, e) : null;
        }
      }, {
        key: "adjoint",
        value: function adjoint(e, t) {
          var n = t[0],
            s = t[1],
            r = t[2],
            a = t[3],
            i = t[4],
            c = t[5],
            y = t[6],
            d = t[7],
            l = t[8],
            L = t[9],
            k = t[10],
            h = t[11],
            b = t[12],
            x = t[13],
            M = t[14],
            T = t[15],
            R = n * c - s * i,
            m = n * y - r * i,
            o = n * d - a * i,
            g = s * y - r * c,
            z = s * d - a * c,
            S = r * d - a * y,
            B = l * x - L * b,
            N = l * M - k * b,
            Q = l * T - h * b,
            P = L * M - k * x,
            O = L * T - h * x,
            Y = k * T - h * M;
          return e[0] = c * Y - y * O + d * P, e[1] = r * O - s * Y - a * P, e[2] = x * S - M * z + T * g, e[3] = k * z - L * S - h * g, e[4] = y * Q - i * Y - d * N, e[5] = n * Y - r * Q + a * N, e[6] = M * o - b * S - T * m, e[7] = l * S - k * o + h * m, e[8] = i * O - c * Q + d * B, e[9] = s * Q - n * O - a * B, e[10] = b * z - x * o + T * R, e[11] = L * o - l * z - h * R, e[12] = c * N - i * P - y * B, e[13] = n * P - s * N + r * B, e[14] = x * m - b * g - M * R, e[15] = l * g - L * m + k * R, e;
        }
      }, {
        key: "determinant",
        value: function determinant(e) {
          var t = e[0],
            n = e[1],
            s = e[2],
            r = e[3],
            a = e[4],
            i = e[5],
            c = e[6],
            y = e[7],
            d = e[8],
            l = e[9],
            L = e[10],
            k = e[11],
            h = e[12],
            b = e[13],
            x = e[14],
            M = e[15],
            T = t * i - n * a,
            R = t * c - s * a,
            m = n * c - s * i,
            o = d * b - l * h,
            g = d * x - L * h,
            z = l * x - L * b,
            S = t * z - n * g + s * o,
            B = a * z - i * g + c * o,
            N = d * m - l * R + L * T,
            Q = h * m - b * R + x * T;
          return y * S - r * B + M * N - k * Q;
        }
      }, {
        key: "multiply",
        value: function multiply(e, t, n) {
          var s = t[0],
            r = t[1],
            a = t[2],
            i = t[3],
            c = t[4],
            y = t[5],
            d = t[6],
            l = t[7],
            L = t[8],
            k = t[9],
            h = t[10],
            b = t[11],
            x = t[12],
            M = t[13],
            T = t[14],
            R = t[15],
            m = n[0],
            o = n[1],
            g = n[2],
            z = n[3];
          return e[0] = m * s + o * c + g * L + z * x, e[1] = m * r + o * y + g * k + z * M, e[2] = m * a + o * d + g * h + z * T, e[3] = m * i + o * l + g * b + z * R, m = n[4], o = n[5], g = n[6], z = n[7], e[4] = m * s + o * c + g * L + z * x, e[5] = m * r + o * y + g * k + z * M, e[6] = m * a + o * d + g * h + z * T, e[7] = m * i + o * l + g * b + z * R, m = n[8], o = n[9], g = n[10], z = n[11], e[8] = m * s + o * c + g * L + z * x, e[9] = m * r + o * y + g * k + z * M, e[10] = m * a + o * d + g * h + z * T, e[11] = m * i + o * l + g * b + z * R, m = n[12], o = n[13], g = n[14], z = n[15], e[12] = m * s + o * c + g * L + z * x, e[13] = m * r + o * y + g * k + z * M, e[14] = m * a + o * d + g * h + z * T, e[15] = m * i + o * l + g * b + z * R, e;
        }
      }, {
        key: "mul",
        value: function mul(e, t, n) {
          return e;
        }
      }, {
        key: "translate",
        value: function translate(e, t, n) {
          var s = n[0],
            r = n[1],
            a = n[2];
          if (t === e) e[12] = t[0] * s + t[4] * r + t[8] * a + t[12], e[13] = t[1] * s + t[5] * r + t[9] * a + t[13], e[14] = t[2] * s + t[6] * r + t[10] * a + t[14], e[15] = t[3] * s + t[7] * r + t[11] * a + t[15];else {
            var i = t[0],
              c = t[1],
              y = t[2],
              d = t[3],
              l = t[4],
              L = t[5],
              k = t[6],
              h = t[7],
              b = t[8],
              x = t[9],
              M = t[10],
              T = t[11];
            e[0] = i, e[1] = c, e[2] = y, e[3] = d, e[4] = l, e[5] = L, e[6] = k, e[7] = h, e[8] = b, e[9] = x, e[10] = M, e[11] = T, e[12] = i * s + l * r + b * a + t[12], e[13] = c * s + L * r + x * a + t[13], e[14] = y * s + k * r + M * a + t[14], e[15] = d * s + h * r + T * a + t[15];
          }
          return e;
        }
      }, {
        key: "scale",
        value: function scale(e, t, n) {
          var s = n[0],
            r = n[1],
            a = n[2];
          return e[0] = t[0] * s, e[1] = t[1] * s, e[2] = t[2] * s, e[3] = t[3] * s, e[4] = t[4] * r, e[5] = t[5] * r, e[6] = t[6] * r, e[7] = t[7] * r, e[8] = t[8] * a, e[9] = t[9] * a, e[10] = t[10] * a, e[11] = t[11] * a, e[12] = t[12], e[13] = t[13], e[14] = t[14], e[15] = t[15], e;
        }
      }, {
        key: "rotate",
        value: function rotate(e, t, n, s) {
          var r = s[0],
            a = s[1],
            i = s[2],
            c = Math.sqrt(r * r + a * a + i * i);
          if (c < 1e-6) return null;
          c = 1 / c, r *= c, a *= c, i *= c;
          var y = Math.sin(n),
            d = Math.cos(n),
            l = 1 - d,
            L = t[0],
            k = t[1],
            h = t[2],
            b = t[3],
            x = t[4],
            M = t[5],
            T = t[6],
            R = t[7],
            m = t[8],
            o = t[9],
            g = t[10],
            z = t[11],
            S = r * r * l + d,
            B = a * r * l + i * y,
            N = i * r * l - a * y,
            Q = r * a * l - i * y,
            P = a * a * l + d,
            O = i * a * l + r * y,
            Y = r * i * l + a * y,
            I = a * i * l - r * y,
            v = i * i * l + d;
          return e[0] = L * S + x * B + m * N, e[1] = k * S + M * B + o * N, e[2] = h * S + T * B + g * N, e[3] = b * S + R * B + z * N, e[4] = L * Q + x * P + m * O, e[5] = k * Q + M * P + o * O, e[6] = h * Q + T * P + g * O, e[7] = b * Q + R * P + z * O, e[8] = L * Y + x * I + m * v, e[9] = k * Y + M * I + o * v, e[10] = h * Y + T * I + g * v, e[11] = b * Y + R * I + z * v, t !== e && (e[12] = t[12], e[13] = t[13], e[14] = t[14], e[15] = t[15]), e;
        }
      }, {
        key: "rotateX",
        value: function rotateX(e, t, n) {
          var s = Math.sin(n),
            r = Math.cos(n),
            a = t[4],
            i = t[5],
            c = t[6],
            y = t[7],
            d = t[8],
            l = t[9],
            L = t[10],
            k = t[11];
          return t !== e && (e[0] = t[0], e[1] = t[1], e[2] = t[2], e[3] = t[3], e[12] = t[12], e[13] = t[13], e[14] = t[14], e[15] = t[15]), e[4] = a * r + d * s, e[5] = i * r + l * s, e[6] = c * r + L * s, e[7] = y * r + k * s, e[8] = d * r - a * s, e[9] = l * r - i * s, e[10] = L * r - c * s, e[11] = k * r - y * s, e;
        }
      }, {
        key: "rotateY",
        value: function rotateY(e, t, n) {
          var s = Math.sin(n),
            r = Math.cos(n),
            a = t[0],
            i = t[1],
            c = t[2],
            y = t[3],
            d = t[8],
            l = t[9],
            L = t[10],
            k = t[11];
          return t !== e && (e[4] = t[4], e[5] = t[5], e[6] = t[6], e[7] = t[7], e[12] = t[12], e[13] = t[13], e[14] = t[14], e[15] = t[15]), e[0] = a * r - d * s, e[1] = i * r - l * s, e[2] = c * r - L * s, e[3] = y * r - k * s, e[8] = a * s + d * r, e[9] = i * s + l * r, e[10] = c * s + L * r, e[11] = y * s + k * r, e;
        }
      }, {
        key: "rotateZ",
        value: function rotateZ(e, t, n) {
          var s = Math.sin(n),
            r = Math.cos(n),
            a = t[0],
            i = t[1],
            c = t[2],
            y = t[3],
            d = t[4],
            l = t[5],
            L = t[6],
            k = t[7];
          return t !== e && (e[8] = t[8], e[9] = t[9], e[10] = t[10], e[11] = t[11], e[12] = t[12], e[13] = t[13], e[14] = t[14], e[15] = t[15]), e[0] = a * r + d * s, e[1] = i * r + l * s, e[2] = c * r + L * s, e[3] = y * r + k * s, e[4] = d * r - a * s, e[5] = l * r - i * s, e[6] = L * r - c * s, e[7] = k * r - y * s, e;
        }
      }, {
        key: "fromTranslation",
        value: function fromTranslation(e, t) {
          return e[0] = 1, e[1] = 0, e[2] = 0, e[3] = 0, e[4] = 0, e[5] = 1, e[6] = 0, e[7] = 0, e[8] = 0, e[9] = 0, e[10] = 1, e[11] = 0, e[12] = t[0], e[13] = t[1], e[14] = t[2], e[15] = 1, e;
        }
      }, {
        key: "fromScaling",
        value: function fromScaling(e, t) {
          return e[0] = t[0], e[1] = 0, e[2] = 0, e[3] = 0, e[4] = 0, e[5] = t[1], e[6] = 0, e[7] = 0, e[8] = 0, e[9] = 0, e[10] = t[2], e[11] = 0, e[12] = 0, e[13] = 0, e[14] = 0, e[15] = 1, e;
        }
      }, {
        key: "fromRotation",
        value: function fromRotation(e, t, n) {
          var s = n[0],
            r = n[1],
            a = n[2],
            i = Math.sqrt(s * s + r * r + a * a);
          if (i < 1e-6) return null;
          i = 1 / i, s *= i, r *= i, a *= i;
          var c = Math.sin(t),
            y = Math.cos(t),
            d = 1 - y;
          return e[0] = s * s * d + y, e[1] = r * s * d + a * c, e[2] = a * s * d - r * c, e[3] = 0, e[4] = s * r * d - a * c, e[5] = r * r * d + y, e[6] = a * r * d + s * c, e[7] = 0, e[8] = s * a * d + r * c, e[9] = r * a * d - s * c, e[10] = a * a * d + y, e[11] = 0, e[12] = 0, e[13] = 0, e[14] = 0, e[15] = 1, e;
        }
      }, {
        key: "fromXRotation",
        value: function fromXRotation(e, t) {
          var n = Math.sin(t),
            s = Math.cos(t);
          return e[0] = 1, e[1] = 0, e[2] = 0, e[3] = 0, e[4] = 0, e[5] = s, e[6] = n, e[7] = 0, e[8] = 0, e[9] = -n, e[10] = s, e[11] = 0, e[12] = 0, e[13] = 0, e[14] = 0, e[15] = 1, e;
        }
      }, {
        key: "fromYRotation",
        value: function fromYRotation(e, t) {
          var n = Math.sin(t),
            s = Math.cos(t);
          return e[0] = s, e[1] = 0, e[2] = -n, e[3] = 0, e[4] = 0, e[5] = 1, e[6] = 0, e[7] = 0, e[8] = n, e[9] = 0, e[10] = s, e[11] = 0, e[12] = 0, e[13] = 0, e[14] = 0, e[15] = 1, e;
        }
      }, {
        key: "fromZRotation",
        value: function fromZRotation(e, t) {
          var n = Math.sin(t),
            s = Math.cos(t);
          return e[0] = s, e[1] = n, e[2] = 0, e[3] = 0, e[4] = -n, e[5] = s, e[6] = 0, e[7] = 0, e[8] = 0, e[9] = 0, e[10] = 1, e[11] = 0, e[12] = 0, e[13] = 0, e[14] = 0, e[15] = 1, e;
        }
      }, {
        key: "fromRotationTranslation",
        value: function fromRotationTranslation(e, t, n) {
          var s = t[0],
            r = t[1],
            a = t[2],
            i = t[3],
            c = s + s,
            y = r + r,
            d = a + a,
            l = s * c,
            L = s * y,
            k = s * d,
            h = r * y,
            b = r * d,
            x = a * d,
            M = i * c,
            T = i * y,
            R = i * d;
          return e[0] = 1 - (h + x), e[1] = L + R, e[2] = k - T, e[3] = 0, e[4] = L - R, e[5] = 1 - (l + x), e[6] = b + M, e[7] = 0, e[8] = k + T, e[9] = b - M, e[10] = 1 - (l + h), e[11] = 0, e[12] = n[0], e[13] = n[1], e[14] = n[2], e[15] = 1, e;
        }
      }, {
        key: "fromQuat2",
        value: function fromQuat2(e, t) {
          var n = -t[0],
            s = -t[1],
            r = -t[2],
            a = t[3],
            i = t[4],
            c = t[5],
            y = t[6],
            d = t[7],
            l = n * n + s * s + r * r + a * a;
          return l > 0 ? (w(A, H)[0] = (i * a + d * n + c * r - y * s) * 2 / l, w(A, H)[1] = (c * a + d * s + y * n - i * r) * 2 / l, w(A, H)[2] = (y * a + d * r + i * s - c * n) * 2 / l) : (w(A, H)[0] = (i * a + d * n + c * r - y * s) * 2, w(A, H)[1] = (c * a + d * s + y * n - i * r) * 2, w(A, H)[2] = (y * a + d * r + i * s - c * n) * 2), A.fromRotationTranslation(e, t, w(A, H)), e;
        }
      }, {
        key: "normalFromMat4",
        value: function normalFromMat4(e, t) {
          var n = t[0],
            s = t[1],
            r = t[2],
            a = t[4],
            i = t[5],
            c = t[6],
            y = t[8],
            d = t[9],
            l = t[10];
          return e[0] = i * l - c * d, e[1] = r * d - s * l, e[2] = s * c - r * i, e[3] = 0, e[4] = c * y - a * l, e[5] = n * l - r * y, e[6] = r * a - n * c, e[7] = 0, e[8] = a * d - i * y, e[9] = s * y - n * d, e[10] = n * i - s * a, e[11] = 0, e[12] = 0, e[13] = 0, e[14] = 0, e[15] = 1, e;
        }
      }, {
        key: "normalFromMat4Fast",
        value: function normalFromMat4Fast(e, t) {
          return e;
        }
      }, {
        key: "getTranslation",
        value: function getTranslation(e, t) {
          return e[0] = t[12], e[1] = t[13], e[2] = t[14], e;
        }
      }, {
        key: "getScaling",
        value: function getScaling(e, t) {
          var n = t[0],
            s = t[1],
            r = t[2],
            a = t[4],
            i = t[5],
            c = t[6],
            y = t[8],
            d = t[9],
            l = t[10];
          return e[0] = Math.sqrt(n * n + s * s + r * r), e[1] = Math.sqrt(a * a + i * i + c * c), e[2] = Math.sqrt(y * y + d * d + l * l), e;
        }
      }, {
        key: "getRotation",
        value: function getRotation(e, t) {
          A.getScaling(w(A, H), t);
          var n = 1 / w(A, H)[0],
            s = 1 / w(A, H)[1],
            r = 1 / w(A, H)[2],
            a = t[0] * n,
            i = t[1] * s,
            c = t[2] * r,
            y = t[4] * n,
            d = t[5] * s,
            l = t[6] * r,
            L = t[8] * n,
            k = t[9] * s,
            h = t[10] * r,
            b = a + d + h,
            x = 0;
          return b > 0 ? (x = Math.sqrt(b + 1) * 2, e[3] = .25 * x, e[0] = (l - k) / x, e[1] = (L - c) / x, e[2] = (i - y) / x) : a > d && a > h ? (x = Math.sqrt(1 + a - d - h) * 2, e[3] = (l - k) / x, e[0] = .25 * x, e[1] = (i + y) / x, e[2] = (L + c) / x) : d > h ? (x = Math.sqrt(1 + d - a - h) * 2, e[3] = (L - c) / x, e[0] = (i + y) / x, e[1] = .25 * x, e[2] = (l + k) / x) : (x = Math.sqrt(1 + h - a - d) * 2, e[3] = (i - y) / x, e[0] = (L + c) / x, e[1] = (l + k) / x, e[2] = .25 * x), e;
        }
      }, {
        key: "decompose",
        value: function decompose(e, t, n, s) {
          t[0] = s[12], t[1] = s[13], t[2] = s[14];
          var r = s[0],
            a = s[1],
            i = s[2],
            c = s[4],
            y = s[5],
            d = s[6],
            l = s[8],
            L = s[9],
            k = s[10];
          n[0] = Math.sqrt(r * r + a * a + i * i), n[1] = Math.sqrt(c * c + y * y + d * d), n[2] = Math.sqrt(l * l + L * L + k * k);
          var h = 1 / n[0],
            b = 1 / n[1],
            x = 1 / n[2],
            M = r * h,
            T = a * b,
            R = i * x,
            m = c * h,
            o = y * b,
            g = d * x,
            z = l * h,
            S = L * b,
            B = k * x,
            N = M + o + B,
            Q = 0;
          return N > 0 ? (Q = Math.sqrt(N + 1) * 2, e[3] = .25 * Q, e[0] = (g - S) / Q, e[1] = (z - R) / Q, e[2] = (T - m) / Q) : M > o && M > B ? (Q = Math.sqrt(1 + M - o - B) * 2, e[3] = (g - S) / Q, e[0] = .25 * Q, e[1] = (T + m) / Q, e[2] = (z + R) / Q) : o > B ? (Q = Math.sqrt(1 + o - M - B) * 2, e[3] = (z - R) / Q, e[0] = (T + m) / Q, e[1] = .25 * Q, e[2] = (g + S) / Q) : (Q = Math.sqrt(1 + B - M - o) * 2, e[3] = (T - m) / Q, e[0] = (z + R) / Q, e[1] = (g + S) / Q, e[2] = .25 * Q), e;
        }
      }, {
        key: "fromRotationTranslationScale",
        value: function fromRotationTranslationScale(e, t, n, s) {
          var r = t[0],
            a = t[1],
            i = t[2],
            c = t[3],
            y = r + r,
            d = a + a,
            l = i + i,
            L = r * y,
            k = r * d,
            h = r * l,
            b = a * d,
            x = a * l,
            M = i * l,
            T = c * y,
            R = c * d,
            m = c * l,
            o = s[0],
            g = s[1],
            z = s[2];
          return e[0] = (1 - (b + M)) * o, e[1] = (k + m) * o, e[2] = (h - R) * o, e[3] = 0, e[4] = (k - m) * g, e[5] = (1 - (L + M)) * g, e[6] = (x + T) * g, e[7] = 0, e[8] = (h + R) * z, e[9] = (x - T) * z, e[10] = (1 - (L + b)) * z, e[11] = 0, e[12] = n[0], e[13] = n[1], e[14] = n[2], e[15] = 1, e;
        }
      }, {
        key: "fromRotationTranslationScaleOrigin",
        value: function fromRotationTranslationScaleOrigin(e, t, n, s, r) {
          var a = t[0],
            i = t[1],
            c = t[2],
            y = t[3],
            d = a + a,
            l = i + i,
            L = c + c,
            k = a * d,
            h = a * l,
            b = a * L,
            x = i * l,
            M = i * L,
            T = c * L,
            R = y * d,
            m = y * l,
            o = y * L,
            g = s[0],
            z = s[1],
            S = s[2],
            B = r[0],
            N = r[1],
            Q = r[2],
            P = (1 - (x + T)) * g,
            O = (h + o) * g,
            Y = (b - m) * g,
            I = (h - o) * z,
            v = (1 - (k + T)) * z,
            re = (M + R) * z,
            ae = (b + m) * S,
            be = (M - R) * S,
            xe = (1 - (k + x)) * S;
          return e[0] = P, e[1] = O, e[2] = Y, e[3] = 0, e[4] = I, e[5] = v, e[6] = re, e[7] = 0, e[8] = ae, e[9] = be, e[10] = xe, e[11] = 0, e[12] = n[0] + B - (P * B + I * N + ae * Q), e[13] = n[1] + N - (O * B + v * N + be * Q), e[14] = n[2] + Q - (Y * B + re * N + xe * Q), e[15] = 1, e;
        }
      }, {
        key: "fromQuat",
        value: function fromQuat(e, t) {
          var n = t[0],
            s = t[1],
            r = t[2],
            a = t[3],
            i = n + n,
            c = s + s,
            y = r + r,
            d = n * i,
            l = s * i,
            L = s * c,
            k = r * i,
            h = r * c,
            b = r * y,
            x = a * i,
            M = a * c,
            T = a * y;
          return e[0] = 1 - L - b, e[1] = l + T, e[2] = k - M, e[3] = 0, e[4] = l - T, e[5] = 1 - d - b, e[6] = h + x, e[7] = 0, e[8] = k + M, e[9] = h - x, e[10] = 1 - d - L, e[11] = 0, e[12] = 0, e[13] = 0, e[14] = 0, e[15] = 1, e;
        }
      }, {
        key: "frustumNO",
        value: function frustumNO(e, t, n, s, r, a) {
          var i = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 1 / 0;
          var c = 1 / (n - t),
            y = 1 / (r - s);
          if (e[0] = a * 2 * c, e[1] = 0, e[2] = 0, e[3] = 0, e[4] = 0, e[5] = a * 2 * y, e[6] = 0, e[7] = 0, e[8] = (n + t) * c, e[9] = (r + s) * y, e[11] = -1, e[12] = 0, e[13] = 0, e[15] = 0, i != null && i !== 1 / 0) {
            var d = 1 / (a - i);
            e[10] = (i + a) * d, e[14] = 2 * i * a * d;
          } else e[10] = -1, e[14] = -2 * a;
          return e;
        }
      }, {
        key: "frustum",
        value: function frustum(e, t, n, s, r, a) {
          return e;
        }
      }, {
        key: "frustumZO",
        value: function frustumZO(e, t, n, s, r, a) {
          var i = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 1 / 0;
          var c = 1 / (n - t),
            y = 1 / (r - s);
          if (e[0] = a * 2 * c, e[1] = 0, e[2] = 0, e[3] = 0, e[4] = 0, e[5] = a * 2 * y, e[6] = 0, e[7] = 0, e[8] = (n + t) * c, e[9] = (r + s) * y, e[11] = -1, e[12] = 0, e[13] = 0, e[15] = 0, i != null && i !== 1 / 0) {
            var d = 1 / (a - i);
            e[10] = i * d, e[14] = i * a * d;
          } else e[10] = -1, e[14] = -a;
          return e;
        }
      }, {
        key: "perspectiveNO",
        value: function perspectiveNO(e, t, n, s) {
          var r = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1 / 0;
          var a = 1 / Math.tan(t / 2);
          if (e[0] = a / n, e[1] = 0, e[2] = 0, e[3] = 0, e[4] = 0, e[5] = a, e[6] = 0, e[7] = 0, e[8] = 0, e[9] = 0, e[11] = -1, e[12] = 0, e[13] = 0, e[15] = 0, r != null && r !== 1 / 0) {
            var i = 1 / (s - r);
            e[10] = (r + s) * i, e[14] = 2 * r * s * i;
          } else e[10] = -1, e[14] = -2 * s;
          return e;
        }
      }, {
        key: "perspective",
        value: function perspective(e, t, n, s) {
          return e;
        }
      }, {
        key: "perspectiveZO",
        value: function perspectiveZO(e, t, n, s) {
          var r = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1 / 0;
          var a = 1 / Math.tan(t / 2);
          if (e[0] = a / n, e[1] = 0, e[2] = 0, e[3] = 0, e[4] = 0, e[5] = a, e[6] = 0, e[7] = 0, e[8] = 0, e[9] = 0, e[11] = -1, e[12] = 0, e[13] = 0, e[15] = 0, r != null && r !== 1 / 0) {
            var i = 1 / (s - r);
            e[10] = r * i, e[14] = r * s * i;
          } else e[10] = -1, e[14] = -s;
          return e;
        }
      }, {
        key: "perspectiveFromFieldOfView",
        value: function perspectiveFromFieldOfView(e, t, n, s) {
          var r = Math.tan(t.upDegrees * Math.PI / 180),
            a = Math.tan(t.downDegrees * Math.PI / 180),
            i = Math.tan(t.leftDegrees * Math.PI / 180),
            c = Math.tan(t.rightDegrees * Math.PI / 180),
            y = 2 / (i + c),
            d = 2 / (r + a);
          return e[0] = y, e[1] = 0, e[2] = 0, e[3] = 0, e[4] = 0, e[5] = d, e[6] = 0, e[7] = 0, e[8] = -((i - c) * y * .5), e[9] = (r - a) * d * .5, e[10] = s / (n - s), e[11] = -1, e[12] = 0, e[13] = 0, e[14] = s * n / (n - s), e[15] = 0, e;
        }
      }, {
        key: "orthoNO",
        value: function orthoNO(e, t, n, s, r, a, i) {
          var c = 1 / (t - n),
            y = 1 / (s - r),
            d = 1 / (a - i);
          return e[0] = -2 * c, e[1] = 0, e[2] = 0, e[3] = 0, e[4] = 0, e[5] = -2 * y, e[6] = 0, e[7] = 0, e[8] = 0, e[9] = 0, e[10] = 2 * d, e[11] = 0, e[12] = (t + n) * c, e[13] = (r + s) * y, e[14] = (i + a) * d, e[15] = 1, e;
        }
      }, {
        key: "ortho",
        value: function ortho(e, t, n, s, r, a, i) {
          return e;
        }
      }, {
        key: "orthoZO",
        value: function orthoZO(e, t, n, s, r, a, i) {
          var c = 1 / (t - n),
            y = 1 / (s - r),
            d = 1 / (a - i);
          return e[0] = -2 * c, e[1] = 0, e[2] = 0, e[3] = 0, e[4] = 0, e[5] = -2 * y, e[6] = 0, e[7] = 0, e[8] = 0, e[9] = 0, e[10] = d, e[11] = 0, e[12] = (t + n) * c, e[13] = (r + s) * y, e[14] = a * d, e[15] = 1, e;
        }
      }, {
        key: "lookAt",
        value: function lookAt(e, t, n, s) {
          var r = t[0],
            a = t[1],
            i = t[2],
            c = s[0],
            y = s[1],
            d = s[2],
            l = n[0],
            L = n[1],
            k = n[2];
          if (Math.abs(r - l) < 1e-6 && Math.abs(a - L) < 1e-6 && Math.abs(i - k) < 1e-6) return A.identity(e);
          var h = r - l,
            b = a - L,
            x = i - k,
            M = 1 / Math.sqrt(h * h + b * b + x * x);
          h *= M, b *= M, x *= M;
          var T = y * x - d * b,
            R = d * h - c * x,
            m = c * b - y * h;
          M = Math.sqrt(T * T + R * R + m * m), M ? (M = 1 / M, T *= M, R *= M, m *= M) : (T = 0, R = 0, m = 0);
          var o = b * m - x * R,
            g = x * T - h * m,
            z = h * R - b * T;
          return M = Math.sqrt(o * o + g * g + z * z), M ? (M = 1 / M, o *= M, g *= M, z *= M) : (o = 0, g = 0, z = 0), e[0] = T, e[1] = o, e[2] = h, e[3] = 0, e[4] = R, e[5] = g, e[6] = b, e[7] = 0, e[8] = m, e[9] = z, e[10] = x, e[11] = 0, e[12] = -(T * r + R * a + m * i), e[13] = -(o * r + g * a + z * i), e[14] = -(h * r + b * a + x * i), e[15] = 1, e;
        }
      }, {
        key: "targetTo",
        value: function targetTo(e, t, n, s) {
          var r = t[0],
            a = t[1],
            i = t[2],
            c = s[0],
            y = s[1],
            d = s[2],
            l = r - n[0],
            L = a - n[1],
            k = i - n[2],
            h = l * l + L * L + k * k;
          h > 0 && (h = 1 / Math.sqrt(h), l *= h, L *= h, k *= h);
          var b = y * k - d * L,
            x = d * l - c * k,
            M = c * L - y * l;
          return h = b * b + x * x + M * M, h > 0 && (h = 1 / Math.sqrt(h), b *= h, x *= h, M *= h), e[0] = b, e[1] = x, e[2] = M, e[3] = 0, e[4] = L * M - k * x, e[5] = k * b - l * M, e[6] = l * x - L * b, e[7] = 0, e[8] = l, e[9] = L, e[10] = k, e[11] = 0, e[12] = r, e[13] = a, e[14] = i, e[15] = 1, e;
        }
      }, {
        key: "frob",
        value: function frob(e) {
          return Math.sqrt(e[0] * e[0] + e[1] * e[1] + e[2] * e[2] + e[3] * e[3] + e[4] * e[4] + e[5] * e[5] + e[6] * e[6] + e[7] * e[7] + e[8] * e[8] + e[9] * e[9] + e[10] * e[10] + e[11] * e[11] + e[12] * e[12] + e[13] * e[13] + e[14] * e[14] + e[15] * e[15]);
        }
      }, {
        key: "add",
        value: function add(e, t, n) {
          return e[0] = t[0] + n[0], e[1] = t[1] + n[1], e[2] = t[2] + n[2], e[3] = t[3] + n[3], e[4] = t[4] + n[4], e[5] = t[5] + n[5], e[6] = t[6] + n[6], e[7] = t[7] + n[7], e[8] = t[8] + n[8], e[9] = t[9] + n[9], e[10] = t[10] + n[10], e[11] = t[11] + n[11], e[12] = t[12] + n[12], e[13] = t[13] + n[13], e[14] = t[14] + n[14], e[15] = t[15] + n[15], e;
        }
      }, {
        key: "subtract",
        value: function subtract(e, t, n) {
          return e[0] = t[0] - n[0], e[1] = t[1] - n[1], e[2] = t[2] - n[2], e[3] = t[3] - n[3], e[4] = t[4] - n[4], e[5] = t[5] - n[5], e[6] = t[6] - n[6], e[7] = t[7] - n[7], e[8] = t[8] - n[8], e[9] = t[9] - n[9], e[10] = t[10] - n[10], e[11] = t[11] - n[11], e[12] = t[12] - n[12], e[13] = t[13] - n[13], e[14] = t[14] - n[14], e[15] = t[15] - n[15], e;
        }
      }, {
        key: "sub",
        value: function sub(e, t, n) {
          return e;
        }
      }, {
        key: "multiplyScalar",
        value: function multiplyScalar(e, t, n) {
          return e[0] = t[0] * n, e[1] = t[1] * n, e[2] = t[2] * n, e[3] = t[3] * n, e[4] = t[4] * n, e[5] = t[5] * n, e[6] = t[6] * n, e[7] = t[7] * n, e[8] = t[8] * n, e[9] = t[9] * n, e[10] = t[10] * n, e[11] = t[11] * n, e[12] = t[12] * n, e[13] = t[13] * n, e[14] = t[14] * n, e[15] = t[15] * n, e;
        }
      }, {
        key: "multiplyScalarAndAdd",
        value: function multiplyScalarAndAdd(e, t, n, s) {
          return e[0] = t[0] + n[0] * s, e[1] = t[1] + n[1] * s, e[2] = t[2] + n[2] * s, e[3] = t[3] + n[3] * s, e[4] = t[4] + n[4] * s, e[5] = t[5] + n[5] * s, e[6] = t[6] + n[6] * s, e[7] = t[7] + n[7] * s, e[8] = t[8] + n[8] * s, e[9] = t[9] + n[9] * s, e[10] = t[10] + n[10] * s, e[11] = t[11] + n[11] * s, e[12] = t[12] + n[12] * s, e[13] = t[13] + n[13] * s, e[14] = t[14] + n[14] * s, e[15] = t[15] + n[15] * s, e;
        }
      }, {
        key: "exactEquals",
        value: function exactEquals(e, t) {
          return e[0] === t[0] && e[1] === t[1] && e[2] === t[2] && e[3] === t[3] && e[4] === t[4] && e[5] === t[5] && e[6] === t[6] && e[7] === t[7] && e[8] === t[8] && e[9] === t[9] && e[10] === t[10] && e[11] === t[11] && e[12] === t[12] && e[13] === t[13] && e[14] === t[14] && e[15] === t[15];
        }
      }, {
        key: "equals",
        value: function equals(e, t) {
          var n = e[0],
            s = e[1],
            r = e[2],
            a = e[3],
            i = e[4],
            c = e[5],
            y = e[6],
            d = e[7],
            l = e[8],
            L = e[9],
            k = e[10],
            h = e[11],
            b = e[12],
            x = e[13],
            M = e[14],
            T = e[15],
            R = t[0],
            m = t[1],
            o = t[2],
            g = t[3],
            z = t[4],
            S = t[5],
            B = t[6],
            N = t[7],
            Q = t[8],
            P = t[9],
            O = t[10],
            Y = t[11],
            I = t[12],
            v = t[13],
            re = t[14],
            ae = t[15];
          return Math.abs(n - R) <= 1e-6 * Math.max(1, Math.abs(n), Math.abs(R)) && Math.abs(s - m) <= 1e-6 * Math.max(1, Math.abs(s), Math.abs(m)) && Math.abs(r - o) <= 1e-6 * Math.max(1, Math.abs(r), Math.abs(o)) && Math.abs(a - g) <= 1e-6 * Math.max(1, Math.abs(a), Math.abs(g)) && Math.abs(i - z) <= 1e-6 * Math.max(1, Math.abs(i), Math.abs(z)) && Math.abs(c - S) <= 1e-6 * Math.max(1, Math.abs(c), Math.abs(S)) && Math.abs(y - B) <= 1e-6 * Math.max(1, Math.abs(y), Math.abs(B)) && Math.abs(d - N) <= 1e-6 * Math.max(1, Math.abs(d), Math.abs(N)) && Math.abs(l - Q) <= 1e-6 * Math.max(1, Math.abs(l), Math.abs(Q)) && Math.abs(L - P) <= 1e-6 * Math.max(1, Math.abs(L), Math.abs(P)) && Math.abs(k - O) <= 1e-6 * Math.max(1, Math.abs(k), Math.abs(O)) && Math.abs(h - Y) <= 1e-6 * Math.max(1, Math.abs(h), Math.abs(Y)) && Math.abs(b - I) <= 1e-6 * Math.max(1, Math.abs(b), Math.abs(I)) && Math.abs(x - v) <= 1e-6 * Math.max(1, Math.abs(x), Math.abs(v)) && Math.abs(M - re) <= 1e-6 * Math.max(1, Math.abs(M), Math.abs(re)) && Math.abs(T - ae) <= 1e-6 * Math.max(1, Math.abs(T), Math.abs(ae));
        }
      }, {
        key: "str",
        value: function str(e) {
          return "Mat4(".concat(e.join(", "), ")");
        }
      }]);
    }(/*#__PURE__*/_wrapNativeSuper(Float32Array));
  se = new WeakMap(), H = new WeakMap(), G(A, se, new Float32Array([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1])), G(A, H, new Float32Array(3));
  var Z = A;
  Z.prototype.mul = Z.prototype.multiply;
  Z.sub = Z.subtract;
  Z.mul = Z.multiply;
  Z.frustum = Z.frustumNO;
  Z.perspective = Z.perspectiveNO;
  Z.ortho = Z.orthoNO;
  Z.normalFromMat4Fast = Z.normalFromMat4;
  var q = /*#__PURE__*/function (_Float32Array5) {
    function E() {
      var _this5;
      _classCallCheck(this, E);
      for (var _len9 = arguments.length, e = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
        e[_key9] = arguments[_key9];
      }
      switch (e.length) {
        case 3:
          _this5 = _callSuper(this, E, [e]);
          break;
        case 2:
          _this5 = _callSuper(this, E, [e[0], e[1], 3]);
          break;
        case 1:
          {
            var t = e[0];
            t === void 0 ? _this5 = _callSuper(this, E, [3]) : typeof t == "number" ? _this5 = _callSuper(this, E, [[t, t, t]]) : _this5 = _callSuper(this, E, [t, 0, 3]);
            break;
          }
        default:
          _this5 = _callSuper(this, E, [3]);
          break;
      }
      return _assertThisInitialized(_this5);
    }
    _inherits(E, _Float32Array5);
    return _createClass(E, [{
      key: "x",
      get: function get() {
        return this[0];
      },
      set: function set(e) {
        this[0] = e;
      }
    }, {
      key: "y",
      get: function get() {
        return this[1];
      },
      set: function set(e) {
        this[1] = e;
      }
    }, {
      key: "z",
      get: function get() {
        return this[2];
      },
      set: function set(e) {
        this[2] = e;
      }
    }, {
      key: "r",
      get: function get() {
        return this[0];
      },
      set: function set(e) {
        this[0] = e;
      }
    }, {
      key: "g",
      get: function get() {
        return this[1];
      },
      set: function set(e) {
        this[1] = e;
      }
    }, {
      key: "b",
      get: function get() {
        return this[2];
      },
      set: function set(e) {
        this[2] = e;
      }
    }, {
      key: "magnitude",
      get: function get() {
        var e = this[0],
          t = this[1],
          n = this[2];
        return Math.sqrt(e * e + t * t + n * n);
      }
    }, {
      key: "mag",
      get: function get() {
        return this.magnitude;
      }
    }, {
      key: "squaredMagnitude",
      get: function get() {
        var e = this[0],
          t = this[1],
          n = this[2];
        return e * e + t * t + n * n;
      }
    }, {
      key: "sqrMag",
      get: function get() {
        return this.squaredMagnitude;
      }
    }, {
      key: "str",
      get: function get() {
        return E.str(this);
      }
    }, {
      key: "copy",
      value: function copy(e) {
        return this.set(e), this;
      }
    }, {
      key: "add",
      value: function add(e) {
        return this[0] += e[0], this[1] += e[1], this[2] += e[2], this;
      }
    }, {
      key: "subtract",
      value: function subtract(e) {
        return this[0] -= e[0], this[1] -= e[1], this[2] -= e[2], this;
      }
    }, {
      key: "sub",
      value: function sub(e) {
        return this;
      }
    }, {
      key: "multiply",
      value: function multiply(e) {
        return this[0] *= e[0], this[1] *= e[1], this[2] *= e[2], this;
      }
    }, {
      key: "mul",
      value: function mul(e) {
        return this;
      }
    }, {
      key: "divide",
      value: function divide(e) {
        return this[0] /= e[0], this[1] /= e[1], this[2] /= e[2], this;
      }
    }, {
      key: "div",
      value: function div(e) {
        return this;
      }
    }, {
      key: "scale",
      value: function scale(e) {
        return this[0] *= e, this[1] *= e, this[2] *= e, this;
      }
    }, {
      key: "scaleAndAdd",
      value: function scaleAndAdd(e, t) {
        return this[0] += e[0] * t, this[1] += e[1] * t, this[2] += e[2] * t, this;
      }
    }, {
      key: "distance",
      value: function distance(e) {
        return E.distance(this, e);
      }
    }, {
      key: "dist",
      value: function dist(e) {
        return 0;
      }
    }, {
      key: "squaredDistance",
      value: function squaredDistance(e) {
        return E.squaredDistance(this, e);
      }
    }, {
      key: "sqrDist",
      value: function sqrDist(e) {
        return 0;
      }
    }, {
      key: "negate",
      value: function negate() {
        return this[0] *= -1, this[1] *= -1, this[2] *= -1, this;
      }
    }, {
      key: "invert",
      value: function invert() {
        return this[0] = 1 / this[0], this[1] = 1 / this[1], this[2] = 1 / this[2], this;
      }
    }, {
      key: "abs",
      value: function abs() {
        return this[0] = Math.abs(this[0]), this[1] = Math.abs(this[1]), this[2] = Math.abs(this[2]), this;
      }
    }, {
      key: "dot",
      value: function dot(e) {
        return this[0] * e[0] + this[1] * e[1] + this[2] * e[2];
      }
    }, {
      key: "normalize",
      value: function normalize() {
        return E.normalize(this, this);
      }
    }], [{
      key: "BYTE_LENGTH",
      get: function get() {
        return 3 * Float32Array.BYTES_PER_ELEMENT;
      }
    }, {
      key: "create",
      value: function create() {
        return new E();
      }
    }, {
      key: "clone",
      value: function clone(e) {
        return new E(e);
      }
    }, {
      key: "magnitude",
      value: function magnitude(e) {
        var t = e[0],
          n = e[1],
          s = e[2];
        return Math.sqrt(t * t + n * n + s * s);
      }
    }, {
      key: "mag",
      value: function mag(e) {
        return 0;
      }
    }, {
      key: "length",
      value: function length(e) {
        return 0;
      }
    }, {
      key: "len",
      value: function len(e) {
        return 0;
      }
    }, {
      key: "fromValues",
      value: function fromValues(e, t, n) {
        return new E(e, t, n);
      }
    }, {
      key: "copy",
      value: function copy(e, t) {
        return e[0] = t[0], e[1] = t[1], e[2] = t[2], e;
      }
    }, {
      key: "set",
      value: function set(e, t, n, s) {
        return e[0] = t, e[1] = n, e[2] = s, e;
      }
    }, {
      key: "add",
      value: function add(e, t, n) {
        return e[0] = t[0] + n[0], e[1] = t[1] + n[1], e[2] = t[2] + n[2], e;
      }
    }, {
      key: "subtract",
      value: function subtract(e, t, n) {
        return e[0] = t[0] - n[0], e[1] = t[1] - n[1], e[2] = t[2] - n[2], e;
      }
    }, {
      key: "sub",
      value: function sub(e, t, n) {
        return e;
      }
    }, {
      key: "multiply",
      value: function multiply(e, t, n) {
        return e[0] = t[0] * n[0], e[1] = t[1] * n[1], e[2] = t[2] * n[2], e;
      }
    }, {
      key: "mul",
      value: function mul(e, t, n) {
        return e;
      }
    }, {
      key: "divide",
      value: function divide(e, t, n) {
        return e[0] = t[0] / n[0], e[1] = t[1] / n[1], e[2] = t[2] / n[2], e;
      }
    }, {
      key: "div",
      value: function div(e, t, n) {
        return e;
      }
    }, {
      key: "ceil",
      value: function ceil(e, t) {
        return e[0] = Math.ceil(t[0]), e[1] = Math.ceil(t[1]), e[2] = Math.ceil(t[2]), e;
      }
    }, {
      key: "floor",
      value: function floor(e, t) {
        return e[0] = Math.floor(t[0]), e[1] = Math.floor(t[1]), e[2] = Math.floor(t[2]), e;
      }
    }, {
      key: "min",
      value: function min(e, t, n) {
        return e[0] = Math.min(t[0], n[0]), e[1] = Math.min(t[1], n[1]), e[2] = Math.min(t[2], n[2]), e;
      }
    }, {
      key: "max",
      value: function max(e, t, n) {
        return e[0] = Math.max(t[0], n[0]), e[1] = Math.max(t[1], n[1]), e[2] = Math.max(t[2], n[2]), e;
      }
    }, {
      key: "scale",
      value: function scale(e, t, n) {
        return e[0] = t[0] * n, e[1] = t[1] * n, e[2] = t[2] * n, e;
      }
    }, {
      key: "scaleAndAdd",
      value: function scaleAndAdd(e, t, n, s) {
        return e[0] = t[0] + n[0] * s, e[1] = t[1] + n[1] * s, e[2] = t[2] + n[2] * s, e;
      }
    }, {
      key: "distance",
      value: function distance(e, t) {
        var n = t[0] - e[0],
          s = t[1] - e[1],
          r = t[2] - e[2];
        return Math.sqrt(n * n + s * s + r * r);
      }
    }, {
      key: "dist",
      value: function dist(e, t) {
        return 0;
      }
    }, {
      key: "squaredDistance",
      value: function squaredDistance(e, t) {
        var n = t[0] - e[0],
          s = t[1] - e[1],
          r = t[2] - e[2];
        return n * n + s * s + r * r;
      }
    }, {
      key: "sqrDist",
      value: function sqrDist(e, t) {
        return 0;
      }
    }, {
      key: "squaredLength",
      value: function squaredLength(e) {
        var t = e[0],
          n = e[1],
          s = e[2];
        return t * t + n * n + s * s;
      }
    }, {
      key: "sqrLen",
      value: function sqrLen(e, t) {
        return 0;
      }
    }, {
      key: "negate",
      value: function negate(e, t) {
        return e[0] = -t[0], e[1] = -t[1], e[2] = -t[2], e;
      }
    }, {
      key: "inverse",
      value: function inverse(e, t) {
        return e[0] = 1 / t[0], e[1] = 1 / t[1], e[2] = 1 / t[2], e;
      }
    }, {
      key: "abs",
      value: function abs(e, t) {
        return e[0] = Math.abs(t[0]), e[1] = Math.abs(t[1]), e[2] = Math.abs(t[2]), e;
      }
    }, {
      key: "normalize",
      value: function normalize(e, t) {
        var n = t[0],
          s = t[1],
          r = t[2],
          a = n * n + s * s + r * r;
        return a > 0 && (a = 1 / Math.sqrt(a)), e[0] = t[0] * a, e[1] = t[1] * a, e[2] = t[2] * a, e;
      }
    }, {
      key: "dot",
      value: function dot(e, t) {
        return e[0] * t[0] + e[1] * t[1] + e[2] * t[2];
      }
    }, {
      key: "cross",
      value: function cross(e, t, n) {
        var s = t[0],
          r = t[1],
          a = t[2],
          i = n[0],
          c = n[1],
          y = n[2];
        return e[0] = r * y - a * c, e[1] = a * i - s * y, e[2] = s * c - r * i, e;
      }
    }, {
      key: "lerp",
      value: function lerp(e, t, n, s) {
        var r = t[0],
          a = t[1],
          i = t[2];
        return e[0] = r + s * (n[0] - r), e[1] = a + s * (n[1] - a), e[2] = i + s * (n[2] - i), e;
      }
    }, {
      key: "slerp",
      value: function slerp(e, t, n, s) {
        var r = Math.acos(Math.min(Math.max(E.dot(t, n), -1), 1)),
          a = Math.sin(r),
          i = Math.sin((1 - s) * r) / a,
          c = Math.sin(s * r) / a;
        return e[0] = i * t[0] + c * n[0], e[1] = i * t[1] + c * n[1], e[2] = i * t[2] + c * n[2], e;
      }
    }, {
      key: "hermite",
      value: function hermite(e, t, n, s, r, a) {
        var i = a * a,
          c = i * (2 * a - 3) + 1,
          y = i * (a - 2) + a,
          d = i * (a - 1),
          l = i * (3 - 2 * a);
        return e[0] = t[0] * c + n[0] * y + s[0] * d + r[0] * l, e[1] = t[1] * c + n[1] * y + s[1] * d + r[1] * l, e[2] = t[2] * c + n[2] * y + s[2] * d + r[2] * l, e;
      }
    }, {
      key: "bezier",
      value: function bezier(e, t, n, s, r, a) {
        var i = 1 - a,
          c = i * i,
          y = a * a,
          d = c * i,
          l = 3 * a * c,
          L = 3 * y * i,
          k = y * a;
        return e[0] = t[0] * d + n[0] * l + s[0] * L + r[0] * k, e[1] = t[1] * d + n[1] * l + s[1] * L + r[1] * k, e[2] = t[2] * d + n[2] * l + s[2] * L + r[2] * k, e;
      }
    }, {
      key: "transformMat4",
      value: function transformMat4(e, t, n) {
        var s = t[0],
          r = t[1],
          a = t[2],
          i = n[3] * s + n[7] * r + n[11] * a + n[15] || 1;
        return e[0] = (n[0] * s + n[4] * r + n[8] * a + n[12]) / i, e[1] = (n[1] * s + n[5] * r + n[9] * a + n[13]) / i, e[2] = (n[2] * s + n[6] * r + n[10] * a + n[14]) / i, e;
      }
    }, {
      key: "transformMat3",
      value: function transformMat3(e, t, n) {
        var s = t[0],
          r = t[1],
          a = t[2];
        return e[0] = s * n[0] + r * n[3] + a * n[6], e[1] = s * n[1] + r * n[4] + a * n[7], e[2] = s * n[2] + r * n[5] + a * n[8], e;
      }
    }, {
      key: "transformQuat",
      value: function transformQuat(e, t, n) {
        var s = n[0],
          r = n[1],
          a = n[2],
          i = n[3] * 2,
          c = t[0],
          y = t[1],
          d = t[2],
          l = r * d - a * y,
          L = a * c - s * d,
          k = s * y - r * c,
          h = (r * k - a * L) * 2,
          b = (a * l - s * k) * 2,
          x = (s * L - r * l) * 2;
        return e[0] = c + l * i + h, e[1] = y + L * i + b, e[2] = d + k * i + x, e;
      }
    }, {
      key: "rotateX",
      value: function rotateX(e, t, n, s) {
        var r = n[1],
          a = n[2],
          i = t[1] - r,
          c = t[2] - a;
        return e[0] = t[0], e[1] = i * Math.cos(s) - c * Math.sin(s) + r, e[2] = i * Math.sin(s) + c * Math.cos(s) + a, e;
      }
    }, {
      key: "rotateY",
      value: function rotateY(e, t, n, s) {
        var r = n[0],
          a = n[2],
          i = t[0] - r,
          c = t[2] - a;
        return e[0] = c * Math.sin(s) + i * Math.cos(s) + r, e[1] = t[1], e[2] = c * Math.cos(s) - i * Math.sin(s) + a, e;
      }
    }, {
      key: "rotateZ",
      value: function rotateZ(e, t, n, s) {
        var r = n[0],
          a = n[1],
          i = t[0] - r,
          c = t[1] - a;
        return e[0] = i * Math.cos(s) - c * Math.sin(s) + r, e[1] = i * Math.sin(s) + c * Math.cos(s) + a, e[2] = n[2], e;
      }
    }, {
      key: "angle",
      value: function angle(e, t) {
        var n = e[0],
          s = e[1],
          r = e[2],
          a = t[0],
          i = t[1],
          c = t[2],
          y = Math.sqrt((n * n + s * s + r * r) * (a * a + i * i + c * c)),
          d = y && E.dot(e, t) / y;
        return Math.acos(Math.min(Math.max(d, -1), 1));
      }
    }, {
      key: "zero",
      value: function zero(e) {
        return e[0] = 0, e[1] = 0, e[2] = 0, e;
      }
    }, {
      key: "str",
      value: function str(e) {
        return "Vec3(".concat(e.join(", "), ")");
      }
    }, {
      key: "exactEquals",
      value: function exactEquals(e, t) {
        return e[0] === t[0] && e[1] === t[1] && e[2] === t[2];
      }
    }, {
      key: "equals",
      value: function equals(e, t) {
        var n = e[0],
          s = e[1],
          r = e[2],
          a = t[0],
          i = t[1],
          c = t[2];
        return Math.abs(n - a) <= 1e-6 * Math.max(1, Math.abs(n), Math.abs(a)) && Math.abs(s - i) <= 1e-6 * Math.max(1, Math.abs(s), Math.abs(i)) && Math.abs(r - c) <= 1e-6 * Math.max(1, Math.abs(r), Math.abs(c));
      }
    }]);
  }(/*#__PURE__*/_wrapNativeSuper(Float32Array));
  q.prototype.sub = q.prototype.subtract;
  q.prototype.mul = q.prototype.multiply;
  q.prototype.div = q.prototype.divide;
  q.prototype.dist = q.prototype.distance;
  q.prototype.sqrDist = q.prototype.squaredDistance;
  q.sub = q.subtract;
  q.mul = q.multiply;
  q.div = q.divide;
  q.dist = q.distance;
  q.sqrDist = q.squaredDistance;
  q.sqrLen = q.squaredLength;
  q.mag = q.magnitude;
  q.length = q.magnitude;
  q.len = q.magnitude;
  var f = /*#__PURE__*/function (_Float32Array6) {
    function E() {
      var _this6;
      _classCallCheck(this, E);
      for (var _len10 = arguments.length, e = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
        e[_key10] = arguments[_key10];
      }
      switch (e.length) {
        case 4:
          _this6 = _callSuper(this, E, [e]);
          break;
        case 2:
          _this6 = _callSuper(this, E, [e[0], e[1], 4]);
          break;
        case 1:
          {
            var t = e[0];
            t === void 0 ? _this6 = _callSuper(this, E, [4]) : typeof t == "number" ? _this6 = _callSuper(this, E, [[t, t, t, t]]) : _this6 = _callSuper(this, E, [t, 0, 4]);
            break;
          }
        default:
          _this6 = _callSuper(this, E, [4]);
          break;
      }
      return _assertThisInitialized(_this6);
    }
    _inherits(E, _Float32Array6);
    return _createClass(E, [{
      key: "x",
      get: function get() {
        return this[0];
      },
      set: function set(e) {
        this[0] = e;
      }
    }, {
      key: "y",
      get: function get() {
        return this[1];
      },
      set: function set(e) {
        this[1] = e;
      }
    }, {
      key: "z",
      get: function get() {
        return this[2];
      },
      set: function set(e) {
        this[2] = e;
      }
    }, {
      key: "w",
      get: function get() {
        return this[3];
      },
      set: function set(e) {
        this[3] = e;
      }
    }, {
      key: "r",
      get: function get() {
        return this[0];
      },
      set: function set(e) {
        this[0] = e;
      }
    }, {
      key: "g",
      get: function get() {
        return this[1];
      },
      set: function set(e) {
        this[1] = e;
      }
    }, {
      key: "b",
      get: function get() {
        return this[2];
      },
      set: function set(e) {
        this[2] = e;
      }
    }, {
      key: "a",
      get: function get() {
        return this[3];
      },
      set: function set(e) {
        this[3] = e;
      }
    }, {
      key: "magnitude",
      get: function get() {
        var e = this[0],
          t = this[1],
          n = this[2],
          s = this[3];
        return Math.sqrt(e * e + t * t + n * n + s * s);
      }
    }, {
      key: "mag",
      get: function get() {
        return this.magnitude;
      }
    }, {
      key: "str",
      get: function get() {
        return E.str(this);
      }
    }, {
      key: "copy",
      value: function copy(e) {
        return _superPropGet(E, "set", this)([e]), this;
      }
    }, {
      key: "add",
      value: function add(e) {
        return this[0] += e[0], this[1] += e[1], this[2] += e[2], this[3] += e[3], this;
      }
    }, {
      key: "subtract",
      value: function subtract(e) {
        return this[0] -= e[0], this[1] -= e[1], this[2] -= e[2], this[3] -= e[3], this;
      }
    }, {
      key: "sub",
      value: function sub(e) {
        return this;
      }
    }, {
      key: "multiply",
      value: function multiply(e) {
        return this[0] *= e[0], this[1] *= e[1], this[2] *= e[2], this[3] *= e[3], this;
      }
    }, {
      key: "mul",
      value: function mul(e) {
        return this;
      }
    }, {
      key: "divide",
      value: function divide(e) {
        return this[0] /= e[0], this[1] /= e[1], this[2] /= e[2], this[3] /= e[3], this;
      }
    }, {
      key: "div",
      value: function div(e) {
        return this;
      }
    }, {
      key: "scale",
      value: function scale(e) {
        return this[0] *= e, this[1] *= e, this[2] *= e, this[3] *= e, this;
      }
    }, {
      key: "scaleAndAdd",
      value: function scaleAndAdd(e, t) {
        return this[0] += e[0] * t, this[1] += e[1] * t, this[2] += e[2] * t, this[3] += e[3] * t, this;
      }
    }, {
      key: "distance",
      value: function distance(e) {
        return E.distance(this, e);
      }
    }, {
      key: "dist",
      value: function dist(e) {
        return 0;
      }
    }, {
      key: "squaredDistance",
      value: function squaredDistance(e) {
        return E.squaredDistance(this, e);
      }
    }, {
      key: "sqrDist",
      value: function sqrDist(e) {
        return 0;
      }
    }, {
      key: "negate",
      value: function negate() {
        return this[0] *= -1, this[1] *= -1, this[2] *= -1, this[3] *= -1, this;
      }
    }, {
      key: "invert",
      value: function invert() {
        return this[0] = 1 / this[0], this[1] = 1 / this[1], this[2] = 1 / this[2], this[3] = 1 / this[3], this;
      }
    }, {
      key: "abs",
      value: function abs() {
        return this[0] = Math.abs(this[0]), this[1] = Math.abs(this[1]), this[2] = Math.abs(this[2]), this[3] = Math.abs(this[3]), this;
      }
    }, {
      key: "dot",
      value: function dot(e) {
        return this[0] * e[0] + this[1] * e[1] + this[2] * e[2] + this[3] * e[3];
      }
    }, {
      key: "normalize",
      value: function normalize() {
        return E.normalize(this, this);
      }
    }], [{
      key: "BYTE_LENGTH",
      get: function get() {
        return 4 * Float32Array.BYTES_PER_ELEMENT;
      }
    }, {
      key: "create",
      value: function create() {
        return new E();
      }
    }, {
      key: "clone",
      value: function clone(e) {
        return new E(e);
      }
    }, {
      key: "fromValues",
      value: function fromValues(e, t, n, s) {
        return new E(e, t, n, s);
      }
    }, {
      key: "copy",
      value: function copy(e, t) {
        return e[0] = t[0], e[1] = t[1], e[2] = t[2], e[3] = t[3], e;
      }
    }, {
      key: "set",
      value: function set(e, t, n, s, r) {
        return e[0] = t, e[1] = n, e[2] = s, e[3] = r, e;
      }
    }, {
      key: "add",
      value: function add(e, t, n) {
        return e[0] = t[0] + n[0], e[1] = t[1] + n[1], e[2] = t[2] + n[2], e[3] = t[3] + n[3], e;
      }
    }, {
      key: "subtract",
      value: function subtract(e, t, n) {
        return e[0] = t[0] - n[0], e[1] = t[1] - n[1], e[2] = t[2] - n[2], e[3] = t[3] - n[3], e;
      }
    }, {
      key: "sub",
      value: function sub(e, t, n) {
        return e;
      }
    }, {
      key: "multiply",
      value: function multiply(e, t, n) {
        return e[0] = t[0] * n[0], e[1] = t[1] * n[1], e[2] = t[2] * n[2], e[3] = t[3] * n[3], e;
      }
    }, {
      key: "mul",
      value: function mul(e, t, n) {
        return e;
      }
    }, {
      key: "divide",
      value: function divide(e, t, n) {
        return e[0] = t[0] / n[0], e[1] = t[1] / n[1], e[2] = t[2] / n[2], e[3] = t[3] / n[3], e;
      }
    }, {
      key: "div",
      value: function div(e, t, n) {
        return e;
      }
    }, {
      key: "ceil",
      value: function ceil(e, t) {
        return e[0] = Math.ceil(t[0]), e[1] = Math.ceil(t[1]), e[2] = Math.ceil(t[2]), e[3] = Math.ceil(t[3]), e;
      }
    }, {
      key: "floor",
      value: function floor(e, t) {
        return e[0] = Math.floor(t[0]), e[1] = Math.floor(t[1]), e[2] = Math.floor(t[2]), e[3] = Math.floor(t[3]), e;
      }
    }, {
      key: "min",
      value: function min(e, t, n) {
        return e[0] = Math.min(t[0], n[0]), e[1] = Math.min(t[1], n[1]), e[2] = Math.min(t[2], n[2]), e[3] = Math.min(t[3], n[3]), e;
      }
    }, {
      key: "max",
      value: function max(e, t, n) {
        return e[0] = Math.max(t[0], n[0]), e[1] = Math.max(t[1], n[1]), e[2] = Math.max(t[2], n[2]), e[3] = Math.max(t[3], n[3]), e;
      }
    }, {
      key: "round",
      value: function round(e, t) {
        return e[0] = Math.round(t[0]), e[1] = Math.round(t[1]), e[2] = Math.round(t[2]), e[3] = Math.round(t[3]), e;
      }
    }, {
      key: "scale",
      value: function scale(e, t, n) {
        return e[0] = t[0] * n, e[1] = t[1] * n, e[2] = t[2] * n, e[3] = t[3] * n, e;
      }
    }, {
      key: "scaleAndAdd",
      value: function scaleAndAdd(e, t, n, s) {
        return e[0] = t[0] + n[0] * s, e[1] = t[1] + n[1] * s, e[2] = t[2] + n[2] * s, e[3] = t[3] + n[3] * s, e;
      }
    }, {
      key: "distance",
      value: function distance(e, t) {
        var n = t[0] - e[0],
          s = t[1] - e[1],
          r = t[2] - e[2],
          a = t[3] - e[3];
        return Math.hypot(n, s, r, a);
      }
    }, {
      key: "dist",
      value: function dist(e, t) {
        return 0;
      }
    }, {
      key: "squaredDistance",
      value: function squaredDistance(e, t) {
        var n = t[0] - e[0],
          s = t[1] - e[1],
          r = t[2] - e[2],
          a = t[3] - e[3];
        return n * n + s * s + r * r + a * a;
      }
    }, {
      key: "sqrDist",
      value: function sqrDist(e, t) {
        return 0;
      }
    }, {
      key: "magnitude",
      value: function magnitude(e) {
        var t = e[0],
          n = e[1],
          s = e[2],
          r = e[3];
        return Math.sqrt(t * t + n * n + s * s + r * r);
      }
    }, {
      key: "mag",
      value: function mag(e) {
        return 0;
      }
    }, {
      key: "length",
      value: function length(e) {
        return 0;
      }
    }, {
      key: "len",
      value: function len(e) {
        return 0;
      }
    }, {
      key: "squaredLength",
      value: function squaredLength(e) {
        var t = e[0],
          n = e[1],
          s = e[2],
          r = e[3];
        return t * t + n * n + s * s + r * r;
      }
    }, {
      key: "sqrLen",
      value: function sqrLen(e) {
        return 0;
      }
    }, {
      key: "negate",
      value: function negate(e, t) {
        return e[0] = -t[0], e[1] = -t[1], e[2] = -t[2], e[3] = -t[3], e;
      }
    }, {
      key: "inverse",
      value: function inverse(e, t) {
        return e[0] = 1 / t[0], e[1] = 1 / t[1], e[2] = 1 / t[2], e[3] = 1 / t[3], e;
      }
    }, {
      key: "abs",
      value: function abs(e, t) {
        return e[0] = Math.abs(t[0]), e[1] = Math.abs(t[1]), e[2] = Math.abs(t[2]), e[3] = Math.abs(t[3]), e;
      }
    }, {
      key: "normalize",
      value: function normalize(e, t) {
        var n = t[0],
          s = t[1],
          r = t[2],
          a = t[3],
          i = n * n + s * s + r * r + a * a;
        return i > 0 && (i = 1 / Math.sqrt(i)), e[0] = n * i, e[1] = s * i, e[2] = r * i, e[3] = a * i, e;
      }
    }, {
      key: "dot",
      value: function dot(e, t) {
        return e[0] * t[0] + e[1] * t[1] + e[2] * t[2] + e[3] * t[3];
      }
    }, {
      key: "cross",
      value: function cross(e, t, n, s) {
        var r = n[0] * s[1] - n[1] * s[0],
          a = n[0] * s[2] - n[2] * s[0],
          i = n[0] * s[3] - n[3] * s[0],
          c = n[1] * s[2] - n[2] * s[1],
          y = n[1] * s[3] - n[3] * s[1],
          d = n[2] * s[3] - n[3] * s[2],
          l = t[0],
          L = t[1],
          k = t[2],
          h = t[3];
        return e[0] = L * d - k * y + h * c, e[1] = -(l * d) + k * i - h * a, e[2] = l * y - L * i + h * r, e[3] = -(l * c) + L * a - k * r, e;
      }
    }, {
      key: "lerp",
      value: function lerp(e, t, n, s) {
        var r = t[0],
          a = t[1],
          i = t[2],
          c = t[3];
        return e[0] = r + s * (n[0] - r), e[1] = a + s * (n[1] - a), e[2] = i + s * (n[2] - i), e[3] = c + s * (n[3] - c), e;
      }
    }, {
      key: "transformMat4",
      value: function transformMat4(e, t, n) {
        var s = t[0],
          r = t[1],
          a = t[2],
          i = t[3];
        return e[0] = n[0] * s + n[4] * r + n[8] * a + n[12] * i, e[1] = n[1] * s + n[5] * r + n[9] * a + n[13] * i, e[2] = n[2] * s + n[6] * r + n[10] * a + n[14] * i, e[3] = n[3] * s + n[7] * r + n[11] * a + n[15] * i, e;
      }
    }, {
      key: "transformQuat",
      value: function transformQuat(e, t, n) {
        var s = t[0],
          r = t[1],
          a = t[2],
          i = n[0],
          c = n[1],
          y = n[2],
          d = n[3],
          l = d * s + c * a - y * r,
          L = d * r + y * s - i * a,
          k = d * a + i * r - c * s,
          h = -i * s - c * r - y * a;
        return e[0] = l * d + h * -i + L * -y - k * -c, e[1] = L * d + h * -c + k * -i - l * -y, e[2] = k * d + h * -y + l * -c - L * -i, e[3] = t[3], e;
      }
    }, {
      key: "zero",
      value: function zero(e) {
        return e[0] = 0, e[1] = 0, e[2] = 0, e[3] = 0, e;
      }
    }, {
      key: "str",
      value: function str(e) {
        return "Vec4(".concat(e.join(", "), ")");
      }
    }, {
      key: "exactEquals",
      value: function exactEquals(e, t) {
        return e[0] === t[0] && e[1] === t[1] && e[2] === t[2] && e[3] === t[3];
      }
    }, {
      key: "equals",
      value: function equals(e, t) {
        var n = e[0],
          s = e[1],
          r = e[2],
          a = e[3],
          i = t[0],
          c = t[1],
          y = t[2],
          d = t[3];
        return Math.abs(n - i) <= 1e-6 * Math.max(1, Math.abs(n), Math.abs(i)) && Math.abs(s - c) <= 1e-6 * Math.max(1, Math.abs(s), Math.abs(c)) && Math.abs(r - y) <= 1e-6 * Math.max(1, Math.abs(r), Math.abs(y)) && Math.abs(a - d) <= 1e-6 * Math.max(1, Math.abs(a), Math.abs(d));
      }
    }]);
  }(/*#__PURE__*/_wrapNativeSuper(Float32Array));
  f.prototype.sub = f.prototype.subtract;
  f.prototype.mul = f.prototype.multiply;
  f.prototype.div = f.prototype.divide;
  f.prototype.dist = f.prototype.distance;
  f.prototype.sqrDist = f.prototype.squaredDistance;
  f.sub = f.subtract;
  f.mul = f.multiply;
  f.div = f.divide;
  f.dist = f.distance;
  f.sqrDist = f.squaredDistance;
  f.sqrLen = f.squaredLength;
  f.mag = f.magnitude;
  f.length = f.magnitude;
  f.len = f.magnitude;
  var ke = new Float32Array([0, 0, 0, 1]),
    le,
    ie,
    ce,
    U,
    W,
    Le,
    he,
    p = /*#__PURE__*/function (_Float32Array7) {
      function p() {
        var _this7;
        _classCallCheck(this, p);
        for (var _len11 = arguments.length, e = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
          e[_key11] = arguments[_key11];
        }
        switch (e.length) {
          case 4:
            _this7 = _callSuper(this, p, [e]);
            break;
          case 2:
            _this7 = _callSuper(this, p, [e[0], e[1], 4]);
            break;
          case 1:
            {
              var t = e[0];
              t === void 0 ? _this7 = _callSuper(this, p, [ke]) : typeof t == "number" ? _this7 = _callSuper(this, p, [[t, t, t, t]]) : _this7 = _callSuper(this, p, [t, 0, 4]);
              break;
            }
          default:
            _this7 = _callSuper(this, p, [ke]);
            break;
        }
        return _assertThisInitialized(_this7);
      }
      _inherits(p, _Float32Array7);
      return _createClass(p, [{
        key: "x",
        get: function get() {
          return this[0];
        },
        set: function set(e) {
          this[0] = e;
        }
      }, {
        key: "y",
        get: function get() {
          return this[1];
        },
        set: function set(e) {
          this[1] = e;
        }
      }, {
        key: "z",
        get: function get() {
          return this[2];
        },
        set: function set(e) {
          this[2] = e;
        }
      }, {
        key: "w",
        get: function get() {
          return this[3];
        },
        set: function set(e) {
          this[3] = e;
        }
      }, {
        key: "magnitude",
        get: function get() {
          var e = this[0],
            t = this[1],
            n = this[2],
            s = this[3];
          return Math.sqrt(e * e + t * t + n * n + s * s);
        }
      }, {
        key: "mag",
        get: function get() {
          return this.magnitude;
        }
      }, {
        key: "str",
        get: function get() {
          return p.str(this);
        }
      }, {
        key: "copy",
        value: function copy(e) {
          return _superPropGet(p, "set", this)([e]), this;
        }
      }, {
        key: "identity",
        value: function identity() {
          return this.set(ke), this;
        }
      }, {
        key: "multiply",
        value: function multiply(e) {
          return p.multiply(this, this, e);
        }
      }, {
        key: "mul",
        value: function mul(e) {
          return this;
        }
      }, {
        key: "rotateX",
        value: function rotateX(e) {
          return p.rotateX(this, this, e);
        }
      }, {
        key: "rotateY",
        value: function rotateY(e) {
          return p.rotateY(this, this, e);
        }
      }, {
        key: "rotateZ",
        value: function rotateZ(e) {
          return p.rotateZ(this, this, e);
        }
      }, {
        key: "invert",
        value: function invert() {
          return p.invert(this, this);
        }
      }, {
        key: "scale",
        value: function scale(e) {
          return this[0] *= e, this[1] *= e, this[2] *= e, this[3] *= e, this;
        }
      }, {
        key: "dot",
        value: function dot(e) {
          return p.dot(this, e);
        }
      }], [{
        key: "BYTE_LENGTH",
        get: function get() {
          return 4 * Float32Array.BYTES_PER_ELEMENT;
        }
      }, {
        key: "create",
        value: function create() {
          return new p();
        }
      }, {
        key: "identity",
        value: function identity(e) {
          return e[0] = 0, e[1] = 0, e[2] = 0, e[3] = 1, e;
        }
      }, {
        key: "setAxisAngle",
        value: function setAxisAngle(e, t, n) {
          n *= .5;
          var s = Math.sin(n);
          return e[0] = s * t[0], e[1] = s * t[1], e[2] = s * t[2], e[3] = Math.cos(n), e;
        }
      }, {
        key: "getAxisAngle",
        value: function getAxisAngle(e, t) {
          var n = Math.acos(t[3]) * 2,
            s = Math.sin(n / 2);
          return s > 1e-6 ? (e[0] = t[0] / s, e[1] = t[1] / s, e[2] = t[2] / s) : (e[0] = 1, e[1] = 0, e[2] = 0), n;
        }
      }, {
        key: "getAngle",
        value: function getAngle(e, t) {
          var n = p.dot(e, t);
          return Math.acos(2 * n * n - 1);
        }
      }, {
        key: "multiply",
        value: function multiply(e, t, n) {
          var s = t[0],
            r = t[1],
            a = t[2],
            i = t[3],
            c = n[0],
            y = n[1],
            d = n[2],
            l = n[3];
          return e[0] = s * l + i * c + r * d - a * y, e[1] = r * l + i * y + a * c - s * d, e[2] = a * l + i * d + s * y - r * c, e[3] = i * l - s * c - r * y - a * d, e;
        }
      }, {
        key: "rotateX",
        value: function rotateX(e, t, n) {
          n *= .5;
          var s = t[0],
            r = t[1],
            a = t[2],
            i = t[3],
            c = Math.sin(n),
            y = Math.cos(n);
          return e[0] = s * y + i * c, e[1] = r * y + a * c, e[2] = a * y - r * c, e[3] = i * y - s * c, e;
        }
      }, {
        key: "rotateY",
        value: function rotateY(e, t, n) {
          n *= .5;
          var s = t[0],
            r = t[1],
            a = t[2],
            i = t[3],
            c = Math.sin(n),
            y = Math.cos(n);
          return e[0] = s * y - a * c, e[1] = r * y + i * c, e[2] = a * y + s * c, e[3] = i * y - r * c, e;
        }
      }, {
        key: "rotateZ",
        value: function rotateZ(e, t, n) {
          n *= .5;
          var s = t[0],
            r = t[1],
            a = t[2],
            i = t[3],
            c = Math.sin(n),
            y = Math.cos(n);
          return e[0] = s * y + r * c, e[1] = r * y - s * c, e[2] = a * y + i * c, e[3] = i * y - a * c, e;
        }
      }, {
        key: "calculateW",
        value: function calculateW(e, t) {
          var n = t[0],
            s = t[1],
            r = t[2];
          return e[0] = n, e[1] = s, e[2] = r, e[3] = Math.sqrt(Math.abs(1 - n * n - s * s - r * r)), e;
        }
      }, {
        key: "exp",
        value: function exp(e, t) {
          var n = t[0],
            s = t[1],
            r = t[2],
            a = t[3],
            i = Math.sqrt(n * n + s * s + r * r),
            c = Math.exp(a),
            y = i > 0 ? c * Math.sin(i) / i : 0;
          return e[0] = n * y, e[1] = s * y, e[2] = r * y, e[3] = c * Math.cos(i), e;
        }
      }, {
        key: "ln",
        value: function ln(e, t) {
          var n = t[0],
            s = t[1],
            r = t[2],
            a = t[3],
            i = Math.sqrt(n * n + s * s + r * r),
            c = i > 0 ? Math.atan2(i, a) / i : 0;
          return e[0] = n * c, e[1] = s * c, e[2] = r * c, e[3] = .5 * Math.log(n * n + s * s + r * r + a * a), e;
        }
      }, {
        key: "pow",
        value: function pow(e, t, n) {
          return p.ln(e, t), p.scale(e, e, n), p.exp(e, e), e;
        }
      }, {
        key: "slerp",
        value: function slerp(e, t, n, s) {
          var r = t[0],
            a = t[1],
            i = t[2],
            c = t[3],
            y = n[0],
            d = n[1],
            l = n[2],
            L = n[3],
            k,
            h,
            b = r * y + a * d + i * l + c * L;
          if (b < 0 && (b = -b, y = -y, d = -d, l = -l, L = -L), 1 - b > 1e-6) {
            var x = Math.acos(b),
              M = Math.sin(x);
            k = Math.sin((1 - s) * x) / M, h = Math.sin(s * x) / M;
          } else k = 1 - s, h = s;
          return e[0] = k * r + h * y, e[1] = k * a + h * d, e[2] = k * i + h * l, e[3] = k * c + h * L, e;
        }
      }, {
        key: "invert",
        value: function invert(e, t) {
          var n = t[0],
            s = t[1],
            r = t[2],
            a = t[3],
            i = n * n + s * s + r * r + a * a,
            c = i ? 1 / i : 0;
          return e[0] = -n * c, e[1] = -s * c, e[2] = -r * c, e[3] = a * c, e;
        }
      }, {
        key: "conjugate",
        value: function conjugate(e, t) {
          return e[0] = -t[0], e[1] = -t[1], e[2] = -t[2], e[3] = t[3], e;
        }
      }, {
        key: "fromMat3",
        value: function fromMat3(e, t) {
          var n = t[0] + t[4] + t[8],
            s;
          if (n > 0) s = Math.sqrt(n + 1), e[3] = .5 * s, s = .5 / s, e[0] = (t[5] - t[7]) * s, e[1] = (t[6] - t[2]) * s, e[2] = (t[1] - t[3]) * s;else {
            var r = 0;
            t[4] > t[0] && (r = 1), t[8] > t[r * 3 + r] && (r = 2);
            var a = (r + 1) % 3,
              i = (r + 2) % 3;
            s = Math.sqrt(t[r * 3 + r] - t[a * 3 + a] - t[i * 3 + i] + 1), e[r] = .5 * s, s = .5 / s, e[3] = (t[a * 3 + i] - t[i * 3 + a]) * s, e[a] = (t[a * 3 + r] + t[r * 3 + a]) * s, e[i] = (t[i * 3 + r] + t[r * 3 + i]) * s;
          }
          return e;
        }
      }, {
        key: "fromEuler",
        value: function fromEuler(e, t, n, s) {
          var r = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : w(p, le);
          var a = .5 * Math.PI / 180;
          t *= a, n *= a, s *= a;
          var i = Math.sin(t),
            c = Math.cos(t),
            y = Math.sin(n),
            d = Math.cos(n),
            l = Math.sin(s),
            L = Math.cos(s);
          switch (r) {
            case "xyz":
              e[0] = i * d * L + c * y * l, e[1] = c * y * L - i * d * l, e[2] = c * d * l + i * y * L, e[3] = c * d * L - i * y * l;
              break;
            case "xzy":
              e[0] = i * d * L - c * y * l, e[1] = c * y * L - i * d * l, e[2] = c * d * l + i * y * L, e[3] = c * d * L + i * y * l;
              break;
            case "yxz":
              e[0] = i * d * L + c * y * l, e[1] = c * y * L - i * d * l, e[2] = c * d * l - i * y * L, e[3] = c * d * L + i * y * l;
              break;
            case "yzx":
              e[0] = i * d * L + c * y * l, e[1] = c * y * L + i * d * l, e[2] = c * d * l - i * y * L, e[3] = c * d * L - i * y * l;
              break;
            case "zxy":
              e[0] = i * d * L - c * y * l, e[1] = c * y * L + i * d * l, e[2] = c * d * l + i * y * L, e[3] = c * d * L - i * y * l;
              break;
            case "zyx":
              e[0] = i * d * L - c * y * l, e[1] = c * y * L + i * d * l, e[2] = c * d * l - i * y * L, e[3] = c * d * L + i * y * l;
              break;
            default:
              throw new Error("Unknown angle order ".concat(r));
          }
          return e;
        }
      }, {
        key: "str",
        value: function str(e) {
          return "Quat(".concat(e.join(", "), ")");
        }
      }, {
        key: "clone",
        value: function clone(e) {
          return new p(e);
        }
      }, {
        key: "fromValues",
        value: function fromValues(e, t, n, s) {
          return new p(e, t, n, s);
        }
      }, {
        key: "copy",
        value: function copy(e, t) {
          return e[0] = t[0], e[1] = t[1], e[2] = t[2], e[3] = t[3], e;
        }
      }, {
        key: "set",
        value: function set(e, t, n, s, r) {
          return e;
        }
      }, {
        key: "add",
        value: function add(e, t, n) {
          return e;
        }
      }, {
        key: "mul",
        value: function mul(e, t, n) {
          return e;
        }
      }, {
        key: "scale",
        value: function scale(e, t, n) {
          return e[0] = t[0] * n, e[1] = t[1] * n, e[2] = t[2] * n, e[3] = t[3] * n, e;
        }
      }, {
        key: "dot",
        value: function dot(e, t) {
          return e[0] * t[0] + e[1] * t[1] + e[2] * t[2] + e[3] * t[3];
        }
      }, {
        key: "lerp",
        value: function lerp(e, t, n, s) {
          return e;
        }
      }, {
        key: "magnitude",
        value: function magnitude(e) {
          return 0;
        }
      }, {
        key: "mag",
        value: function mag(e) {
          return 0;
        }
      }, {
        key: "length",
        value: function length(e) {
          return 0;
        }
      }, {
        key: "len",
        value: function len(e) {
          return 0;
        }
      }, {
        key: "squaredLength",
        value: function squaredLength(e) {
          return 0;
        }
      }, {
        key: "sqrLen",
        value: function sqrLen(e) {
          return 0;
        }
      }, {
        key: "normalize",
        value: function normalize(e, t) {
          return e;
        }
      }, {
        key: "exactEquals",
        value: function exactEquals(e, t) {
          return !1;
        }
      }, {
        key: "equals",
        value: function equals(e, t) {
          return !1;
        }
      }, {
        key: "rotationTo",
        value: function rotationTo(e, t, n) {
          var s = q.dot(t, n);
          return s < -.999999 ? (q.cross(w(p, W), w(p, Le), t), q.mag(w(p, W)) < 1e-6 && q.cross(w(p, W), w(p, he), t), q.normalize(w(p, W), w(p, W)), p.setAxisAngle(e, w(p, W), Math.PI), e) : s > .999999 ? (e[0] = 0, e[1] = 0, e[2] = 0, e[3] = 1, e) : (q.cross(w(p, W), t, n), e[0] = w(p, W)[0], e[1] = w(p, W)[1], e[2] = w(p, W)[2], e[3] = 1 + s, p.normalize(e, e));
        }
      }, {
        key: "sqlerp",
        value: function sqlerp(e, t, n, s, r, a) {
          return p.slerp(w(p, ie), t, r, a), p.slerp(w(p, ce), n, s, a), p.slerp(e, w(p, ie), w(p, ce), 2 * a * (1 - a)), e;
        }
      }, {
        key: "setAxes",
        value: function setAxes(e, t, n, s) {
          return w(p, U)[0] = n[0], w(p, U)[3] = n[1], w(p, U)[6] = n[2], w(p, U)[1] = s[0], w(p, U)[4] = s[1], w(p, U)[7] = s[2], w(p, U)[2] = -t[0], w(p, U)[5] = -t[1], w(p, U)[8] = -t[2], p.normalize(e, p.fromMat3(e, w(p, U)));
        }
      }]);
    }(/*#__PURE__*/_wrapNativeSuper(Float32Array));
  le = new WeakMap(), ie = new WeakMap(), ce = new WeakMap(), U = new WeakMap(), W = new WeakMap(), Le = new WeakMap(), he = new WeakMap(), G(p, le, "zyx"), G(p, ie, new Float32Array(4)), G(p, ce, new Float32Array(4)), G(p, U, new Float32Array(9)), G(p, W, new Float32Array(3)), G(p, Le, new Float32Array([1, 0, 0])), G(p, he, new Float32Array([0, 1, 0]));
  var F = p;
  F.set = f.set;
  F.add = f.add;
  F.lerp = f.lerp;
  F.normalize = f.normalize;
  F.squaredLength = f.squaredLength;
  F.sqrLen = f.squaredLength;
  F.exactEquals = f.exactEquals;
  F.equals = f.equals;
  F.magnitude = f.magnitude;
  F.prototype.mul = F.prototype.multiply;
  F.mul = F.multiply;
  F.mag = F.magnitude;
  F.length = F.magnitude;
  F.len = F.magnitude;
  var Te = new Float32Array([0, 0, 0, 1, 0, 0, 0, 0]),
    ye,
    de,
    j = /*#__PURE__*/function (_Float32Array8) {
      function j() {
        var _this8;
        _classCallCheck(this, j);
        for (var _len12 = arguments.length, e = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
          e[_key12] = arguments[_key12];
        }
        switch (e.length) {
          case 8:
            _this8 = _callSuper(this, j, [e]);
            break;
          case 2:
            _this8 = _callSuper(this, j, [e[0], e[1], 8]);
            break;
          case 1:
            {
              var t = e[0];
              t === void 0 ? _this8 = _callSuper(this, j, [Te]) : typeof t == "number" ? _this8 = _callSuper(this, j, [[t, t, t, t, t, t, t, t]]) : _this8 = _callSuper(this, j, [t, 0, 8]);
              break;
            }
          default:
            _this8 = _callSuper(this, j, [Te]);
            break;
        }
        return _assertThisInitialized(_this8);
      }
      _inherits(j, _Float32Array8);
      return _createClass(j, [{
        key: "str",
        get: function get() {
          return j.str(this);
        }
      }, {
        key: "copy",
        value: function copy(e) {
          return _superPropGet(j, "set", this)([e]), this;
        }
      }], [{
        key: "BYTE_LENGTH",
        get: function get() {
          return 8 * Float32Array.BYTES_PER_ELEMENT;
        }
      }, {
        key: "create",
        value: function create() {
          return new j();
        }
      }, {
        key: "clone",
        value: function clone(e) {
          return new j(e);
        }
      }, {
        key: "fromValues",
        value: function fromValues(e, t, n, s, r, a, i, c) {
          return new j(e, t, n, s, r, a, i, c);
        }
      }, {
        key: "fromRotationTranslationValues",
        value: function fromRotationTranslationValues(e, t, n, s, r, a, i) {
          var c = r * .5,
            y = a * .5,
            d = i * .5;
          return new j(e, t, n, s, c * s + y * n - d * t, y * s + d * e - c * n, d * s + c * t - y * e, -c * e - y * t - d * n);
        }
      }, {
        key: "fromRotationTranslation",
        value: function fromRotationTranslation(e, t, n) {
          var s = n[0] * .5,
            r = n[1] * .5,
            a = n[2] * .5,
            i = t[0],
            c = t[1],
            y = t[2],
            d = t[3];
          return e[0] = i, e[1] = c, e[2] = y, e[3] = d, e[4] = s * d + r * y - a * c, e[5] = r * d + a * i - s * y, e[6] = a * d + s * c - r * i, e[7] = -s * i - r * c - a * y, e;
        }
      }, {
        key: "fromTranslation",
        value: function fromTranslation(e, t) {
          return e[0] = 0, e[1] = 0, e[2] = 0, e[3] = 1, e[4] = t[0] * .5, e[5] = t[1] * .5, e[6] = t[2] * .5, e[7] = 0, e;
        }
      }, {
        key: "fromRotation",
        value: function fromRotation(e, t) {
          return e[0] = t[0], e[1] = t[1], e[2] = t[2], e[3] = t[3], e[4] = 0, e[5] = 0, e[6] = 0, e[7] = 0, e;
        }
      }, {
        key: "fromMat4",
        value: function fromMat4(e, t) {
          return Z.getRotation(w(j, ye), t), Z.getTranslation(w(j, de), t), j.fromRotationTranslation(e, w(j, ye), w(j, de));
        }
      }, {
        key: "copy",
        value: function copy(e, t) {
          return e[0] = t[0], e[1] = t[1], e[2] = t[2], e[3] = t[3], e[4] = t[4], e[5] = t[5], e[6] = t[6], e[7] = t[7], e;
        }
      }, {
        key: "identity",
        value: function identity(e) {
          return e[0] = 0, e[1] = 0, e[2] = 0, e[3] = 1, e[4] = 0, e[5] = 0, e[6] = 0, e[7] = 0, e;
        }
      }, {
        key: "set",
        value: function set(e, t, n, s, r, a, i, c, y) {
          return e[0] = t, e[1] = n, e[2] = s, e[3] = r, e[4] = a, e[5] = i, e[6] = c, e[7] = y, e;
        }
      }, {
        key: "getReal",
        value: function getReal(e, t) {
          return e[0] = t[0], e[1] = t[1], e[2] = t[2], e[3] = t[3], e;
        }
      }, {
        key: "getDual",
        value: function getDual(e, t) {
          return e[0] = t[4], e[1] = t[5], e[2] = t[6], e[3] = t[7], e;
        }
      }, {
        key: "setReal",
        value: function setReal(e, t) {
          return e[0] = t[0], e[1] = t[1], e[2] = t[2], e[3] = t[3], e;
        }
      }, {
        key: "setDual",
        value: function setDual(e, t) {
          return e[4] = t[0], e[5] = t[1], e[6] = t[2], e[7] = t[3], e;
        }
      }, {
        key: "getTranslation",
        value: function getTranslation(e, t) {
          var n = t[4],
            s = t[5],
            r = t[6],
            a = t[7],
            i = -t[0],
            c = -t[1],
            y = -t[2],
            d = t[3];
          return e[0] = (n * d + a * i + s * y - r * c) * 2, e[1] = (s * d + a * c + r * i - n * y) * 2, e[2] = (r * d + a * y + n * c - s * i) * 2, e;
        }
      }, {
        key: "translate",
        value: function translate(e, t, n) {
          var s = t[0],
            r = t[1],
            a = t[2],
            i = t[3],
            c = n[0] * .5,
            y = n[1] * .5,
            d = n[2] * .5,
            l = t[4],
            L = t[5],
            k = t[6],
            h = t[7];
          return e[0] = s, e[1] = r, e[2] = a, e[3] = i, e[4] = i * c + r * d - a * y + l, e[5] = i * y + a * c - s * d + L, e[6] = i * d + s * y - r * c + k, e[7] = -s * c - r * y - a * d + h, e;
        }
      }, {
        key: "rotateX",
        value: function rotateX(e, t, n) {
          var s = -t[0],
            r = -t[1],
            a = -t[2],
            i = t[3],
            c = t[4],
            y = t[5],
            d = t[6],
            l = t[7],
            L = c * i + l * s + y * a - d * r,
            k = y * i + l * r + d * s - c * a,
            h = d * i + l * a + c * r - y * s,
            b = l * i - c * s - y * r - d * a;
          return F.rotateX(e, t, n), s = e[0], r = e[1], a = e[2], i = e[3], e[4] = L * i + b * s + k * a - h * r, e[5] = k * i + b * r + h * s - L * a, e[6] = h * i + b * a + L * r - k * s, e[7] = b * i - L * s - k * r - h * a, e;
        }
      }, {
        key: "rotateY",
        value: function rotateY(e, t, n) {
          var s = -t[0],
            r = -t[1],
            a = -t[2],
            i = t[3],
            c = t[4],
            y = t[5],
            d = t[6],
            l = t[7],
            L = c * i + l * s + y * a - d * r,
            k = y * i + l * r + d * s - c * a,
            h = d * i + l * a + c * r - y * s,
            b = l * i - c * s - y * r - d * a;
          return F.rotateY(e, t, n), s = e[0], r = e[1], a = e[2], i = e[3], e[4] = L * i + b * s + k * a - h * r, e[5] = k * i + b * r + h * s - L * a, e[6] = h * i + b * a + L * r - k * s, e[7] = b * i - L * s - k * r - h * a, e;
        }
      }, {
        key: "rotateZ",
        value: function rotateZ(e, t, n) {
          var s = -t[0],
            r = -t[1],
            a = -t[2],
            i = t[3],
            c = t[4],
            y = t[5],
            d = t[6],
            l = t[7],
            L = c * i + l * s + y * a - d * r,
            k = y * i + l * r + d * s - c * a,
            h = d * i + l * a + c * r - y * s,
            b = l * i - c * s - y * r - d * a;
          return F.rotateZ(e, t, n), s = e[0], r = e[1], a = e[2], i = e[3], e[4] = L * i + b * s + k * a - h * r, e[5] = k * i + b * r + h * s - L * a, e[6] = h * i + b * a + L * r - k * s, e[7] = b * i - L * s - k * r - h * a, e;
        }
      }, {
        key: "rotateByQuatAppend",
        value: function rotateByQuatAppend(e, t, n) {
          var s = n[0],
            r = n[1],
            a = n[2],
            i = n[3],
            c = t[0],
            y = t[1],
            d = t[2],
            l = t[3];
          return e[0] = c * i + l * s + y * a - d * r, e[1] = y * i + l * r + d * s - c * a, e[2] = d * i + l * a + c * r - y * s, e[3] = l * i - c * s - y * r - d * a, c = t[4], y = t[5], d = t[6], l = t[7], e[4] = c * i + l * s + y * a - d * r, e[5] = y * i + l * r + d * s - c * a, e[6] = d * i + l * a + c * r - y * s, e[7] = l * i - c * s - y * r - d * a, e;
        }
      }, {
        key: "rotateByQuatPrepend",
        value: function rotateByQuatPrepend(e, t, n) {
          var s = t[0],
            r = t[1],
            a = t[2],
            i = t[3],
            c = n[0],
            y = n[1],
            d = n[2],
            l = n[3];
          return e[0] = s * l + i * c + r * d - a * y, e[1] = r * l + i * y + a * c - s * d, e[2] = a * l + i * d + s * y - r * c, e[3] = i * l - s * c - r * y - a * d, c = n[4], y = n[5], d = n[6], l = n[7], e[4] = s * l + i * c + r * d - a * y, e[5] = r * l + i * y + a * c - s * d, e[6] = a * l + i * d + s * y - r * c, e[7] = i * l - s * c - r * y - a * d, e;
        }
      }, {
        key: "rotateAroundAxis",
        value: function rotateAroundAxis(e, t, n, s) {
          if (Math.abs(s) < 1e-6) return j.copy(e, t);
          var r = Math.sqrt(n[0] * n[0] + n[1] * n[1] + n[2] * n[2]);
          s *= .5;
          var a = Math.sin(s),
            i = a * n[0] / r,
            c = a * n[1] / r,
            y = a * n[2] / r,
            d = Math.cos(s),
            l = t[0],
            L = t[1],
            k = t[2],
            h = t[3];
          e[0] = l * d + h * i + L * y - k * c, e[1] = L * d + h * c + k * i - l * y, e[2] = k * d + h * y + l * c - L * i, e[3] = h * d - l * i - L * c - k * y;
          var b = t[4],
            x = t[5],
            M = t[6],
            T = t[7];
          return e[4] = b * d + T * i + x * y - M * c, e[5] = x * d + T * c + M * i - b * y, e[6] = M * d + T * y + b * c - x * i, e[7] = T * d - b * i - x * c - M * y, e;
        }
      }, {
        key: "add",
        value: function add(e, t, n) {
          return e[0] = t[0] + n[0], e[1] = t[1] + n[1], e[2] = t[2] + n[2], e[3] = t[3] + n[3], e[4] = t[4] + n[4], e[5] = t[5] + n[5], e[6] = t[6] + n[6], e[7] = t[7] + n[7], e;
        }
      }, {
        key: "multiply",
        value: function multiply(e, t, n) {
          var s = t[0],
            r = t[1],
            a = t[2],
            i = t[3],
            c = n[4],
            y = n[5],
            d = n[6],
            l = n[7],
            L = t[4],
            k = t[5],
            h = t[6],
            b = t[7],
            x = n[0],
            M = n[1],
            T = n[2],
            R = n[3];
          return e[0] = s * R + i * x + r * T - a * M, e[1] = r * R + i * M + a * x - s * T, e[2] = a * R + i * T + s * M - r * x, e[3] = i * R - s * x - r * M - a * T, e[4] = s * l + i * c + r * d - a * y + L * R + b * x + k * T - h * M, e[5] = r * l + i * y + a * c - s * d + k * R + b * M + h * x - L * T, e[6] = a * l + i * d + s * y - r * c + h * R + b * T + L * M - k * x, e[7] = i * l - s * c - r * y - a * d + b * R - L * x - k * M - h * T, e;
        }
      }, {
        key: "mul",
        value: function mul(e, t, n) {
          return e;
        }
      }, {
        key: "scale",
        value: function scale(e, t, n) {
          return e[0] = t[0] * n, e[1] = t[1] * n, e[2] = t[2] * n, e[3] = t[3] * n, e[4] = t[4] * n, e[5] = t[5] * n, e[6] = t[6] * n, e[7] = t[7] * n, e;
        }
      }, {
        key: "dot",
        value: function dot(e, t) {
          return 0;
        }
      }, {
        key: "lerp",
        value: function lerp(e, t, n, s) {
          var r = 1 - s;
          return j.dot(t, n) < 0 && (s = -s), e[0] = t[0] * r + n[0] * s, e[1] = t[1] * r + n[1] * s, e[2] = t[2] * r + n[2] * s, e[3] = t[3] * r + n[3] * s, e[4] = t[4] * r + n[4] * s, e[5] = t[5] * r + n[5] * s, e[6] = t[6] * r + n[6] * s, e[7] = t[7] * r + n[7] * s, e;
        }
      }, {
        key: "invert",
        value: function invert(e, t) {
          var n = j.squaredLength(t);
          return e[0] = -t[0] / n, e[1] = -t[1] / n, e[2] = -t[2] / n, e[3] = t[3] / n, e[4] = -t[4] / n, e[5] = -t[5] / n, e[6] = -t[6] / n, e[7] = t[7] / n, e;
        }
      }, {
        key: "conjugate",
        value: function conjugate(e, t) {
          return e[0] = -t[0], e[1] = -t[1], e[2] = -t[2], e[3] = t[3], e[4] = -t[4], e[5] = -t[5], e[6] = -t[6], e[7] = t[7], e;
        }
      }, {
        key: "magnitude",
        value: function magnitude(e) {
          return 0;
        }
      }, {
        key: "mag",
        value: function mag(e) {
          return 0;
        }
      }, {
        key: "length",
        value: function length(e) {
          return 0;
        }
      }, {
        key: "len",
        value: function len(e) {
          return 0;
        }
      }, {
        key: "squaredLength",
        value: function squaredLength(e) {
          return 0;
        }
      }, {
        key: "sqrLen",
        value: function sqrLen(e) {
          return 0;
        }
      }, {
        key: "normalize",
        value: function normalize(e, t) {
          var n = j.squaredLength(t);
          if (n > 0) {
            n = Math.sqrt(n);
            var s = t[0] / n,
              r = t[1] / n,
              a = t[2] / n,
              i = t[3] / n,
              c = t[4],
              y = t[5],
              d = t[6],
              l = t[7],
              L = s * c + r * y + a * d + i * l;
            e[0] = s, e[1] = r, e[2] = a, e[3] = i, e[4] = (c - s * L) / n, e[5] = (y - r * L) / n, e[6] = (d - a * L) / n, e[7] = (l - i * L) / n;
          }
          return e;
        }
      }, {
        key: "str",
        value: function str(e) {
          return "Quat2(".concat(e.join(", "), ")");
        }
      }, {
        key: "exactEquals",
        value: function exactEquals(e, t) {
          return e[0] === t[0] && e[1] === t[1] && e[2] === t[2] && e[3] === t[3] && e[4] === t[4] && e[5] === t[5] && e[6] === t[6] && e[7] === t[7];
        }
      }, {
        key: "equals",
        value: function equals(e, t) {
          var n = e[0],
            s = e[1],
            r = e[2],
            a = e[3],
            i = e[4],
            c = e[5],
            y = e[6],
            d = e[7],
            l = t[0],
            L = t[1],
            k = t[2],
            h = t[3],
            b = t[4],
            x = t[5],
            M = t[6],
            T = t[7];
          return Math.abs(n - l) <= 1e-6 * Math.max(1, Math.abs(n), Math.abs(l)) && Math.abs(s - L) <= 1e-6 * Math.max(1, Math.abs(s), Math.abs(L)) && Math.abs(r - k) <= 1e-6 * Math.max(1, Math.abs(r), Math.abs(k)) && Math.abs(a - h) <= 1e-6 * Math.max(1, Math.abs(a), Math.abs(h)) && Math.abs(i - b) <= 1e-6 * Math.max(1, Math.abs(i), Math.abs(b)) && Math.abs(c - x) <= 1e-6 * Math.max(1, Math.abs(c), Math.abs(x)) && Math.abs(y - M) <= 1e-6 * Math.max(1, Math.abs(y), Math.abs(M)) && Math.abs(d - T) <= 1e-6 * Math.max(1, Math.abs(d), Math.abs(T));
        }
      }]);
    }(/*#__PURE__*/_wrapNativeSuper(Float32Array));
  ye = new WeakMap(), de = new WeakMap(), G(j, ye, new Float32Array(4)), G(j, de, new Float32Array(3));
  var K = j;
  K.dot = F.dot;
  K.squaredLength = F.squaredLength;
  K.sqrLen = F.squaredLength;
  K.mag = F.magnitude;
  K.length = F.magnitude;
  K.len = F.magnitude;
  K.mul = K.multiply;
  var D = /*#__PURE__*/function (_Float32Array9) {
    function E() {
      var _this9;
      _classCallCheck(this, E);
      switch (arguments.length) {
        case 2:
          {
            var t = arguments.length <= 0 ? undefined : arguments[0];
            typeof t == "number" ? _this9 = _callSuper(this, E, [[t, arguments.length <= 1 ? undefined : arguments[1]]]) : _this9 = _callSuper(this, E, [t, arguments.length <= 1 ? undefined : arguments[1], 2]);
            break;
          }
        case 1:
          {
            var _t = arguments.length <= 0 ? undefined : arguments[0];
            _t === void 0 ? _this9 = _callSuper(this, E, [2]) : typeof _t == "number" ? _this9 = _callSuper(this, E, [[_t, _t]]) : _this9 = _callSuper(this, E, [_t, 0, 2]);
            break;
          }
        default:
          _this9 = _callSuper(this, E, [2]);
          break;
      }
      return _assertThisInitialized(_this9);
    }
    _inherits(E, _Float32Array9);
    return _createClass(E, [{
      key: "x",
      get: function get() {
        return this[0];
      },
      set: function set(e) {
        this[0] = e;
      }
    }, {
      key: "y",
      get: function get() {
        return this[1];
      },
      set: function set(e) {
        this[1] = e;
      }
    }, {
      key: "r",
      get: function get() {
        return this[0];
      },
      set: function set(e) {
        this[0] = e;
      }
    }, {
      key: "g",
      get: function get() {
        return this[1];
      },
      set: function set(e) {
        this[1] = e;
      }
    }, {
      key: "magnitude",
      get: function get() {
        return Math.hypot(this[0], this[1]);
      }
    }, {
      key: "mag",
      get: function get() {
        return this.magnitude;
      }
    }, {
      key: "squaredMagnitude",
      get: function get() {
        var e = this[0],
          t = this[1];
        return e * e + t * t;
      }
    }, {
      key: "sqrMag",
      get: function get() {
        return this.squaredMagnitude;
      }
    }, {
      key: "str",
      get: function get() {
        return E.str(this);
      }
    }, {
      key: "copy",
      value: function copy(e) {
        return this.set(e), this;
      }
    }, {
      key: "add",
      value: function add(e) {
        return this[0] += e[0], this[1] += e[1], this;
      }
    }, {
      key: "subtract",
      value: function subtract(e) {
        return this[0] -= e[0], this[1] -= e[1], this;
      }
    }, {
      key: "sub",
      value: function sub(e) {
        return this;
      }
    }, {
      key: "multiply",
      value: function multiply(e) {
        return this[0] *= e[0], this[1] *= e[1], this;
      }
    }, {
      key: "mul",
      value: function mul(e) {
        return this;
      }
    }, {
      key: "divide",
      value: function divide(e) {
        return this[0] /= e[0], this[1] /= e[1], this;
      }
    }, {
      key: "div",
      value: function div(e) {
        return this;
      }
    }, {
      key: "scale",
      value: function scale(e) {
        return this[0] *= e, this[1] *= e, this;
      }
    }, {
      key: "scaleAndAdd",
      value: function scaleAndAdd(e, t) {
        return this[0] += e[0] * t, this[1] += e[1] * t, this;
      }
    }, {
      key: "distance",
      value: function distance(e) {
        return E.distance(this, e);
      }
    }, {
      key: "dist",
      value: function dist(e) {
        return 0;
      }
    }, {
      key: "squaredDistance",
      value: function squaredDistance(e) {
        return E.squaredDistance(this, e);
      }
    }, {
      key: "sqrDist",
      value: function sqrDist(e) {
        return 0;
      }
    }, {
      key: "negate",
      value: function negate() {
        return this[0] *= -1, this[1] *= -1, this;
      }
    }, {
      key: "invert",
      value: function invert() {
        return this[0] = 1 / this[0], this[1] = 1 / this[1], this;
      }
    }, {
      key: "abs",
      value: function abs() {
        return this[0] = Math.abs(this[0]), this[1] = Math.abs(this[1]), this;
      }
    }, {
      key: "dot",
      value: function dot(e) {
        return this[0] * e[0] + this[1] * e[1];
      }
    }, {
      key: "normalize",
      value: function normalize() {
        return E.normalize(this, this);
      }
    }], [{
      key: "BYTE_LENGTH",
      get: function get() {
        return 2 * Float32Array.BYTES_PER_ELEMENT;
      }
    }, {
      key: "create",
      value: function create() {
        return new E();
      }
    }, {
      key: "clone",
      value: function clone(e) {
        return new E(e);
      }
    }, {
      key: "fromValues",
      value: function fromValues(e, t) {
        return new E(e, t);
      }
    }, {
      key: "copy",
      value: function copy(e, t) {
        return e[0] = t[0], e[1] = t[1], e;
      }
    }, {
      key: "set",
      value: function set(e, t, n) {
        return e[0] = t, e[1] = n, e;
      }
    }, {
      key: "add",
      value: function add(e, t, n) {
        return e[0] = t[0] + n[0], e[1] = t[1] + n[1], e;
      }
    }, {
      key: "subtract",
      value: function subtract(e, t, n) {
        return e[0] = t[0] - n[0], e[1] = t[1] - n[1], e;
      }
    }, {
      key: "sub",
      value: function sub(e, t, n) {
        return e;
      }
    }, {
      key: "multiply",
      value: function multiply(e, t, n) {
        return e[0] = t[0] * n[0], e[1] = t[1] * n[1], e;
      }
    }, {
      key: "mul",
      value: function mul(e, t, n) {
        return e;
      }
    }, {
      key: "divide",
      value: function divide(e, t, n) {
        return e[0] = t[0] / n[0], e[1] = t[1] / n[1], e;
      }
    }, {
      key: "div",
      value: function div(e, t, n) {
        return e;
      }
    }, {
      key: "ceil",
      value: function ceil(e, t) {
        return e[0] = Math.ceil(t[0]), e[1] = Math.ceil(t[1]), e;
      }
    }, {
      key: "floor",
      value: function floor(e, t) {
        return e[0] = Math.floor(t[0]), e[1] = Math.floor(t[1]), e;
      }
    }, {
      key: "min",
      value: function min(e, t, n) {
        return e[0] = Math.min(t[0], n[0]), e[1] = Math.min(t[1], n[1]), e;
      }
    }, {
      key: "max",
      value: function max(e, t, n) {
        return e[0] = Math.max(t[0], n[0]), e[1] = Math.max(t[1], n[1]), e;
      }
    }, {
      key: "round",
      value: function round(e, t) {
        return e[0] = Math.round(t[0]), e[1] = Math.round(t[1]), e;
      }
    }, {
      key: "scale",
      value: function scale(e, t, n) {
        return e[0] = t[0] * n, e[1] = t[1] * n, e;
      }
    }, {
      key: "scaleAndAdd",
      value: function scaleAndAdd(e, t, n, s) {
        return e[0] = t[0] + n[0] * s, e[1] = t[1] + n[1] * s, e;
      }
    }, {
      key: "distance",
      value: function distance(e, t) {
        return Math.hypot(t[0] - e[0], t[1] - e[1]);
      }
    }, {
      key: "dist",
      value: function dist(e, t) {
        return 0;
      }
    }, {
      key: "squaredDistance",
      value: function squaredDistance(e, t) {
        var n = t[0] - e[0],
          s = t[1] - e[1];
        return n * n + s * s;
      }
    }, {
      key: "sqrDist",
      value: function sqrDist(e, t) {
        return 0;
      }
    }, {
      key: "magnitude",
      value: function magnitude(e) {
        var t = e[0],
          n = e[1];
        return Math.sqrt(t * t + n * n);
      }
    }, {
      key: "mag",
      value: function mag(e) {
        return 0;
      }
    }, {
      key: "length",
      value: function length(e) {
        return 0;
      }
    }, {
      key: "len",
      value: function len(e) {
        return 0;
      }
    }, {
      key: "squaredLength",
      value: function squaredLength(e) {
        var t = e[0],
          n = e[1];
        return t * t + n * n;
      }
    }, {
      key: "sqrLen",
      value: function sqrLen(e, t) {
        return 0;
      }
    }, {
      key: "negate",
      value: function negate(e, t) {
        return e[0] = -t[0], e[1] = -t[1], e;
      }
    }, {
      key: "inverse",
      value: function inverse(e, t) {
        return e[0] = 1 / t[0], e[1] = 1 / t[1], e;
      }
    }, {
      key: "abs",
      value: function abs(e, t) {
        return e[0] = Math.abs(t[0]), e[1] = Math.abs(t[1]), e;
      }
    }, {
      key: "normalize",
      value: function normalize(e, t) {
        var n = t[0],
          s = t[1],
          r = n * n + s * s;
        return r > 0 && (r = 1 / Math.sqrt(r)), e[0] = t[0] * r, e[1] = t[1] * r, e;
      }
    }, {
      key: "dot",
      value: function dot(e, t) {
        return e[0] * t[0] + e[1] * t[1];
      }
    }, {
      key: "cross",
      value: function cross(e, t, n) {
        var s = t[0] * n[1] - t[1] * n[0];
        return e[0] = e[1] = 0, e[2] = s, e;
      }
    }, {
      key: "lerp",
      value: function lerp(e, t, n, s) {
        var r = t[0],
          a = t[1];
        return e[0] = r + s * (n[0] - r), e[1] = a + s * (n[1] - a), e;
      }
    }, {
      key: "transformMat2",
      value: function transformMat2(e, t, n) {
        var s = t[0],
          r = t[1];
        return e[0] = n[0] * s + n[2] * r, e[1] = n[1] * s + n[3] * r, e;
      }
    }, {
      key: "transformMat2d",
      value: function transformMat2d(e, t, n) {
        var s = t[0],
          r = t[1];
        return e[0] = n[0] * s + n[2] * r + n[4], e[1] = n[1] * s + n[3] * r + n[5], e;
      }
    }, {
      key: "transformMat3",
      value: function transformMat3(e, t, n) {
        var s = t[0],
          r = t[1];
        return e[0] = n[0] * s + n[3] * r + n[6], e[1] = n[1] * s + n[4] * r + n[7], e;
      }
    }, {
      key: "transformMat4",
      value: function transformMat4(e, t, n) {
        var s = t[0],
          r = t[1];
        return e[0] = n[0] * s + n[4] * r + n[12], e[1] = n[1] * s + n[5] * r + n[13], e;
      }
    }, {
      key: "rotate",
      value: function rotate(e, t, n, s) {
        var r = t[0] - n[0],
          a = t[1] - n[1],
          i = Math.sin(s),
          c = Math.cos(s);
        return e[0] = r * c - a * i + n[0], e[1] = r * i + a * c + n[1], e;
      }
    }, {
      key: "angle",
      value: function angle(e, t) {
        var n = e[0],
          s = e[1],
          r = t[0],
          a = t[1],
          i = Math.sqrt(n * n + s * s) * Math.sqrt(r * r + a * a),
          c = i && (n * r + s * a) / i;
        return Math.acos(Math.min(Math.max(c, -1), 1));
      }
    }, {
      key: "zero",
      value: function zero(e) {
        return e[0] = 0, e[1] = 0, e;
      }
    }, {
      key: "exactEquals",
      value: function exactEquals(e, t) {
        return e[0] === t[0] && e[1] === t[1];
      }
    }, {
      key: "equals",
      value: function equals(e, t) {
        var n = e[0],
          s = e[1],
          r = t[0],
          a = t[1];
        return Math.abs(n - r) <= 1e-6 * Math.max(1, Math.abs(n), Math.abs(r)) && Math.abs(s - a) <= 1e-6 * Math.max(1, Math.abs(s), Math.abs(a));
      }
    }, {
      key: "str",
      value: function str(e) {
        return "Vec2(".concat(e.join(", "), ")");
      }
    }]);
  }(/*#__PURE__*/_wrapNativeSuper(Float32Array));
  D.prototype.sub = D.prototype.subtract;
  D.prototype.mul = D.prototype.multiply;
  D.prototype.div = D.prototype.divide;
  D.prototype.dist = D.prototype.distance;
  D.prototype.sqrDist = D.prototype.squaredDistance;
  D.sub = D.subtract;
  D.mul = D.multiply;
  D.div = D.divide;
  D.dist = D.distance;
  D.sqrDist = D.squaredDistance;
  D.sqrLen = D.squaredLength;
  D.mag = D.magnitude;
  D.length = D.magnitude;
  D.len = D.magnitude;
  var me = !1;
  function tt() {
    if (me) return;
    var E = ["xx", "xy", "yx", "yy", "xxx", "xxy", "xyx", "xyy", "yxx", "yxy", "yyx", "yyy", "xxxx", "xxxy", "xxyx", "xxyy", "xyxx", "xyxy", "xyyx", "xyyy", "yxxx", "yxxy", "yxyx", "yxyy", "yyxx", "yyxy", "yyyx", "yyyy", "rr", "rg", "gr", "gg", "rrr", "rrg", "rgr", "rgg", "grr", "grg", "ggr", "ggg", "rrrr", "rrrg", "rrgr", "rrgg", "rgrr", "rgrg", "rggr", "rggg", "grrr", "grrg", "grgr", "grgg", "ggrr", "ggrg", "gggr", "gggg"],
      e = ["xz", "yz", "zx", "zy", "zz", "xxz", "xyz", "xzx", "xzy", "xzz", "yxz", "yyz", "yzx", "yzy", "yzz", "zxx", "zxy", "zxz", "zyx", "zyy", "zyz", "zzx", "zzy", "zzz", "xxxz", "xxyz", "xxzx", "xxzy", "xxzz", "xyxz", "xyyz", "xyzx", "xyzy", "xyzz", "xzxx", "xzxy", "xzxz", "xzyx", "xzyy", "xzyz", "xzzx", "xzzy", "xzzz", "yxxz", "yxyz", "yxzx", "yxzy", "yxzz", "yyxz", "yyyz", "yyzx", "yyzy", "yyzz", "yzxx", "yzxy", "yzxz", "yzyx", "yzyy", "yzyz", "yzzx", "yzzy", "yzzz", "zxxx", "zxxy", "zxxz", "zxyx", "zxyy", "zxyz", "zxzx", "zxzy", "zxzz", "zyxx", "zyxy", "zyxz", "zyyx", "zyyy", "zyyz", "zyzx", "zyzy", "zyzz", "zzxx", "zzxy", "zzxz", "zzyx", "zzyy", "zzyz", "zzzx", "zzzy", "zzzz", "rb", "gb", "br", "bg", "bb", "rrb", "rgb", "rbr", "rbg", "rbb", "grb", "ggb", "gbr", "gbg", "gbb", "brr", "brg", "brb", "bgr", "bgg", "bgb", "bbr", "bbg", "bbb", "rrrb", "rrgb", "rrbr", "rrbg", "rrbb", "rgrb", "rggb", "rgbr", "rgbg", "rgbb", "rbrr", "rbrg", "rbrb", "rbgr", "rbgg", "rbgb", "rbbr", "rbbg", "rbbb", "grrb", "grgb", "grbr", "grbg", "grbb", "ggrb", "gggb", "ggbr", "ggbg", "ggbb", "gbrr", "gbrg", "gbrb", "gbgr", "gbgg", "gbgb", "gbbr", "gbbg", "gbbb", "brrr", "brrg", "brrb", "brgr", "brgg", "brgb", "brbr", "brbg", "brbb", "bgrr", "bgrg", "bgrb", "bggr", "bggg", "bggb", "bgbr", "bgbg", "bgbb", "bbrr", "bbrg", "bbrb", "bbgr", "bbgg", "bbgb", "bbbr", "bbbg", "bbbb"],
      t = ["xw", "yw", "zw", "wx", "wy", "wz", "ww", "xxw", "xyw", "xzw", "xwx", "xwy", "xwz", "xww", "yxw", "yyw", "yzw", "ywx", "ywy", "ywz", "yww", "zxw", "zyw", "zzw", "zwx", "zwy", "zwz", "zww", "wxx", "wxy", "wxz", "wxw", "wyx", "wyy", "wyz", "wyw", "wzx", "wzy", "wzz", "wzw", "wwx", "wwy", "wwz", "www", "xxxw", "xxyw", "xxzw", "xxwx", "xxwy", "xxwz", "xxww", "xyxw", "xyyw", "xyzw", "xywx", "xywy", "xywz", "xyww", "xzxw", "xzyw", "xzzw", "xzwx", "xzwy", "xzwz", "xzww", "xwxx", "xwxy", "xwxz", "xwxw", "xwyx", "xwyy", "xwyz", "xwyw", "xwzx", "xwzy", "xwzz", "xwzw", "xwwx", "xwwy", "xwwz", "xwww", "yxxw", "yxyw", "yxzw", "yxwx", "yxwy", "yxwz", "yxww", "yyxw", "yyyw", "yyzw", "yywx", "yywy", "yywz", "yyww", "yzxw", "yzyw", "yzzw", "yzwx", "yzwy", "yzwz", "yzww", "ywxx", "ywxy", "ywxz", "ywxw", "ywyx", "ywyy", "ywyz", "ywyw", "ywzx", "ywzy", "ywzz", "ywzw", "ywwx", "ywwy", "ywwz", "ywww", "zxxw", "zxyw", "zxzw", "zxwx", "zxwy", "zxwz", "zxww", "zyxw", "zyyw", "zyzw", "zywx", "zywy", "zywz", "zyww", "zzxw", "zzyw", "zzzw", "zzwx", "zzwy", "zzwz", "zzww", "zwxx", "zwxy", "zwxz", "zwxw", "zwyx", "zwyy", "zwyz", "zwyw", "zwzx", "zwzy", "zwzz", "zwzw", "zwwx", "zwwy", "zwwz", "zwww", "wxxx", "wxxy", "wxxz", "wxxw", "wxyx", "wxyy", "wxyz", "wxyw", "wxzx", "wxzy", "wxzz", "wxzw", "wxwx", "wxwy", "wxwz", "wxww", "wyxx", "wyxy", "wyxz", "wyxw", "wyyx", "wyyy", "wyyz", "wyyw", "wyzx", "wyzy", "wyzz", "wyzw", "wywx", "wywy", "wywz", "wyww", "wzxx", "wzxy", "wzxz", "wzxw", "wzyx", "wzyy", "wzyz", "wzyw", "wzzx", "wzzy", "wzzz", "wzzw", "wzwx", "wzwy", "wzwz", "wzww", "wwxx", "wwxy", "wwxz", "wwxw", "wwyx", "wwyy", "wwyz", "wwyw", "wwzx", "wwzy", "wwzz", "wwzw", "wwwx", "wwwy", "wwwz", "wwww", "ra", "ga", "ba", "ar", "ag", "ab", "aa", "rra", "rga", "rba", "rar", "rag", "rab", "raa", "gra", "gga", "gba", "gar", "gag", "gab", "gaa", "bra", "bga", "bba", "bar", "bag", "bab", "baa", "arr", "arg", "arb", "ara", "agr", "agg", "agb", "aga", "abr", "abg", "abb", "aba", "aar", "aag", "aab", "aaa", "rrra", "rrga", "rrba", "rrar", "rrag", "rrab", "rraa", "rgra", "rgga", "rgba", "rgar", "rgag", "rgab", "rgaa", "rbra", "rbga", "rbba", "rbar", "rbag", "rbab", "rbaa", "rarr", "rarg", "rarb", "rara", "ragr", "ragg", "ragb", "raga", "rabr", "rabg", "rabb", "raba", "raar", "raag", "raab", "raaa", "grra", "grga", "grba", "grar", "grag", "grab", "graa", "ggra", "ggga", "ggba", "ggar", "ggag", "ggab", "ggaa", "gbra", "gbga", "gbba", "gbar", "gbag", "gbab", "gbaa", "garr", "garg", "garb", "gara", "gagr", "gagg", "gagb", "gaga", "gabr", "gabg", "gabb", "gaba", "gaar", "gaag", "gaab", "gaaa", "brra", "brga", "brba", "brar", "brag", "brab", "braa", "bgra", "bgga", "bgba", "bgar", "bgag", "bgab", "bgaa", "bbra", "bbga", "bbba", "bbar", "bbag", "bbab", "bbaa", "barr", "barg", "barb", "bara", "bagr", "bagg", "bagb", "baga", "babr", "babg", "babb", "baba", "baar", "baag", "baab", "baaa", "arrr", "arrg", "arrb", "arra", "argr", "argg", "argb", "arga", "arbr", "arbg", "arbb", "arba", "arar", "arag", "arab", "araa", "agrr", "agrg", "agrb", "agra", "aggr", "aggg", "aggb", "agga", "agbr", "agbg", "agbb", "agba", "agar", "agag", "agab", "agaa", "abrr", "abrg", "abrb", "abra", "abgr", "abgg", "abgb", "abga", "abbr", "abbg", "abbb", "abba", "abar", "abag", "abab", "abaa", "aarr", "aarg", "aarb", "aara", "aagr", "aagg", "aagb", "aaga", "aabr", "aabg", "aabb", "aaba", "aaar", "aaag", "aaab", "aaaa"],
      n = {
        x: 0,
        r: 0,
        y: 1,
        g: 1,
        z: 2,
        b: 2,
        w: 3,
        a: 3
      };
    function s(r) {
      switch (r.length) {
        case 2:
          return function () {
            return new D(this[n[r[0]]], this[n[r[1]]]);
          };
        case 3:
          return function () {
            return new q(this[n[r[0]]], this[n[r[1]]], this[n[r[2]]]);
          };
        case 4:
          return function () {
            return new f(this[n[r[0]]], this[n[r[1]]], this[n[r[2]]], this[n[r[3]]]);
          };
      }
      throw new Error("Illegal swizzle length");
    }
    for (var _i = 0, _E = E; _i < _E.length; _i++) {
      var r = _E[_i];
      var a = s(r);
      Object.defineProperty(D.prototype, r, {
        get: a
      }), Object.defineProperty(q.prototype, r, {
        get: a
      }), Object.defineProperty(f.prototype, r, {
        get: a
      });
    }
    for (var _i2 = 0, _e = e; _i2 < _e.length; _i2++) {
      var _r = _e[_i2];
      var _a = s(_r);
      Object.defineProperty(q.prototype, _r, {
        get: _a
      }), Object.defineProperty(f.prototype, _r, {
        get: _a
      });
    }
    for (var _i3 = 0, _t2 = t; _i3 < _t2.length; _i3++) {
      var _r2 = _t2[_i3];
      var _a2 = s(_r2);
      Object.defineProperty(f.prototype, _r2, {
        get: _a2
      });
    }
    me = !0;
  }
  var Re = Math.PI / 180,
    ge = 180 / Math.PI;
  function st(E) {
    return E * ge;
  }
  function rt(E) {
    return E * Re;
  }

  exports.EnableSwizzles = tt;
  exports.Mat2 = u;
  exports.Mat2d = _;
  exports.Mat3 = J;
  exports.Mat4 = Z;
  exports.Quat = F;
  exports.Quat2 = K;
  exports.Vec2 = D;
  exports.Vec3 = q;
  exports.Vec4 = f;
  exports.mat2 = u;
  exports.mat2d = _;
  exports.mat3 = J;
  exports.mat4 = Z;
  exports.quat = F;
  exports.quat2 = K;
  exports.toDegree = st;
  exports.toRadian = rt;
  exports.vec2 = D;
  exports.vec3 = q;
  exports.vec4 = f;

}));
//# sourceMappingURL=gl-matrix-f32.min.js.map
