{"version":3,"file":"gl-matrix-f64.min.js","sources":["../esm/2016/gl-matrix-f64.min.js"],"sourcesContent":["// gl-matrix - v4.0.0-beta.3 - A high performance matrix and vector library.\n// @author Brandon Jones\n// @author Colin MacKenzie IV\n// @license MIT (https://github.com/toji/gl-matrix/blob/master/LICENSE.md)\nvar me=w=>{throw TypeError(w)};var oe=(w,e,t)=>e.has(w)||me(\"Cannot \"+t);var f=(w,e,t)=>(oe(w,e,\"read from private field\"),t?t.call(w):e.get(w)),G=(w,e,t)=>e.has(w)?me(\"Cannot add the same private member more than once\"):e instanceof WeakSet?e.add(w):e.set(w,t);var ee,$=class $ extends Float64Array{constructor(...e){switch(e.length){case 4:super(e);break;case 2:super(e[0],e[1],4);break;case 1:let t=e[0];t===void 0?super(f($,ee)):typeof t==\"number\"?super([t,t,t,t]):super(t,0,4);break;default:super(f($,ee));break}}get str(){return $.str(this)}copy(e){return this.set(e),this}identity(){return this.set(f($,ee)),this}multiply(e){return $.multiply(this,this,e)}mul(e){return this}transpose(){return $.transpose(this,this)}invert(){return $.invert(this,this)}scale(e){return $.scale(this,this,e)}rotate(e){return $.rotate(this,this,e)}static get BYTE_LENGTH(){return 4*Float64Array.BYTES_PER_ELEMENT}static create(){return new $}static clone(e){return new $(e)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}static fromValues(...e){return new $(...e)}static set(e,...t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}static identity(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e}static transpose(e,t){if(e===t){let n=t[1];e[1]=t[2],e[2]=n}else e[0]=t[0],e[1]=t[2],e[2]=t[1],e[3]=t[3];return e}static invert(e,t){let n=t[0],s=t[1],r=t[2],i=t[3],a=n*i-r*s;return a?(a=1/a,e[0]=i*a,e[1]=-s*a,e[2]=-r*a,e[3]=n*a,e):null}static adjoint(e,t){let n=t[0];return e[0]=t[3],e[1]=-t[1],e[2]=-t[2],e[3]=n,e}static determinant(e){return e[0]*e[3]-e[2]*e[1]}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e}static subtract(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e}static sub(e,t,n){return e}static multiply(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=n[0],d=n[1],l=n[2],L=n[3];return e[0]=s*c+i*d,e[1]=r*c+a*d,e[2]=s*l+i*L,e[3]=r*l+a*L,e}static mul(e,t,n){return e}static rotate(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=Math.sin(n),d=Math.cos(n);return e[0]=s*d+i*c,e[1]=r*d+a*c,e[2]=s*-c+i*d,e[3]=r*-c+a*d,e}static scale(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=n[0],d=n[1];return e[0]=s*c,e[1]=r*c,e[2]=i*d,e[3]=a*d,e}static fromRotation(e,t){let n=Math.sin(t),s=Math.cos(t);return e[0]=s,e[1]=n,e[2]=-n,e[3]=s,e}static fromScaling(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=t[1],e}static frob(e){return Math.sqrt(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]+e[3]*e[3])}static multiplyScalar(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e}static multiplyScalarAndAdd(e,t,n,s){return e[0]=t[0]+n[0]*s,e[1]=t[1]+n[1]*s,e[2]=t[2]+n[2]*s,e[3]=t[3]+n[3]*s,e}static LDU(e,t,n,s){return e[2]=s[2]/s[0],n[0]=s[0],n[1]=s[1],n[3]=s[3]-e[2]*n[1],[e,t,n]}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]}static equals(e,t){let n=e[0],s=e[1],r=e[2],i=e[3],a=t[0],c=t[1],d=t[2],l=t[3];return Math.abs(n-a)<=1e-6*Math.max(1,Math.abs(n),Math.abs(a))&&Math.abs(s-c)<=1e-6*Math.max(1,Math.abs(s),Math.abs(c))&&Math.abs(r-d)<=1e-6*Math.max(1,Math.abs(r),Math.abs(d))&&Math.abs(i-l)<=1e-6*Math.max(1,Math.abs(i),Math.abs(l))}static str(e){return`Mat2(${e.join(\", \")})`}};ee=new WeakMap,G($,ee,new Float64Array([1,0,0,1]));var u=$;u.prototype.mul=u.prototype.multiply;u.mul=u.multiply;u.sub=u.subtract;var te,H=class H extends Float64Array{constructor(...e){switch(e.length){case 6:super(e);break;case 2:super(e[0],e[1],6);break;case 1:let t=e[0];t===void 0?super(f(H,te)):typeof t==\"number\"?super([t,t,t,t,t,t]):super(t,0,6);break;default:super(f(H,te));break}}get str(){return H.str(this)}copy(e){return this.set(e),this}identity(){return this.set(f(H,te)),this}multiply(e){return H.multiply(this,this,e)}mul(e){return this}translate(e){return H.translate(this,this,e)}rotate(e){return H.rotate(this,this,e)}scale(e){return H.scale(this,this,e)}static get BYTE_LENGTH(){return 6*Float64Array.BYTES_PER_ELEMENT}static create(){return new H}static clone(e){return new H(e)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e}static fromValues(...e){return new H(...e)}static set(e,...t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e}static identity(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e[4]=0,e[5]=0,e}static invert(e,t){let n=t[0],s=t[1],r=t[2],i=t[3],a=t[4],c=t[5],d=n*i-s*r;return d?(d=1/d,e[0]=i*d,e[1]=-s*d,e[2]=-r*d,e[3]=n*d,e[4]=(r*c-i*a)*d,e[5]=(s*a-n*c)*d,e):null}static determinant(e){return e[0]*e[3]-e[1]*e[2]}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e[4]=t[4]+n[4],e[5]=t[5]+n[5],e}static subtract(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e[4]=t[4]-n[4],e[5]=t[5]-n[5],e}static sub(e,t,n){return e}static multiply(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=t[4],d=t[5],l=n[0],L=n[1],k=n[2],y=n[3],h=n[4],M=n[5];return e[0]=s*l+i*L,e[1]=r*l+a*L,e[2]=s*k+i*y,e[3]=r*k+a*y,e[4]=s*h+i*M+c,e[5]=r*h+a*M+d,e}static mul(e,t,n){return e}static translate(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=t[4],d=t[5],l=n[0],L=n[1];return e[0]=s,e[1]=r,e[2]=i,e[3]=a,e[4]=s*l+i*L+c,e[5]=r*l+a*L+d,e}static rotate(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=t[4],d=t[5],l=Math.sin(n),L=Math.cos(n);return e[0]=s*L+i*l,e[1]=r*L+a*l,e[2]=s*-l+i*L,e[3]=r*-l+a*L,e[4]=c,e[5]=d,e}static scale(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=t[4],d=t[5],l=n[0],L=n[1];return e[0]=s*l,e[1]=r*l,e[2]=i*L,e[3]=a*L,e[4]=c,e[5]=d,e}static fromTranslation(e,t){return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e[4]=t[0],e[5]=t[1],e}static fromRotation(e,t){let n=Math.sin(t),s=Math.cos(t);return e[0]=s,e[1]=n,e[2]=-n,e[3]=s,e[4]=0,e[5]=0,e}static fromScaling(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=t[1],e[4]=0,e[5]=0,e}static frob(e){return Math.sqrt(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]+e[3]*e[3]+e[4]*e[4]+e[5]*e[5]+1)}static multiplyScalar(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*n,e[5]=t[5]*n,e}static multiplyScalarAndAdd(e,t,n,s){return e[0]=t[0]+n[0]*s,e[1]=t[1]+n[1]*s,e[2]=t[2]+n[2]*s,e[3]=t[3]+n[3]*s,e[4]=t[4]+n[4]*s,e[5]=t[5]+n[5]*s,e}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]}static equals(e,t){let n=e[0],s=e[1],r=e[2],i=e[3],a=e[4],c=e[5],d=t[0],l=t[1],L=t[2],k=t[3],y=t[4],h=t[5];return Math.abs(n-d)<=1e-6*Math.max(1,Math.abs(n),Math.abs(d))&&Math.abs(s-l)<=1e-6*Math.max(1,Math.abs(s),Math.abs(l))&&Math.abs(r-L)<=1e-6*Math.max(1,Math.abs(r),Math.abs(L))&&Math.abs(i-k)<=1e-6*Math.max(1,Math.abs(i),Math.abs(k))&&Math.abs(a-y)<=1e-6*Math.max(1,Math.abs(a),Math.abs(y))&&Math.abs(c-h)<=1e-6*Math.max(1,Math.abs(c),Math.abs(h))}static str(e){return`Mat2d(${e.join(\", \")})`}};te=new WeakMap,G(H,te,new Float64Array([1,0,0,1,0,0]));var _=H;_.mul=_.multiply;_.sub=_.subtract;var ne,X=class X extends Float64Array{constructor(...e){switch(e.length){case 9:super(e);break;case 2:super(e[0],e[1],9);break;case 1:let t=e[0];t===void 0?super(f(X,ne)):typeof t==\"number\"?super([t,t,t,t,t,t,t,t,t]):super(t,0,9);break;default:super(f(X,ne));break}}get str(){return X.str(this)}copy(e){return this.set(e),this}identity(){return this.set(f(X,ne)),this}multiply(e){return X.multiply(this,this,e)}mul(e){return this}transpose(){return X.transpose(this,this)}invert(){return X.invert(this,this)}translate(e){return X.translate(this,this,e)}rotate(e){return X.rotate(this,this,e)}scale(e){return X.scale(this,this,e)}static get BYTE_LENGTH(){return 9*Float64Array.BYTES_PER_ELEMENT}static create(){return new X}static clone(e){return new X(e)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}static fromValues(...e){return new X(...e)}static set(e,...t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}static identity(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}static transpose(e,t){if(e===t){let n=t[1],s=t[2],r=t[5];e[1]=t[3],e[2]=t[6],e[3]=n,e[5]=t[7],e[6]=s,e[7]=r}else e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8];return e}static invert(e,t){let n=t[0],s=t[1],r=t[2],i=t[3],a=t[4],c=t[5],d=t[6],l=t[7],L=t[8],k=L*a-c*l,y=-L*i+c*d,h=l*i-a*d,M=n*k+s*y+r*h;return M?(M=1/M,e[0]=k*M,e[1]=(-L*s+r*l)*M,e[2]=(c*s-r*a)*M,e[3]=y*M,e[4]=(L*n-r*d)*M,e[5]=(-c*n+r*i)*M,e[6]=h*M,e[7]=(-l*n+s*d)*M,e[8]=(a*n-s*i)*M,e):null}static adjoint(e,t){let n=t[0],s=t[1],r=t[2],i=t[3],a=t[4],c=t[5],d=t[6],l=t[7],L=t[8];return e[0]=a*L-c*l,e[1]=r*l-s*L,e[2]=s*c-r*a,e[3]=c*d-i*L,e[4]=n*L-r*d,e[5]=r*i-n*c,e[6]=i*l-a*d,e[7]=s*d-n*l,e[8]=n*a-s*i,e}static determinant(e){let t=e[0],n=e[1],s=e[2],r=e[3],i=e[4],a=e[5],c=e[6],d=e[7],l=e[8];return t*(l*i-a*d)+n*(-l*r+a*c)+s*(d*r-i*c)}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e[4]=t[4]+n[4],e[5]=t[5]+n[5],e[6]=t[6]+n[6],e[7]=t[7]+n[7],e[8]=t[8]+n[8],e}static subtract(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e[4]=t[4]-n[4],e[5]=t[5]-n[5],e[6]=t[6]-n[6],e[7]=t[7]-n[7],e[8]=t[8]-n[8],e}static sub(e,t,n){return e}static multiply(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=t[4],d=t[5],l=t[6],L=t[7],k=t[8],y=n[0],h=n[1],M=n[2];return e[0]=y*s+h*a+M*l,e[1]=y*r+h*c+M*L,e[2]=y*i+h*d+M*k,y=n[3],h=n[4],M=n[5],e[3]=y*s+h*a+M*l,e[4]=y*r+h*c+M*L,e[5]=y*i+h*d+M*k,y=n[6],h=n[7],M=n[8],e[6]=y*s+h*a+M*l,e[7]=y*r+h*c+M*L,e[8]=y*i+h*d+M*k,e}static mul(e,t,n){return e}static translate(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=t[4],d=t[5],l=t[6],L=t[7],k=t[8],y=n[0],h=n[1];return e[0]=s,e[1]=r,e[2]=i,e[3]=a,e[4]=c,e[5]=d,e[6]=y*s+h*a+l,e[7]=y*r+h*c+L,e[8]=y*i+h*d+k,e}static rotate(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=t[4],d=t[5],l=t[6],L=t[7],k=t[8],y=Math.sin(n),h=Math.cos(n);return e[0]=h*s+y*a,e[1]=h*r+y*c,e[2]=h*i+y*d,e[3]=h*a-y*s,e[4]=h*c-y*r,e[5]=h*d-y*i,e[6]=l,e[7]=L,e[8]=k,e}static scale(e,t,n){let s=n[0],r=n[1];return e[0]=s*t[0],e[1]=s*t[1],e[2]=s*t[2],e[3]=r*t[3],e[4]=r*t[4],e[5]=r*t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}static fromTranslation(e,t){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=t[0],e[7]=t[1],e[8]=1,e}static fromRotation(e,t){let n=Math.sin(t),s=Math.cos(t);return e[0]=s,e[1]=n,e[2]=0,e[3]=-n,e[4]=s,e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}static fromScaling(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=0,e[4]=t[1],e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}static fromMat2d(e,t){return e[0]=t[0],e[1]=t[1],e[2]=0,e[3]=t[2],e[4]=t[3],e[5]=0,e[6]=t[4],e[7]=t[5],e[8]=1,e}static fromQuat(e,t){let n=t[0],s=t[1],r=t[2],i=t[3],a=n+n,c=s+s,d=r+r,l=n*a,L=s*a,k=s*c,y=r*a,h=r*c,M=r*d,T=i*a,m=i*c,R=i*d;return e[0]=1-k-M,e[3]=L-R,e[6]=y+m,e[1]=L+R,e[4]=1-l-M,e[7]=h-T,e[2]=y-m,e[5]=h+T,e[8]=1-l-k,e}static fromMat4(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[4],e[4]=t[5],e[5]=t[6],e[6]=t[8],e[7]=t[9],e[8]=t[10],e}static normalFromMat4(e,t){let n=t[0],s=t[1],r=t[2],i=t[4],a=t[5],c=t[6],d=t[8],l=t[9],L=t[10];return e[0]=a*L-c*l,e[1]=r*l-s*L,e[2]=s*c-r*a,e[3]=c*d-i*L,e[4]=n*L-r*d,e[5]=r*i-n*c,e[6]=i*l-a*d,e[7]=s*d-n*l,e[8]=n*a-s*i,e}static normalFromMat4Fast(e,t){return e}static projection(e,t,n){return e[0]=2/t,e[1]=0,e[2]=0,e[3]=0,e[4]=-2/n,e[5]=0,e[6]=-1,e[7]=1,e[8]=1,e}static frob(e){return Math.sqrt(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]+e[3]*e[3]+e[4]*e[4]+e[5]*e[5]+e[6]*e[6]+e[7]*e[7]+e[8]*e[8])}static multiplyScalar(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*n,e[5]=t[5]*n,e[6]=t[6]*n,e[7]=t[7]*n,e[8]=t[8]*n,e}static multiplyScalarAndAdd(e,t,n,s){return e[0]=t[0]+n[0]*s,e[1]=t[1]+n[1]*s,e[2]=t[2]+n[2]*s,e[3]=t[3]+n[3]*s,e[4]=t[4]+n[4]*s,e[5]=t[5]+n[5]*s,e[6]=t[6]+n[6]*s,e[7]=t[7]+n[7]*s,e[8]=t[8]+n[8]*s,e}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]&&e[8]===t[8]}static equals(e,t){let n=e[0],s=e[1],r=e[2],i=e[3],a=e[4],c=e[5],d=e[6],l=e[7],L=e[8],k=t[0],y=t[1],h=t[2],M=t[3],T=t[4],m=t[5],R=t[6],x=t[7],o=t[8];return Math.abs(n-k)<=1e-6*Math.max(1,Math.abs(n),Math.abs(k))&&Math.abs(s-y)<=1e-6*Math.max(1,Math.abs(s),Math.abs(y))&&Math.abs(r-h)<=1e-6*Math.max(1,Math.abs(r),Math.abs(h))&&Math.abs(i-M)<=1e-6*Math.max(1,Math.abs(i),Math.abs(M))&&Math.abs(a-T)<=1e-6*Math.max(1,Math.abs(a),Math.abs(T))&&Math.abs(c-m)<=1e-6*Math.max(1,Math.abs(c),Math.abs(m))&&Math.abs(d-R)<=1e-6*Math.max(1,Math.abs(d),Math.abs(R))&&Math.abs(l-x)<=1e-6*Math.max(1,Math.abs(l),Math.abs(x))&&Math.abs(L-o)<=1e-6*Math.max(1,Math.abs(L),Math.abs(o))}static str(e){return`Mat3(${e.join(\", \")})`}};ne=new WeakMap,G(X,ne,new Float64Array([1,0,0,0,1,0,0,0,1]));var J=X;J.prototype.mul=J.prototype.multiply;J.mul=J.multiply;J.sub=J.subtract;J.normalFromMat4Fast=J.normalFromMat4;var se,C,A=class A extends Float64Array{constructor(...e){switch(e.length){case 16:super(e);break;case 2:super(e[0],e[1],16);break;case 1:let t=e[0];t===void 0?super(f(A,se)):typeof t==\"number\"?super([t,t,t,t,t,t,t,t,t,t,t,t,t,t,t,t]):super(t,0,16);break;default:super(f(A,se));break}}get str(){return A.str(this)}copy(e){return this.set(e),this}identity(){return this.set(f(A,se)),this}multiply(e){return A.multiply(this,this,e)}mul(e){return this}transpose(){return A.transpose(this,this)}invert(){return A.invert(this,this)}translate(e){return A.translate(this,this,e)}rotate(e,t){return A.rotate(this,this,e,t)}scale(e){return A.scale(this,this,e)}rotateX(e){return A.rotateX(this,this,e)}rotateY(e){return A.rotateY(this,this,e)}rotateZ(e){return A.rotateZ(this,this,e)}perspectiveNO(e,t,n,s){return A.perspectiveNO(this,e,t,n,s)}perspectiveZO(e,t,n,s){return A.perspectiveZO(this,e,t,n,s)}orthoNO(e,t,n,s,r,i){return A.orthoNO(this,e,t,n,s,r,i)}orthoZO(e,t,n,s,r,i){return A.orthoZO(this,e,t,n,s,r,i)}static get BYTE_LENGTH(){return 16*Float64Array.BYTES_PER_ELEMENT}static create(){return new A}static clone(e){return new A(e)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}static fromValues(...e){return new A(...e)}static set(e,...t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}static identity(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static transpose(e,t){if(e===t){let n=t[1],s=t[2],r=t[3],i=t[6],a=t[7],c=t[11];e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=n,e[6]=t[9],e[7]=t[13],e[8]=s,e[9]=i,e[11]=t[14],e[12]=r,e[13]=a,e[14]=c}else e[0]=t[0],e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=t[1],e[5]=t[5],e[6]=t[9],e[7]=t[13],e[8]=t[2],e[9]=t[6],e[10]=t[10],e[11]=t[14],e[12]=t[3],e[13]=t[7],e[14]=t[11],e[15]=t[15];return e}static invert(e,t){let n=t[0],s=t[1],r=t[2],i=t[3],a=t[4],c=t[5],d=t[6],l=t[7],L=t[8],k=t[9],y=t[10],h=t[11],M=t[12],T=t[13],m=t[14],R=t[15],x=n*c-s*a,o=n*d-r*a,b=n*l-i*a,V=s*d-r*c,p=s*l-i*c,I=r*l-i*d,D=L*T-k*M,S=L*m-y*M,z=L*R-h*M,Y=k*m-y*T,P=k*R-h*T,O=y*R-h*m,N=x*O-o*P+b*Y+V*z-p*S+I*D;return N?(N=1/N,e[0]=(c*O-d*P+l*Y)*N,e[1]=(r*P-s*O-i*Y)*N,e[2]=(T*I-m*p+R*V)*N,e[3]=(y*p-k*I-h*V)*N,e[4]=(d*z-a*O-l*S)*N,e[5]=(n*O-r*z+i*S)*N,e[6]=(m*b-M*I-R*o)*N,e[7]=(L*I-y*b+h*o)*N,e[8]=(a*P-c*z+l*D)*N,e[9]=(s*z-n*P-i*D)*N,e[10]=(M*p-T*b+R*x)*N,e[11]=(k*b-L*p-h*x)*N,e[12]=(c*S-a*Y-d*D)*N,e[13]=(n*Y-s*S+r*D)*N,e[14]=(T*o-M*V-m*x)*N,e[15]=(L*V-k*o+y*x)*N,e):null}static adjoint(e,t){let n=t[0],s=t[1],r=t[2],i=t[3],a=t[4],c=t[5],d=t[6],l=t[7],L=t[8],k=t[9],y=t[10],h=t[11],M=t[12],T=t[13],m=t[14],R=t[15],x=n*c-s*a,o=n*d-r*a,b=n*l-i*a,V=s*d-r*c,p=s*l-i*c,I=r*l-i*d,D=L*T-k*M,S=L*m-y*M,z=L*R-h*M,Y=k*m-y*T,P=k*R-h*T,O=y*R-h*m;return e[0]=c*O-d*P+l*Y,e[1]=r*P-s*O-i*Y,e[2]=T*I-m*p+R*V,e[3]=y*p-k*I-h*V,e[4]=d*z-a*O-l*S,e[5]=n*O-r*z+i*S,e[6]=m*b-M*I-R*o,e[7]=L*I-y*b+h*o,e[8]=a*P-c*z+l*D,e[9]=s*z-n*P-i*D,e[10]=M*p-T*b+R*x,e[11]=k*b-L*p-h*x,e[12]=c*S-a*Y-d*D,e[13]=n*Y-s*S+r*D,e[14]=T*o-M*V-m*x,e[15]=L*V-k*o+y*x,e}static determinant(e){let t=e[0],n=e[1],s=e[2],r=e[3],i=e[4],a=e[5],c=e[6],d=e[7],l=e[8],L=e[9],k=e[10],y=e[11],h=e[12],M=e[13],T=e[14],m=e[15],R=t*a-n*i,x=t*c-s*i,o=n*c-s*a,b=l*M-L*h,V=l*T-k*h,p=L*T-k*M,I=t*p-n*V+s*b,D=i*p-a*V+c*b,S=l*o-L*x+k*R,z=h*o-M*x+T*R;return d*I-r*D+m*S-y*z}static multiply(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=t[4],d=t[5],l=t[6],L=t[7],k=t[8],y=t[9],h=t[10],M=t[11],T=t[12],m=t[13],R=t[14],x=t[15],o=n[0],b=n[1],V=n[2],p=n[3];return e[0]=o*s+b*c+V*k+p*T,e[1]=o*r+b*d+V*y+p*m,e[2]=o*i+b*l+V*h+p*R,e[3]=o*a+b*L+V*M+p*x,o=n[4],b=n[5],V=n[6],p=n[7],e[4]=o*s+b*c+V*k+p*T,e[5]=o*r+b*d+V*y+p*m,e[6]=o*i+b*l+V*h+p*R,e[7]=o*a+b*L+V*M+p*x,o=n[8],b=n[9],V=n[10],p=n[11],e[8]=o*s+b*c+V*k+p*T,e[9]=o*r+b*d+V*y+p*m,e[10]=o*i+b*l+V*h+p*R,e[11]=o*a+b*L+V*M+p*x,o=n[12],b=n[13],V=n[14],p=n[15],e[12]=o*s+b*c+V*k+p*T,e[13]=o*r+b*d+V*y+p*m,e[14]=o*i+b*l+V*h+p*R,e[15]=o*a+b*L+V*M+p*x,e}static mul(e,t,n){return e}static translate(e,t,n){let s=n[0],r=n[1],i=n[2];if(t===e)e[12]=t[0]*s+t[4]*r+t[8]*i+t[12],e[13]=t[1]*s+t[5]*r+t[9]*i+t[13],e[14]=t[2]*s+t[6]*r+t[10]*i+t[14],e[15]=t[3]*s+t[7]*r+t[11]*i+t[15];else{let a=t[0],c=t[1],d=t[2],l=t[3],L=t[4],k=t[5],y=t[6],h=t[7],M=t[8],T=t[9],m=t[10],R=t[11];e[0]=a,e[1]=c,e[2]=d,e[3]=l,e[4]=L,e[5]=k,e[6]=y,e[7]=h,e[8]=M,e[9]=T,e[10]=m,e[11]=R,e[12]=a*s+L*r+M*i+t[12],e[13]=c*s+k*r+T*i+t[13],e[14]=d*s+y*r+m*i+t[14],e[15]=l*s+h*r+R*i+t[15]}return e}static scale(e,t,n){let s=n[0],r=n[1],i=n[2];return e[0]=t[0]*s,e[1]=t[1]*s,e[2]=t[2]*s,e[3]=t[3]*s,e[4]=t[4]*r,e[5]=t[5]*r,e[6]=t[6]*r,e[7]=t[7]*r,e[8]=t[8]*i,e[9]=t[9]*i,e[10]=t[10]*i,e[11]=t[11]*i,e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}static rotate(e,t,n,s){let r=s[0],i=s[1],a=s[2],c=Math.sqrt(r*r+i*i+a*a);if(c<1e-6)return null;c=1/c,r*=c,i*=c,a*=c;let d=Math.sin(n),l=Math.cos(n),L=1-l,k=t[0],y=t[1],h=t[2],M=t[3],T=t[4],m=t[5],R=t[6],x=t[7],o=t[8],b=t[9],V=t[10],p=t[11],I=r*r*L+l,D=i*r*L+a*d,S=a*r*L-i*d,z=r*i*L-a*d,Y=i*i*L+l,P=a*i*L+r*d,O=r*a*L+i*d,N=i*a*L-r*d,v=a*a*L+l;return e[0]=k*I+T*D+o*S,e[1]=y*I+m*D+b*S,e[2]=h*I+R*D+V*S,e[3]=M*I+x*D+p*S,e[4]=k*z+T*Y+o*P,e[5]=y*z+m*Y+b*P,e[6]=h*z+R*Y+V*P,e[7]=M*z+x*Y+p*P,e[8]=k*O+T*N+o*v,e[9]=y*O+m*N+b*v,e[10]=h*O+R*N+V*v,e[11]=M*O+x*N+p*v,t!==e&&(e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e}static rotateX(e,t,n){let s=Math.sin(n),r=Math.cos(n),i=t[4],a=t[5],c=t[6],d=t[7],l=t[8],L=t[9],k=t[10],y=t[11];return t!==e&&(e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[4]=i*r+l*s,e[5]=a*r+L*s,e[6]=c*r+k*s,e[7]=d*r+y*s,e[8]=l*r-i*s,e[9]=L*r-a*s,e[10]=k*r-c*s,e[11]=y*r-d*s,e}static rotateY(e,t,n){let s=Math.sin(n),r=Math.cos(n),i=t[0],a=t[1],c=t[2],d=t[3],l=t[8],L=t[9],k=t[10],y=t[11];return t!==e&&(e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[0]=i*r-l*s,e[1]=a*r-L*s,e[2]=c*r-k*s,e[3]=d*r-y*s,e[8]=i*s+l*r,e[9]=a*s+L*r,e[10]=c*s+k*r,e[11]=d*s+y*r,e}static rotateZ(e,t,n){let s=Math.sin(n),r=Math.cos(n),i=t[0],a=t[1],c=t[2],d=t[3],l=t[4],L=t[5],k=t[6],y=t[7];return t!==e&&(e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[0]=i*r+l*s,e[1]=a*r+L*s,e[2]=c*r+k*s,e[3]=d*r+y*s,e[4]=l*r-i*s,e[5]=L*r-a*s,e[6]=k*r-c*s,e[7]=y*r-d*s,e}static fromTranslation(e,t){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=t[0],e[13]=t[1],e[14]=t[2],e[15]=1,e}static fromScaling(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=t[1],e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=t[2],e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static fromRotation(e,t,n){let s=n[0],r=n[1],i=n[2],a=Math.sqrt(s*s+r*r+i*i);if(a<1e-6)return null;a=1/a,s*=a,r*=a,i*=a;let c=Math.sin(t),d=Math.cos(t),l=1-d;return e[0]=s*s*l+d,e[1]=r*s*l+i*c,e[2]=i*s*l-r*c,e[3]=0,e[4]=s*r*l-i*c,e[5]=r*r*l+d,e[6]=i*r*l+s*c,e[7]=0,e[8]=s*i*l+r*c,e[9]=r*i*l-s*c,e[10]=i*i*l+d,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static fromXRotation(e,t){let n=Math.sin(t),s=Math.cos(t);return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=s,e[6]=n,e[7]=0,e[8]=0,e[9]=-n,e[10]=s,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static fromYRotation(e,t){let n=Math.sin(t),s=Math.cos(t);return e[0]=s,e[1]=0,e[2]=-n,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=n,e[9]=0,e[10]=s,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static fromZRotation(e,t){let n=Math.sin(t),s=Math.cos(t);return e[0]=s,e[1]=n,e[2]=0,e[3]=0,e[4]=-n,e[5]=s,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static fromRotationTranslation(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=s+s,d=r+r,l=i+i,L=s*c,k=s*d,y=s*l,h=r*d,M=r*l,T=i*l,m=a*c,R=a*d,x=a*l;return e[0]=1-(h+T),e[1]=k+x,e[2]=y-R,e[3]=0,e[4]=k-x,e[5]=1-(L+T),e[6]=M+m,e[7]=0,e[8]=y+R,e[9]=M-m,e[10]=1-(L+h),e[11]=0,e[12]=n[0],e[13]=n[1],e[14]=n[2],e[15]=1,e}static fromQuat2(e,t){let n=-t[0],s=-t[1],r=-t[2],i=t[3],a=t[4],c=t[5],d=t[6],l=t[7],L=n*n+s*s+r*r+i*i;return L>0?(f(A,C)[0]=(a*i+l*n+c*r-d*s)*2/L,f(A,C)[1]=(c*i+l*s+d*n-a*r)*2/L,f(A,C)[2]=(d*i+l*r+a*s-c*n)*2/L):(f(A,C)[0]=(a*i+l*n+c*r-d*s)*2,f(A,C)[1]=(c*i+l*s+d*n-a*r)*2,f(A,C)[2]=(d*i+l*r+a*s-c*n)*2),A.fromRotationTranslation(e,t,f(A,C)),e}static normalFromMat4(e,t){let n=t[0],s=t[1],r=t[2],i=t[4],a=t[5],c=t[6],d=t[8],l=t[9],L=t[10];return e[0]=a*L-c*l,e[1]=r*l-s*L,e[2]=s*c-r*a,e[3]=0,e[4]=c*d-i*L,e[5]=n*L-r*d,e[6]=r*i-n*c,e[7]=0,e[8]=i*l-a*d,e[9]=s*d-n*l,e[10]=n*a-s*i,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static normalFromMat4Fast(e,t){return e}static getTranslation(e,t){return e[0]=t[12],e[1]=t[13],e[2]=t[14],e}static getScaling(e,t){let n=t[0],s=t[1],r=t[2],i=t[4],a=t[5],c=t[6],d=t[8],l=t[9],L=t[10];return e[0]=Math.sqrt(n*n+s*s+r*r),e[1]=Math.sqrt(i*i+a*a+c*c),e[2]=Math.sqrt(d*d+l*l+L*L),e}static getRotation(e,t){A.getScaling(f(A,C),t);let n=1/f(A,C)[0],s=1/f(A,C)[1],r=1/f(A,C)[2],i=t[0]*n,a=t[1]*s,c=t[2]*r,d=t[4]*n,l=t[5]*s,L=t[6]*r,k=t[8]*n,y=t[9]*s,h=t[10]*r,M=i+l+h,T=0;return M>0?(T=Math.sqrt(M+1)*2,e[3]=.25*T,e[0]=(L-y)/T,e[1]=(k-c)/T,e[2]=(a-d)/T):i>l&&i>h?(T=Math.sqrt(1+i-l-h)*2,e[3]=(L-y)/T,e[0]=.25*T,e[1]=(a+d)/T,e[2]=(k+c)/T):l>h?(T=Math.sqrt(1+l-i-h)*2,e[3]=(k-c)/T,e[0]=(a+d)/T,e[1]=.25*T,e[2]=(L+y)/T):(T=Math.sqrt(1+h-i-l)*2,e[3]=(a-d)/T,e[0]=(k+c)/T,e[1]=(L+y)/T,e[2]=.25*T),e}static decompose(e,t,n,s){t[0]=s[12],t[1]=s[13],t[2]=s[14];let r=s[0],i=s[1],a=s[2],c=s[4],d=s[5],l=s[6],L=s[8],k=s[9],y=s[10];n[0]=Math.sqrt(r*r+i*i+a*a),n[1]=Math.sqrt(c*c+d*d+l*l),n[2]=Math.sqrt(L*L+k*k+y*y);let h=1/n[0],M=1/n[1],T=1/n[2],m=r*h,R=i*M,x=a*T,o=c*h,b=d*M,V=l*T,p=L*h,I=k*M,D=y*T,S=m+b+D,z=0;return S>0?(z=Math.sqrt(S+1)*2,e[3]=.25*z,e[0]=(V-I)/z,e[1]=(p-x)/z,e[2]=(R-o)/z):m>b&&m>D?(z=Math.sqrt(1+m-b-D)*2,e[3]=(V-I)/z,e[0]=.25*z,e[1]=(R+o)/z,e[2]=(p+x)/z):b>D?(z=Math.sqrt(1+b-m-D)*2,e[3]=(p-x)/z,e[0]=(R+o)/z,e[1]=.25*z,e[2]=(V+I)/z):(z=Math.sqrt(1+D-m-b)*2,e[3]=(R-o)/z,e[0]=(p+x)/z,e[1]=(V+I)/z,e[2]=.25*z),e}static fromRotationTranslationScale(e,t,n,s){let r=t[0],i=t[1],a=t[2],c=t[3],d=r+r,l=i+i,L=a+a,k=r*d,y=r*l,h=r*L,M=i*l,T=i*L,m=a*L,R=c*d,x=c*l,o=c*L,b=s[0],V=s[1],p=s[2];return e[0]=(1-(M+m))*b,e[1]=(y+o)*b,e[2]=(h-x)*b,e[3]=0,e[4]=(y-o)*V,e[5]=(1-(k+m))*V,e[6]=(T+R)*V,e[7]=0,e[8]=(h+x)*p,e[9]=(T-R)*p,e[10]=(1-(k+M))*p,e[11]=0,e[12]=n[0],e[13]=n[1],e[14]=n[2],e[15]=1,e}static fromRotationTranslationScaleOrigin(e,t,n,s,r){let i=t[0],a=t[1],c=t[2],d=t[3],l=i+i,L=a+a,k=c+c,y=i*l,h=i*L,M=i*k,T=a*L,m=a*k,R=c*k,x=d*l,o=d*L,b=d*k,V=s[0],p=s[1],I=s[2],D=r[0],S=r[1],z=r[2],Y=(1-(T+R))*V,P=(h+b)*V,O=(M-o)*V,N=(h-b)*p,v=(1-(y+R))*p,re=(m+x)*p,ie=(M+o)*I,Me=(m-x)*I,Te=(1-(y+T))*I;return e[0]=Y,e[1]=P,e[2]=O,e[3]=0,e[4]=N,e[5]=v,e[6]=re,e[7]=0,e[8]=ie,e[9]=Me,e[10]=Te,e[11]=0,e[12]=n[0]+D-(Y*D+N*S+ie*z),e[13]=n[1]+S-(P*D+v*S+Me*z),e[14]=n[2]+z-(O*D+re*S+Te*z),e[15]=1,e}static fromQuat(e,t){let n=t[0],s=t[1],r=t[2],i=t[3],a=n+n,c=s+s,d=r+r,l=n*a,L=s*a,k=s*c,y=r*a,h=r*c,M=r*d,T=i*a,m=i*c,R=i*d;return e[0]=1-k-M,e[1]=L+R,e[2]=y-m,e[3]=0,e[4]=L-R,e[5]=1-l-M,e[6]=h+T,e[7]=0,e[8]=y+m,e[9]=h-T,e[10]=1-l-k,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static frustumNO(e,t,n,s,r,i,a=1/0){let c=1/(n-t),d=1/(r-s);if(e[0]=i*2*c,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=i*2*d,e[6]=0,e[7]=0,e[8]=(n+t)*c,e[9]=(r+s)*d,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,a!=null&&a!==1/0){let l=1/(i-a);e[10]=(a+i)*l,e[14]=2*a*i*l}else e[10]=-1,e[14]=-2*i;return e}static frustum(e,t,n,s,r,i,a=1/0){return e}static frustumZO(e,t,n,s,r,i,a=1/0){let c=1/(n-t),d=1/(r-s);if(e[0]=i*2*c,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=i*2*d,e[6]=0,e[7]=0,e[8]=(n+t)*c,e[9]=(r+s)*d,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,a!=null&&a!==1/0){let l=1/(i-a);e[10]=a*l,e[14]=a*i*l}else e[10]=-1,e[14]=-i;return e}static perspectiveNO(e,t,n,s,r=1/0){let i=1/Math.tan(t/2);if(e[0]=i/n,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=i,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,r!=null&&r!==1/0){let a=1/(s-r);e[10]=(r+s)*a,e[14]=2*r*s*a}else e[10]=-1,e[14]=-2*s;return e}static perspective(e,t,n,s,r=1/0){return e}static perspectiveZO(e,t,n,s,r=1/0){let i=1/Math.tan(t/2);if(e[0]=i/n,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=i,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,r!=null&&r!==1/0){let a=1/(s-r);e[10]=r*a,e[14]=r*s*a}else e[10]=-1,e[14]=-s;return e}static perspectiveFromFieldOfView(e,t,n,s){let r=Math.tan(t.upDegrees*Math.PI/180),i=Math.tan(t.downDegrees*Math.PI/180),a=Math.tan(t.leftDegrees*Math.PI/180),c=Math.tan(t.rightDegrees*Math.PI/180),d=2/(a+c),l=2/(r+i);return e[0]=d,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=l,e[6]=0,e[7]=0,e[8]=-((a-c)*d*.5),e[9]=(r-i)*l*.5,e[10]=s/(n-s),e[11]=-1,e[12]=0,e[13]=0,e[14]=s*n/(n-s),e[15]=0,e}static orthoNO(e,t,n,s,r,i,a){let c=1/(t-n),d=1/(s-r),l=1/(i-a);return e[0]=-2*c,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=-2*d,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=2*l,e[11]=0,e[12]=(t+n)*c,e[13]=(r+s)*d,e[14]=(a+i)*l,e[15]=1,e}static ortho(e,t,n,s,r,i,a){return e}static orthoZO(e,t,n,s,r,i,a){let c=1/(t-n),d=1/(s-r),l=1/(i-a);return e[0]=-2*c,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=-2*d,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=l,e[11]=0,e[12]=(t+n)*c,e[13]=(r+s)*d,e[14]=i*l,e[15]=1,e}static lookAt(e,t,n,s){let r=t[0],i=t[1],a=t[2],c=s[0],d=s[1],l=s[2],L=n[0],k=n[1],y=n[2];if(Math.abs(r-L)<1e-6&&Math.abs(i-k)<1e-6&&Math.abs(a-y)<1e-6)return A.identity(e);let h=r-L,M=i-k,T=a-y,m=1/Math.sqrt(h*h+M*M+T*T);h*=m,M*=m,T*=m;let R=d*T-l*M,x=l*h-c*T,o=c*M-d*h;m=Math.sqrt(R*R+x*x+o*o),m?(m=1/m,R*=m,x*=m,o*=m):(R=0,x=0,o=0);let b=M*o-T*x,V=T*R-h*o,p=h*x-M*R;return m=Math.sqrt(b*b+V*V+p*p),m?(m=1/m,b*=m,V*=m,p*=m):(b=0,V=0,p=0),e[0]=R,e[1]=b,e[2]=h,e[3]=0,e[4]=x,e[5]=V,e[6]=M,e[7]=0,e[8]=o,e[9]=p,e[10]=T,e[11]=0,e[12]=-(R*r+x*i+o*a),e[13]=-(b*r+V*i+p*a),e[14]=-(h*r+M*i+T*a),e[15]=1,e}static targetTo(e,t,n,s){let r=t[0],i=t[1],a=t[2],c=s[0],d=s[1],l=s[2],L=r-n[0],k=i-n[1],y=a-n[2],h=L*L+k*k+y*y;h>0&&(h=1/Math.sqrt(h),L*=h,k*=h,y*=h);let M=d*y-l*k,T=l*L-c*y,m=c*k-d*L;return h=M*M+T*T+m*m,h>0&&(h=1/Math.sqrt(h),M*=h,T*=h,m*=h),e[0]=M,e[1]=T,e[2]=m,e[3]=0,e[4]=k*m-y*T,e[5]=y*M-L*m,e[6]=L*T-k*M,e[7]=0,e[8]=L,e[9]=k,e[10]=y,e[11]=0,e[12]=r,e[13]=i,e[14]=a,e[15]=1,e}static frob(e){return Math.sqrt(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]+e[3]*e[3]+e[4]*e[4]+e[5]*e[5]+e[6]*e[6]+e[7]*e[7]+e[8]*e[8]+e[9]*e[9]+e[10]*e[10]+e[11]*e[11]+e[12]*e[12]+e[13]*e[13]+e[14]*e[14]+e[15]*e[15])}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e[4]=t[4]+n[4],e[5]=t[5]+n[5],e[6]=t[6]+n[6],e[7]=t[7]+n[7],e[8]=t[8]+n[8],e[9]=t[9]+n[9],e[10]=t[10]+n[10],e[11]=t[11]+n[11],e[12]=t[12]+n[12],e[13]=t[13]+n[13],e[14]=t[14]+n[14],e[15]=t[15]+n[15],e}static subtract(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e[4]=t[4]-n[4],e[5]=t[5]-n[5],e[6]=t[6]-n[6],e[7]=t[7]-n[7],e[8]=t[8]-n[8],e[9]=t[9]-n[9],e[10]=t[10]-n[10],e[11]=t[11]-n[11],e[12]=t[12]-n[12],e[13]=t[13]-n[13],e[14]=t[14]-n[14],e[15]=t[15]-n[15],e}static sub(e,t,n){return e}static multiplyScalar(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*n,e[5]=t[5]*n,e[6]=t[6]*n,e[7]=t[7]*n,e[8]=t[8]*n,e[9]=t[9]*n,e[10]=t[10]*n,e[11]=t[11]*n,e[12]=t[12]*n,e[13]=t[13]*n,e[14]=t[14]*n,e[15]=t[15]*n,e}static multiplyScalarAndAdd(e,t,n,s){return e[0]=t[0]+n[0]*s,e[1]=t[1]+n[1]*s,e[2]=t[2]+n[2]*s,e[3]=t[3]+n[3]*s,e[4]=t[4]+n[4]*s,e[5]=t[5]+n[5]*s,e[6]=t[6]+n[6]*s,e[7]=t[7]+n[7]*s,e[8]=t[8]+n[8]*s,e[9]=t[9]+n[9]*s,e[10]=t[10]+n[10]*s,e[11]=t[11]+n[11]*s,e[12]=t[12]+n[12]*s,e[13]=t[13]+n[13]*s,e[14]=t[14]+n[14]*s,e[15]=t[15]+n[15]*s,e}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]&&e[8]===t[8]&&e[9]===t[9]&&e[10]===t[10]&&e[11]===t[11]&&e[12]===t[12]&&e[13]===t[13]&&e[14]===t[14]&&e[15]===t[15]}static equals(e,t){let n=e[0],s=e[1],r=e[2],i=e[3],a=e[4],c=e[5],d=e[6],l=e[7],L=e[8],k=e[9],y=e[10],h=e[11],M=e[12],T=e[13],m=e[14],R=e[15],x=t[0],o=t[1],b=t[2],V=t[3],p=t[4],I=t[5],D=t[6],S=t[7],z=t[8],Y=t[9],P=t[10],O=t[11],N=t[12],v=t[13],re=t[14],ie=t[15];return Math.abs(n-x)<=1e-6*Math.max(1,Math.abs(n),Math.abs(x))&&Math.abs(s-o)<=1e-6*Math.max(1,Math.abs(s),Math.abs(o))&&Math.abs(r-b)<=1e-6*Math.max(1,Math.abs(r),Math.abs(b))&&Math.abs(i-V)<=1e-6*Math.max(1,Math.abs(i),Math.abs(V))&&Math.abs(a-p)<=1e-6*Math.max(1,Math.abs(a),Math.abs(p))&&Math.abs(c-I)<=1e-6*Math.max(1,Math.abs(c),Math.abs(I))&&Math.abs(d-D)<=1e-6*Math.max(1,Math.abs(d),Math.abs(D))&&Math.abs(l-S)<=1e-6*Math.max(1,Math.abs(l),Math.abs(S))&&Math.abs(L-z)<=1e-6*Math.max(1,Math.abs(L),Math.abs(z))&&Math.abs(k-Y)<=1e-6*Math.max(1,Math.abs(k),Math.abs(Y))&&Math.abs(y-P)<=1e-6*Math.max(1,Math.abs(y),Math.abs(P))&&Math.abs(h-O)<=1e-6*Math.max(1,Math.abs(h),Math.abs(O))&&Math.abs(M-N)<=1e-6*Math.max(1,Math.abs(M),Math.abs(N))&&Math.abs(T-v)<=1e-6*Math.max(1,Math.abs(T),Math.abs(v))&&Math.abs(m-re)<=1e-6*Math.max(1,Math.abs(m),Math.abs(re))&&Math.abs(R-ie)<=1e-6*Math.max(1,Math.abs(R),Math.abs(ie))}static str(e){return`Mat4(${e.join(\", \")})`}};se=new WeakMap,C=new WeakMap,G(A,se,new Float64Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1])),G(A,C,new Float64Array(3));var j=A;j.prototype.mul=j.prototype.multiply;j.sub=j.subtract;j.mul=j.multiply;j.frustum=j.frustumNO;j.perspective=j.perspectiveNO;j.ortho=j.orthoNO;j.normalFromMat4Fast=j.normalFromMat4;var E=class w extends Float64Array{constructor(...e){switch(e.length){case 3:super(e);break;case 2:super(e[0],e[1],3);break;case 1:{let t=e[0];t===void 0?super(3):typeof t==\"number\"?super([t,t,t]):super(t,0,3);break}default:super(3);break}}get x(){return this[0]}set x(e){this[0]=e}get y(){return this[1]}set y(e){this[1]=e}get z(){return this[2]}set z(e){this[2]=e}get r(){return this[0]}set r(e){this[0]=e}get g(){return this[1]}set g(e){this[1]=e}get b(){return this[2]}set b(e){this[2]=e}get magnitude(){let e=this[0],t=this[1],n=this[2];return Math.sqrt(e*e+t*t+n*n)}get mag(){return this.magnitude}get squaredMagnitude(){let e=this[0],t=this[1],n=this[2];return e*e+t*t+n*n}get sqrMag(){return this.squaredMagnitude}get str(){return w.str(this)}copy(e){return this.set(e),this}add(e){return this[0]+=e[0],this[1]+=e[1],this[2]+=e[2],this}subtract(e){return this[0]-=e[0],this[1]-=e[1],this[2]-=e[2],this}sub(e){return this}multiply(e){return this[0]*=e[0],this[1]*=e[1],this[2]*=e[2],this}mul(e){return this}divide(e){return this[0]/=e[0],this[1]/=e[1],this[2]/=e[2],this}div(e){return this}scale(e){return this[0]*=e,this[1]*=e,this[2]*=e,this}scaleAndAdd(e,t){return this[0]+=e[0]*t,this[1]+=e[1]*t,this[2]+=e[2]*t,this}distance(e){return w.distance(this,e)}dist(e){return 0}squaredDistance(e){return w.squaredDistance(this,e)}sqrDist(e){return 0}negate(){return this[0]*=-1,this[1]*=-1,this[2]*=-1,this}invert(){return this[0]=1/this[0],this[1]=1/this[1],this[2]=1/this[2],this}abs(){return this[0]=Math.abs(this[0]),this[1]=Math.abs(this[1]),this[2]=Math.abs(this[2]),this}dot(e){return this[0]*e[0]+this[1]*e[1]+this[2]*e[2]}normalize(){return w.normalize(this,this)}static get BYTE_LENGTH(){return 3*Float64Array.BYTES_PER_ELEMENT}static create(){return new w}static clone(e){return new w(e)}static magnitude(e){let t=e[0],n=e[1],s=e[2];return Math.sqrt(t*t+n*n+s*s)}static mag(e){return 0}static length(e){return 0}static len(e){return 0}static fromValues(e,t,n){return new w(e,t,n)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e}static set(e,t,n,s){return e[0]=t,e[1]=n,e[2]=s,e}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e}static subtract(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e}static sub(e,t,n){return e}static multiply(e,t,n){return e[0]=t[0]*n[0],e[1]=t[1]*n[1],e[2]=t[2]*n[2],e}static mul(e,t,n){return e}static divide(e,t,n){return e[0]=t[0]/n[0],e[1]=t[1]/n[1],e[2]=t[2]/n[2],e}static div(e,t,n){return e}static ceil(e,t){return e[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e[2]=Math.ceil(t[2]),e}static floor(e,t){return e[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e[2]=Math.floor(t[2]),e}static min(e,t,n){return e[0]=Math.min(t[0],n[0]),e[1]=Math.min(t[1],n[1]),e[2]=Math.min(t[2],n[2]),e}static max(e,t,n){return e[0]=Math.max(t[0],n[0]),e[1]=Math.max(t[1],n[1]),e[2]=Math.max(t[2],n[2]),e}static scale(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e}static scaleAndAdd(e,t,n,s){return e[0]=t[0]+n[0]*s,e[1]=t[1]+n[1]*s,e[2]=t[2]+n[2]*s,e}static distance(e,t){let n=t[0]-e[0],s=t[1]-e[1],r=t[2]-e[2];return Math.sqrt(n*n+s*s+r*r)}static dist(e,t){return 0}static squaredDistance(e,t){let n=t[0]-e[0],s=t[1]-e[1],r=t[2]-e[2];return n*n+s*s+r*r}static sqrDist(e,t){return 0}static squaredLength(e){let t=e[0],n=e[1],s=e[2];return t*t+n*n+s*s}static sqrLen(e,t){return 0}static negate(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e}static inverse(e,t){return e[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e}static abs(e,t){return e[0]=Math.abs(t[0]),e[1]=Math.abs(t[1]),e[2]=Math.abs(t[2]),e}static normalize(e,t){let n=t[0],s=t[1],r=t[2],i=n*n+s*s+r*r;return i>0&&(i=1/Math.sqrt(i)),e[0]=t[0]*i,e[1]=t[1]*i,e[2]=t[2]*i,e}static dot(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}static cross(e,t,n){let s=t[0],r=t[1],i=t[2],a=n[0],c=n[1],d=n[2];return e[0]=r*d-i*c,e[1]=i*a-s*d,e[2]=s*c-r*a,e}static lerp(e,t,n,s){let r=t[0],i=t[1],a=t[2];return e[0]=r+s*(n[0]-r),e[1]=i+s*(n[1]-i),e[2]=a+s*(n[2]-a),e}static slerp(e,t,n,s){let r=Math.acos(Math.min(Math.max(w.dot(t,n),-1),1)),i=Math.sin(r),a=Math.sin((1-s)*r)/i,c=Math.sin(s*r)/i;return e[0]=a*t[0]+c*n[0],e[1]=a*t[1]+c*n[1],e[2]=a*t[2]+c*n[2],e}static hermite(e,t,n,s,r,i){let a=i*i,c=a*(2*i-3)+1,d=a*(i-2)+i,l=a*(i-1),L=a*(3-2*i);return e[0]=t[0]*c+n[0]*d+s[0]*l+r[0]*L,e[1]=t[1]*c+n[1]*d+s[1]*l+r[1]*L,e[2]=t[2]*c+n[2]*d+s[2]*l+r[2]*L,e}static bezier(e,t,n,s,r,i){let a=1-i,c=a*a,d=i*i,l=c*a,L=3*i*c,k=3*d*a,y=d*i;return e[0]=t[0]*l+n[0]*L+s[0]*k+r[0]*y,e[1]=t[1]*l+n[1]*L+s[1]*k+r[1]*y,e[2]=t[2]*l+n[2]*L+s[2]*k+r[2]*y,e}static transformMat4(e,t,n){let s=t[0],r=t[1],i=t[2],a=n[3]*s+n[7]*r+n[11]*i+n[15]||1;return e[0]=(n[0]*s+n[4]*r+n[8]*i+n[12])/a,e[1]=(n[1]*s+n[5]*r+n[9]*i+n[13])/a,e[2]=(n[2]*s+n[6]*r+n[10]*i+n[14])/a,e}static transformMat3(e,t,n){let s=t[0],r=t[1],i=t[2];return e[0]=s*n[0]+r*n[3]+i*n[6],e[1]=s*n[1]+r*n[4]+i*n[7],e[2]=s*n[2]+r*n[5]+i*n[8],e}static transformQuat(e,t,n){let s=n[0],r=n[1],i=n[2],a=n[3]*2,c=t[0],d=t[1],l=t[2],L=r*l-i*d,k=i*c-s*l,y=s*d-r*c,h=(r*y-i*k)*2,M=(i*L-s*y)*2,T=(s*k-r*L)*2;return e[0]=c+L*a+h,e[1]=d+k*a+M,e[2]=l+y*a+T,e}static rotateX(e,t,n,s){let r=n[1],i=n[2],a=t[1]-r,c=t[2]-i;return e[0]=t[0],e[1]=a*Math.cos(s)-c*Math.sin(s)+r,e[2]=a*Math.sin(s)+c*Math.cos(s)+i,e}static rotateY(e,t,n,s){let r=n[0],i=n[2],a=t[0]-r,c=t[2]-i;return e[0]=c*Math.sin(s)+a*Math.cos(s)+r,e[1]=t[1],e[2]=c*Math.cos(s)-a*Math.sin(s)+i,e}static rotateZ(e,t,n,s){let r=n[0],i=n[1],a=t[0]-r,c=t[1]-i;return e[0]=a*Math.cos(s)-c*Math.sin(s)+r,e[1]=a*Math.sin(s)+c*Math.cos(s)+i,e[2]=n[2],e}static angle(e,t){let n=e[0],s=e[1],r=e[2],i=t[0],a=t[1],c=t[2],d=Math.sqrt((n*n+s*s+r*r)*(i*i+a*a+c*c)),l=d&&w.dot(e,t)/d;return Math.acos(Math.min(Math.max(l,-1),1))}static zero(e){return e[0]=0,e[1]=0,e[2]=0,e}static str(e){return`Vec3(${e.join(\", \")})`}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]}static equals(e,t){let n=e[0],s=e[1],r=e[2],i=t[0],a=t[1],c=t[2];return Math.abs(n-i)<=1e-6*Math.max(1,Math.abs(n),Math.abs(i))&&Math.abs(s-a)<=1e-6*Math.max(1,Math.abs(s),Math.abs(a))&&Math.abs(r-c)<=1e-6*Math.max(1,Math.abs(r),Math.abs(c))}};E.prototype.sub=E.prototype.subtract;E.prototype.mul=E.prototype.multiply;E.prototype.div=E.prototype.divide;E.prototype.dist=E.prototype.distance;E.prototype.sqrDist=E.prototype.squaredDistance;E.sub=E.subtract;E.mul=E.multiply;E.div=E.divide;E.dist=E.distance;E.sqrDist=E.squaredDistance;E.sqrLen=E.squaredLength;E.mag=E.magnitude;E.length=E.magnitude;E.len=E.magnitude;var q=class w extends Float64Array{constructor(...e){switch(e.length){case 4:super(e);break;case 2:super(e[0],e[1],4);break;case 1:{let t=e[0];t===void 0?super(4):typeof t==\"number\"?super([t,t,t,t]):super(t,0,4);break}default:super(4);break}}get x(){return this[0]}set x(e){this[0]=e}get y(){return this[1]}set y(e){this[1]=e}get z(){return this[2]}set z(e){this[2]=e}get w(){return this[3]}set w(e){this[3]=e}get r(){return this[0]}set r(e){this[0]=e}get g(){return this[1]}set g(e){this[1]=e}get b(){return this[2]}set b(e){this[2]=e}get a(){return this[3]}set a(e){this[3]=e}get magnitude(){let e=this[0],t=this[1],n=this[2],s=this[3];return Math.sqrt(e*e+t*t+n*n+s*s)}get mag(){return this.magnitude}get str(){return w.str(this)}copy(e){return super.set(e),this}add(e){return this[0]+=e[0],this[1]+=e[1],this[2]+=e[2],this[3]+=e[3],this}subtract(e){return this[0]-=e[0],this[1]-=e[1],this[2]-=e[2],this[3]-=e[3],this}sub(e){return this}multiply(e){return this[0]*=e[0],this[1]*=e[1],this[2]*=e[2],this[3]*=e[3],this}mul(e){return this}divide(e){return this[0]/=e[0],this[1]/=e[1],this[2]/=e[2],this[3]/=e[3],this}div(e){return this}scale(e){return this[0]*=e,this[1]*=e,this[2]*=e,this[3]*=e,this}scaleAndAdd(e,t){return this[0]+=e[0]*t,this[1]+=e[1]*t,this[2]+=e[2]*t,this[3]+=e[3]*t,this}distance(e){return w.distance(this,e)}dist(e){return 0}squaredDistance(e){return w.squaredDistance(this,e)}sqrDist(e){return 0}negate(){return this[0]*=-1,this[1]*=-1,this[2]*=-1,this[3]*=-1,this}invert(){return this[0]=1/this[0],this[1]=1/this[1],this[2]=1/this[2],this[3]=1/this[3],this}abs(){return this[0]=Math.abs(this[0]),this[1]=Math.abs(this[1]),this[2]=Math.abs(this[2]),this[3]=Math.abs(this[3]),this}dot(e){return this[0]*e[0]+this[1]*e[1]+this[2]*e[2]+this[3]*e[3]}normalize(){return w.normalize(this,this)}static get BYTE_LENGTH(){return 4*Float64Array.BYTES_PER_ELEMENT}static create(){return new w}static clone(e){return new w(e)}static fromValues(e,t,n,s){return new w(e,t,n,s)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}static set(e,t,n,s,r){return e[0]=t,e[1]=n,e[2]=s,e[3]=r,e}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e}static subtract(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e}static sub(e,t,n){return e}static multiply(e,t,n){return e[0]=t[0]*n[0],e[1]=t[1]*n[1],e[2]=t[2]*n[2],e[3]=t[3]*n[3],e}static mul(e,t,n){return e}static divide(e,t,n){return e[0]=t[0]/n[0],e[1]=t[1]/n[1],e[2]=t[2]/n[2],e[3]=t[3]/n[3],e}static div(e,t,n){return e}static ceil(e,t){return e[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e[2]=Math.ceil(t[2]),e[3]=Math.ceil(t[3]),e}static floor(e,t){return e[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e[2]=Math.floor(t[2]),e[3]=Math.floor(t[3]),e}static min(e,t,n){return e[0]=Math.min(t[0],n[0]),e[1]=Math.min(t[1],n[1]),e[2]=Math.min(t[2],n[2]),e[3]=Math.min(t[3],n[3]),e}static max(e,t,n){return e[0]=Math.max(t[0],n[0]),e[1]=Math.max(t[1],n[1]),e[2]=Math.max(t[2],n[2]),e[3]=Math.max(t[3],n[3]),e}static round(e,t){return e[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e[2]=Math.round(t[2]),e[3]=Math.round(t[3]),e}static scale(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e}static scaleAndAdd(e,t,n,s){return e[0]=t[0]+n[0]*s,e[1]=t[1]+n[1]*s,e[2]=t[2]+n[2]*s,e[3]=t[3]+n[3]*s,e}static distance(e,t){let n=t[0]-e[0],s=t[1]-e[1],r=t[2]-e[2],i=t[3]-e[3];return Math.hypot(n,s,r,i)}static dist(e,t){return 0}static squaredDistance(e,t){let n=t[0]-e[0],s=t[1]-e[1],r=t[2]-e[2],i=t[3]-e[3];return n*n+s*s+r*r+i*i}static sqrDist(e,t){return 0}static magnitude(e){let t=e[0],n=e[1],s=e[2],r=e[3];return Math.sqrt(t*t+n*n+s*s+r*r)}static mag(e){return 0}static length(e){return 0}static len(e){return 0}static squaredLength(e){let t=e[0],n=e[1],s=e[2],r=e[3];return t*t+n*n+s*s+r*r}static sqrLen(e){return 0}static negate(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=-t[3],e}static inverse(e,t){return e[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e[3]=1/t[3],e}static abs(e,t){return e[0]=Math.abs(t[0]),e[1]=Math.abs(t[1]),e[2]=Math.abs(t[2]),e[3]=Math.abs(t[3]),e}static normalize(e,t){let n=t[0],s=t[1],r=t[2],i=t[3],a=n*n+s*s+r*r+i*i;return a>0&&(a=1/Math.sqrt(a)),e[0]=n*a,e[1]=s*a,e[2]=r*a,e[3]=i*a,e}static dot(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]}static cross(e,t,n,s){let r=n[0]*s[1]-n[1]*s[0],i=n[0]*s[2]-n[2]*s[0],a=n[0]*s[3]-n[3]*s[0],c=n[1]*s[2]-n[2]*s[1],d=n[1]*s[3]-n[3]*s[1],l=n[2]*s[3]-n[3]*s[2],L=t[0],k=t[1],y=t[2],h=t[3];return e[0]=k*l-y*d+h*c,e[1]=-(L*l)+y*a-h*i,e[2]=L*d-k*a+h*r,e[3]=-(L*c)+k*i-y*r,e}static lerp(e,t,n,s){let r=t[0],i=t[1],a=t[2],c=t[3];return e[0]=r+s*(n[0]-r),e[1]=i+s*(n[1]-i),e[2]=a+s*(n[2]-a),e[3]=c+s*(n[3]-c),e}static transformMat4(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3];return e[0]=n[0]*s+n[4]*r+n[8]*i+n[12]*a,e[1]=n[1]*s+n[5]*r+n[9]*i+n[13]*a,e[2]=n[2]*s+n[6]*r+n[10]*i+n[14]*a,e[3]=n[3]*s+n[7]*r+n[11]*i+n[15]*a,e}static transformQuat(e,t,n){let s=t[0],r=t[1],i=t[2],a=n[0],c=n[1],d=n[2],l=n[3],L=l*s+c*i-d*r,k=l*r+d*s-a*i,y=l*i+a*r-c*s,h=-a*s-c*r-d*i;return e[0]=L*l+h*-a+k*-d-y*-c,e[1]=k*l+h*-c+y*-a-L*-d,e[2]=y*l+h*-d+L*-c-k*-a,e[3]=t[3],e}static zero(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=0,e}static str(e){return`Vec4(${e.join(\", \")})`}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]}static equals(e,t){let n=e[0],s=e[1],r=e[2],i=e[3],a=t[0],c=t[1],d=t[2],l=t[3];return Math.abs(n-a)<=1e-6*Math.max(1,Math.abs(n),Math.abs(a))&&Math.abs(s-c)<=1e-6*Math.max(1,Math.abs(s),Math.abs(c))&&Math.abs(r-d)<=1e-6*Math.max(1,Math.abs(r),Math.abs(d))&&Math.abs(i-l)<=1e-6*Math.max(1,Math.abs(i),Math.abs(l))}};q.prototype.sub=q.prototype.subtract;q.prototype.mul=q.prototype.multiply;q.prototype.div=q.prototype.divide;q.prototype.dist=q.prototype.distance;q.prototype.sqrDist=q.prototype.squaredDistance;q.sub=q.subtract;q.mul=q.multiply;q.div=q.divide;q.dist=q.distance;q.sqrDist=q.squaredDistance;q.sqrLen=q.squaredLength;q.mag=q.magnitude;q.length=q.magnitude;q.len=q.magnitude;var ye=new Float64Array([0,0,0,1]),Le,ae,ce,U,W,ke,he,Q=class Q extends Float64Array{constructor(...e){switch(e.length){case 4:super(e);break;case 2:super(e[0],e[1],4);break;case 1:{let t=e[0];t===void 0?super(ye):typeof t==\"number\"?super([t,t,t,t]):super(t,0,4);break}default:super(ye);break}}get x(){return this[0]}set x(e){this[0]=e}get y(){return this[1]}set y(e){this[1]=e}get z(){return this[2]}set z(e){this[2]=e}get w(){return this[3]}set w(e){this[3]=e}get magnitude(){let e=this[0],t=this[1],n=this[2],s=this[3];return Math.sqrt(e*e+t*t+n*n+s*s)}get mag(){return this.magnitude}get str(){return Q.str(this)}copy(e){return super.set(e),this}identity(){return this.set(ye),this}multiply(e){return Q.multiply(this,this,e)}mul(e){return this}rotateX(e){return Q.rotateX(this,this,e)}rotateY(e){return Q.rotateY(this,this,e)}rotateZ(e){return Q.rotateZ(this,this,e)}invert(){return Q.invert(this,this)}scale(e){return this[0]*=e,this[1]*=e,this[2]*=e,this[3]*=e,this}dot(e){return Q.dot(this,e)}static get BYTE_LENGTH(){return 4*Float64Array.BYTES_PER_ELEMENT}static create(){return new Q}static identity(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e}static setAxisAngle(e,t,n){n*=.5;let s=Math.sin(n);return e[0]=s*t[0],e[1]=s*t[1],e[2]=s*t[2],e[3]=Math.cos(n),e}static getAxisAngle(e,t){let n=Math.acos(t[3])*2,s=Math.sin(n/2);return s>1e-6?(e[0]=t[0]/s,e[1]=t[1]/s,e[2]=t[2]/s):(e[0]=1,e[1]=0,e[2]=0),n}static getAngle(e,t){let n=Q.dot(e,t);return Math.acos(2*n*n-1)}static multiply(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=n[0],d=n[1],l=n[2],L=n[3];return e[0]=s*L+a*c+r*l-i*d,e[1]=r*L+a*d+i*c-s*l,e[2]=i*L+a*l+s*d-r*c,e[3]=a*L-s*c-r*d-i*l,e}static rotateX(e,t,n){n*=.5;let s=t[0],r=t[1],i=t[2],a=t[3],c=Math.sin(n),d=Math.cos(n);return e[0]=s*d+a*c,e[1]=r*d+i*c,e[2]=i*d-r*c,e[3]=a*d-s*c,e}static rotateY(e,t,n){n*=.5;let s=t[0],r=t[1],i=t[2],a=t[3],c=Math.sin(n),d=Math.cos(n);return e[0]=s*d-i*c,e[1]=r*d+a*c,e[2]=i*d+s*c,e[3]=a*d-r*c,e}static rotateZ(e,t,n){n*=.5;let s=t[0],r=t[1],i=t[2],a=t[3],c=Math.sin(n),d=Math.cos(n);return e[0]=s*d+r*c,e[1]=r*d-s*c,e[2]=i*d+a*c,e[3]=a*d-i*c,e}static calculateW(e,t){let n=t[0],s=t[1],r=t[2];return e[0]=n,e[1]=s,e[2]=r,e[3]=Math.sqrt(Math.abs(1-n*n-s*s-r*r)),e}static exp(e,t){let n=t[0],s=t[1],r=t[2],i=t[3],a=Math.sqrt(n*n+s*s+r*r),c=Math.exp(i),d=a>0?c*Math.sin(a)/a:0;return e[0]=n*d,e[1]=s*d,e[2]=r*d,e[3]=c*Math.cos(a),e}static ln(e,t){let n=t[0],s=t[1],r=t[2],i=t[3],a=Math.sqrt(n*n+s*s+r*r),c=a>0?Math.atan2(a,i)/a:0;return e[0]=n*c,e[1]=s*c,e[2]=r*c,e[3]=.5*Math.log(n*n+s*s+r*r+i*i),e}static pow(e,t,n){return Q.ln(e,t),Q.scale(e,e,n),Q.exp(e,e),e}static slerp(e,t,n,s){let r=t[0],i=t[1],a=t[2],c=t[3],d=n[0],l=n[1],L=n[2],k=n[3],y,h,M=r*d+i*l+a*L+c*k;if(M<0&&(M=-M,d=-d,l=-l,L=-L,k=-k),1-M>1e-6){let T=Math.acos(M),m=Math.sin(T);y=Math.sin((1-s)*T)/m,h=Math.sin(s*T)/m}else y=1-s,h=s;return e[0]=y*r+h*d,e[1]=y*i+h*l,e[2]=y*a+h*L,e[3]=y*c+h*k,e}static invert(e,t){let n=t[0],s=t[1],r=t[2],i=t[3],a=n*n+s*s+r*r+i*i,c=a?1/a:0;return e[0]=-n*c,e[1]=-s*c,e[2]=-r*c,e[3]=i*c,e}static conjugate(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=t[3],e}static fromMat3(e,t){let n=t[0]+t[4]+t[8],s;if(n>0)s=Math.sqrt(n+1),e[3]=.5*s,s=.5/s,e[0]=(t[5]-t[7])*s,e[1]=(t[6]-t[2])*s,e[2]=(t[1]-t[3])*s;else{let r=0;t[4]>t[0]&&(r=1),t[8]>t[r*3+r]&&(r=2);let i=(r+1)%3,a=(r+2)%3;s=Math.sqrt(t[r*3+r]-t[i*3+i]-t[a*3+a]+1),e[r]=.5*s,s=.5/s,e[3]=(t[i*3+a]-t[a*3+i])*s,e[i]=(t[i*3+r]+t[r*3+i])*s,e[a]=(t[a*3+r]+t[r*3+a])*s}return e}static fromEuler(e,t,n,s,r=f(Q,Le)){let i=.5*Math.PI/180;t*=i,n*=i,s*=i;let a=Math.sin(t),c=Math.cos(t),d=Math.sin(n),l=Math.cos(n),L=Math.sin(s),k=Math.cos(s);switch(r){case\"xyz\":e[0]=a*l*k+c*d*L,e[1]=c*d*k-a*l*L,e[2]=c*l*L+a*d*k,e[3]=c*l*k-a*d*L;break;case\"xzy\":e[0]=a*l*k-c*d*L,e[1]=c*d*k-a*l*L,e[2]=c*l*L+a*d*k,e[3]=c*l*k+a*d*L;break;case\"yxz\":e[0]=a*l*k+c*d*L,e[1]=c*d*k-a*l*L,e[2]=c*l*L-a*d*k,e[3]=c*l*k+a*d*L;break;case\"yzx\":e[0]=a*l*k+c*d*L,e[1]=c*d*k+a*l*L,e[2]=c*l*L-a*d*k,e[3]=c*l*k-a*d*L;break;case\"zxy\":e[0]=a*l*k-c*d*L,e[1]=c*d*k+a*l*L,e[2]=c*l*L+a*d*k,e[3]=c*l*k-a*d*L;break;case\"zyx\":e[0]=a*l*k-c*d*L,e[1]=c*d*k+a*l*L,e[2]=c*l*L-a*d*k,e[3]=c*l*k+a*d*L;break;default:throw new Error(`Unknown angle order ${r}`)}return e}static str(e){return`Quat(${e.join(\", \")})`}static clone(e){return new Q(e)}static fromValues(e,t,n,s){return new Q(e,t,n,s)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}static set(e,t,n,s,r){return e}static add(e,t,n){return e}static mul(e,t,n){return e}static scale(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e}static dot(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]}static lerp(e,t,n,s){return e}static magnitude(e){return 0}static mag(e){return 0}static length(e){return 0}static len(e){return 0}static squaredLength(e){return 0}static sqrLen(e){return 0}static normalize(e,t){return e}static exactEquals(e,t){return!1}static equals(e,t){return!1}static rotationTo(e,t,n){let s=E.dot(t,n);return s<-.999999?(E.cross(f(Q,W),f(Q,ke),t),E.mag(f(Q,W))<1e-6&&E.cross(f(Q,W),f(Q,he),t),E.normalize(f(Q,W),f(Q,W)),Q.setAxisAngle(e,f(Q,W),Math.PI),e):s>.999999?(e[0]=0,e[1]=0,e[2]=0,e[3]=1,e):(E.cross(f(Q,W),t,n),e[0]=f(Q,W)[0],e[1]=f(Q,W)[1],e[2]=f(Q,W)[2],e[3]=1+s,Q.normalize(e,e))}static sqlerp(e,t,n,s,r,i){return Q.slerp(f(Q,ae),t,r,i),Q.slerp(f(Q,ce),n,s,i),Q.slerp(e,f(Q,ae),f(Q,ce),2*i*(1-i)),e}static setAxes(e,t,n,s){return f(Q,U)[0]=n[0],f(Q,U)[3]=n[1],f(Q,U)[6]=n[2],f(Q,U)[1]=s[0],f(Q,U)[4]=s[1],f(Q,U)[7]=s[2],f(Q,U)[2]=-t[0],f(Q,U)[5]=-t[1],f(Q,U)[8]=-t[2],Q.normalize(e,Q.fromMat3(e,f(Q,U)))}};Le=new WeakMap,ae=new WeakMap,ce=new WeakMap,U=new WeakMap,W=new WeakMap,ke=new WeakMap,he=new WeakMap,G(Q,Le,\"zyx\"),G(Q,ae,new Float64Array(4)),G(Q,ce,new Float64Array(4)),G(Q,U,new Float64Array(9)),G(Q,W,new Float64Array(3)),G(Q,ke,new Float64Array([1,0,0])),G(Q,he,new Float64Array([0,1,0]));var F=Q;F.set=q.set;F.add=q.add;F.lerp=q.lerp;F.normalize=q.normalize;F.squaredLength=q.squaredLength;F.sqrLen=q.squaredLength;F.exactEquals=q.exactEquals;F.equals=q.equals;F.magnitude=q.magnitude;F.prototype.mul=F.prototype.multiply;F.mul=F.multiply;F.mag=F.magnitude;F.length=F.magnitude;F.len=F.magnitude;var Re=new Float64Array([0,0,0,1,0,0,0,0]),de,le,Z=class Z extends Float64Array{constructor(...e){switch(e.length){case 8:super(e);break;case 2:super(e[0],e[1],8);break;case 1:{let t=e[0];t===void 0?super(Re):typeof t==\"number\"?super([t,t,t,t,t,t,t,t]):super(t,0,8);break}default:super(Re);break}}get str(){return Z.str(this)}copy(e){return super.set(e),this}static get BYTE_LENGTH(){return 8*Float64Array.BYTES_PER_ELEMENT}static create(){return new Z}static clone(e){return new Z(e)}static fromValues(e,t,n,s,r,i,a,c){return new Z(e,t,n,s,r,i,a,c)}static fromRotationTranslationValues(e,t,n,s,r,i,a){let c=r*.5,d=i*.5,l=a*.5;return new Z(e,t,n,s,c*s+d*n-l*t,d*s+l*e-c*n,l*s+c*t-d*e,-c*e-d*t-l*n)}static fromRotationTranslation(e,t,n){let s=n[0]*.5,r=n[1]*.5,i=n[2]*.5,a=t[0],c=t[1],d=t[2],l=t[3];return e[0]=a,e[1]=c,e[2]=d,e[3]=l,e[4]=s*l+r*d-i*c,e[5]=r*l+i*a-s*d,e[6]=i*l+s*c-r*a,e[7]=-s*a-r*c-i*d,e}static fromTranslation(e,t){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e[4]=t[0]*.5,e[5]=t[1]*.5,e[6]=t[2]*.5,e[7]=0,e}static fromRotation(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=0,e[5]=0,e[6]=0,e[7]=0,e}static fromMat4(e,t){return j.getRotation(f(Z,de),t),j.getTranslation(f(Z,le),t),Z.fromRotationTranslation(e,f(Z,de),f(Z,le))}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e}static identity(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e[4]=0,e[5]=0,e[6]=0,e[7]=0,e}static set(e,t,n,s,r,i,a,c,d){return e[0]=t,e[1]=n,e[2]=s,e[3]=r,e[4]=i,e[5]=a,e[6]=c,e[7]=d,e}static getReal(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}static getDual(e,t){return e[0]=t[4],e[1]=t[5],e[2]=t[6],e[3]=t[7],e}static setReal(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}static setDual(e,t){return e[4]=t[0],e[5]=t[1],e[6]=t[2],e[7]=t[3],e}static getTranslation(e,t){let n=t[4],s=t[5],r=t[6],i=t[7],a=-t[0],c=-t[1],d=-t[2],l=t[3];return e[0]=(n*l+i*a+s*d-r*c)*2,e[1]=(s*l+i*c+r*a-n*d)*2,e[2]=(r*l+i*d+n*c-s*a)*2,e}static translate(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=n[0]*.5,d=n[1]*.5,l=n[2]*.5,L=t[4],k=t[5],y=t[6],h=t[7];return e[0]=s,e[1]=r,e[2]=i,e[3]=a,e[4]=a*c+r*l-i*d+L,e[5]=a*d+i*c-s*l+k,e[6]=a*l+s*d-r*c+y,e[7]=-s*c-r*d-i*l+h,e}static rotateX(e,t,n){let s=-t[0],r=-t[1],i=-t[2],a=t[3],c=t[4],d=t[5],l=t[6],L=t[7],k=c*a+L*s+d*i-l*r,y=d*a+L*r+l*s-c*i,h=l*a+L*i+c*r-d*s,M=L*a-c*s-d*r-l*i;return F.rotateX(e,t,n),s=e[0],r=e[1],i=e[2],a=e[3],e[4]=k*a+M*s+y*i-h*r,e[5]=y*a+M*r+h*s-k*i,e[6]=h*a+M*i+k*r-y*s,e[7]=M*a-k*s-y*r-h*i,e}static rotateY(e,t,n){let s=-t[0],r=-t[1],i=-t[2],a=t[3],c=t[4],d=t[5],l=t[6],L=t[7],k=c*a+L*s+d*i-l*r,y=d*a+L*r+l*s-c*i,h=l*a+L*i+c*r-d*s,M=L*a-c*s-d*r-l*i;return F.rotateY(e,t,n),s=e[0],r=e[1],i=e[2],a=e[3],e[4]=k*a+M*s+y*i-h*r,e[5]=y*a+M*r+h*s-k*i,e[6]=h*a+M*i+k*r-y*s,e[7]=M*a-k*s-y*r-h*i,e}static rotateZ(e,t,n){let s=-t[0],r=-t[1],i=-t[2],a=t[3],c=t[4],d=t[5],l=t[6],L=t[7],k=c*a+L*s+d*i-l*r,y=d*a+L*r+l*s-c*i,h=l*a+L*i+c*r-d*s,M=L*a-c*s-d*r-l*i;return F.rotateZ(e,t,n),s=e[0],r=e[1],i=e[2],a=e[3],e[4]=k*a+M*s+y*i-h*r,e[5]=y*a+M*r+h*s-k*i,e[6]=h*a+M*i+k*r-y*s,e[7]=M*a-k*s-y*r-h*i,e}static rotateByQuatAppend(e,t,n){let s=n[0],r=n[1],i=n[2],a=n[3],c=t[0],d=t[1],l=t[2],L=t[3];return e[0]=c*a+L*s+d*i-l*r,e[1]=d*a+L*r+l*s-c*i,e[2]=l*a+L*i+c*r-d*s,e[3]=L*a-c*s-d*r-l*i,c=t[4],d=t[5],l=t[6],L=t[7],e[4]=c*a+L*s+d*i-l*r,e[5]=d*a+L*r+l*s-c*i,e[6]=l*a+L*i+c*r-d*s,e[7]=L*a-c*s-d*r-l*i,e}static rotateByQuatPrepend(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=n[0],d=n[1],l=n[2],L=n[3];return e[0]=s*L+a*c+r*l-i*d,e[1]=r*L+a*d+i*c-s*l,e[2]=i*L+a*l+s*d-r*c,e[3]=a*L-s*c-r*d-i*l,c=n[4],d=n[5],l=n[6],L=n[7],e[4]=s*L+a*c+r*l-i*d,e[5]=r*L+a*d+i*c-s*l,e[6]=i*L+a*l+s*d-r*c,e[7]=a*L-s*c-r*d-i*l,e}static rotateAroundAxis(e,t,n,s){if(Math.abs(s)<1e-6)return Z.copy(e,t);let r=Math.sqrt(n[0]*n[0]+n[1]*n[1]+n[2]*n[2]);s*=.5;let i=Math.sin(s),a=i*n[0]/r,c=i*n[1]/r,d=i*n[2]/r,l=Math.cos(s),L=t[0],k=t[1],y=t[2],h=t[3];e[0]=L*l+h*a+k*d-y*c,e[1]=k*l+h*c+y*a-L*d,e[2]=y*l+h*d+L*c-k*a,e[3]=h*l-L*a-k*c-y*d;let M=t[4],T=t[5],m=t[6],R=t[7];return e[4]=M*l+R*a+T*d-m*c,e[5]=T*l+R*c+m*a-M*d,e[6]=m*l+R*d+M*c-T*a,e[7]=R*l-M*a-T*c-m*d,e}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e[4]=t[4]+n[4],e[5]=t[5]+n[5],e[6]=t[6]+n[6],e[7]=t[7]+n[7],e}static multiply(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=n[4],d=n[5],l=n[6],L=n[7],k=t[4],y=t[5],h=t[6],M=t[7],T=n[0],m=n[1],R=n[2],x=n[3];return e[0]=s*x+a*T+r*R-i*m,e[1]=r*x+a*m+i*T-s*R,e[2]=i*x+a*R+s*m-r*T,e[3]=a*x-s*T-r*m-i*R,e[4]=s*L+a*c+r*l-i*d+k*x+M*T+y*R-h*m,e[5]=r*L+a*d+i*c-s*l+y*x+M*m+h*T-k*R,e[6]=i*L+a*l+s*d-r*c+h*x+M*R+k*m-y*T,e[7]=a*L-s*c-r*d-i*l+M*x-k*T-y*m-h*R,e}static mul(e,t,n){return e}static scale(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*n,e[5]=t[5]*n,e[6]=t[6]*n,e[7]=t[7]*n,e}static dot(e,t){return 0}static lerp(e,t,n,s){let r=1-s;return Z.dot(t,n)<0&&(s=-s),e[0]=t[0]*r+n[0]*s,e[1]=t[1]*r+n[1]*s,e[2]=t[2]*r+n[2]*s,e[3]=t[3]*r+n[3]*s,e[4]=t[4]*r+n[4]*s,e[5]=t[5]*r+n[5]*s,e[6]=t[6]*r+n[6]*s,e[7]=t[7]*r+n[7]*s,e}static invert(e,t){let n=Z.squaredLength(t);return e[0]=-t[0]/n,e[1]=-t[1]/n,e[2]=-t[2]/n,e[3]=t[3]/n,e[4]=-t[4]/n,e[5]=-t[5]/n,e[6]=-t[6]/n,e[7]=t[7]/n,e}static conjugate(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=t[3],e[4]=-t[4],e[5]=-t[5],e[6]=-t[6],e[7]=t[7],e}static magnitude(e){return 0}static mag(e){return 0}static length(e){return 0}static len(e){return 0}static squaredLength(e){return 0}static sqrLen(e){return 0}static normalize(e,t){let n=Z.squaredLength(t);if(n>0){n=Math.sqrt(n);let s=t[0]/n,r=t[1]/n,i=t[2]/n,a=t[3]/n,c=t[4],d=t[5],l=t[6],L=t[7],k=s*c+r*d+i*l+a*L;e[0]=s,e[1]=r,e[2]=i,e[3]=a,e[4]=(c-s*k)/n,e[5]=(d-r*k)/n,e[6]=(l-i*k)/n,e[7]=(L-a*k)/n}return e}static str(e){return`Quat2(${e.join(\", \")})`}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]}static equals(e,t){let n=e[0],s=e[1],r=e[2],i=e[3],a=e[4],c=e[5],d=e[6],l=e[7],L=t[0],k=t[1],y=t[2],h=t[3],M=t[4],T=t[5],m=t[6],R=t[7];return Math.abs(n-L)<=1e-6*Math.max(1,Math.abs(n),Math.abs(L))&&Math.abs(s-k)<=1e-6*Math.max(1,Math.abs(s),Math.abs(k))&&Math.abs(r-y)<=1e-6*Math.max(1,Math.abs(r),Math.abs(y))&&Math.abs(i-h)<=1e-6*Math.max(1,Math.abs(i),Math.abs(h))&&Math.abs(a-M)<=1e-6*Math.max(1,Math.abs(a),Math.abs(M))&&Math.abs(c-T)<=1e-6*Math.max(1,Math.abs(c),Math.abs(T))&&Math.abs(d-m)<=1e-6*Math.max(1,Math.abs(d),Math.abs(m))&&Math.abs(l-R)<=1e-6*Math.max(1,Math.abs(l),Math.abs(R))}};de=new WeakMap,le=new WeakMap,G(Z,de,new Float64Array(4)),G(Z,le,new Float64Array(3));var K=Z;K.dot=F.dot;K.squaredLength=F.squaredLength;K.sqrLen=F.squaredLength;K.mag=F.magnitude;K.length=F.magnitude;K.len=F.magnitude;K.mul=K.multiply;var B=class w extends Float64Array{constructor(...e){switch(e.length){case 2:{let t=e[0];typeof t==\"number\"?super([t,e[1]]):super(t,e[1],2);break}case 1:{let t=e[0];t===void 0?super(2):typeof t==\"number\"?super([t,t]):super(t,0,2);break}default:super(2);break}}get x(){return this[0]}set x(e){this[0]=e}get y(){return this[1]}set y(e){this[1]=e}get r(){return this[0]}set r(e){this[0]=e}get g(){return this[1]}set g(e){this[1]=e}get magnitude(){return Math.hypot(this[0],this[1])}get mag(){return this.magnitude}get squaredMagnitude(){let e=this[0],t=this[1];return e*e+t*t}get sqrMag(){return this.squaredMagnitude}get str(){return w.str(this)}copy(e){return this.set(e),this}add(e){return this[0]+=e[0],this[1]+=e[1],this}subtract(e){return this[0]-=e[0],this[1]-=e[1],this}sub(e){return this}multiply(e){return this[0]*=e[0],this[1]*=e[1],this}mul(e){return this}divide(e){return this[0]/=e[0],this[1]/=e[1],this}div(e){return this}scale(e){return this[0]*=e,this[1]*=e,this}scaleAndAdd(e,t){return this[0]+=e[0]*t,this[1]+=e[1]*t,this}distance(e){return w.distance(this,e)}dist(e){return 0}squaredDistance(e){return w.squaredDistance(this,e)}sqrDist(e){return 0}negate(){return this[0]*=-1,this[1]*=-1,this}invert(){return this[0]=1/this[0],this[1]=1/this[1],this}abs(){return this[0]=Math.abs(this[0]),this[1]=Math.abs(this[1]),this}dot(e){return this[0]*e[0]+this[1]*e[1]}normalize(){return w.normalize(this,this)}static get BYTE_LENGTH(){return 2*Float64Array.BYTES_PER_ELEMENT}static create(){return new w}static clone(e){return new w(e)}static fromValues(e,t){return new w(e,t)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e}static set(e,t,n){return e[0]=t,e[1]=n,e}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e}static subtract(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e}static sub(e,t,n){return e}static multiply(e,t,n){return e[0]=t[0]*n[0],e[1]=t[1]*n[1],e}static mul(e,t,n){return e}static divide(e,t,n){return e[0]=t[0]/n[0],e[1]=t[1]/n[1],e}static div(e,t,n){return e}static ceil(e,t){return e[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e}static floor(e,t){return e[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e}static min(e,t,n){return e[0]=Math.min(t[0],n[0]),e[1]=Math.min(t[1],n[1]),e}static max(e,t,n){return e[0]=Math.max(t[0],n[0]),e[1]=Math.max(t[1],n[1]),e}static round(e,t){return e[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e}static scale(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e}static scaleAndAdd(e,t,n,s){return e[0]=t[0]+n[0]*s,e[1]=t[1]+n[1]*s,e}static distance(e,t){return Math.hypot(t[0]-e[0],t[1]-e[1])}static dist(e,t){return 0}static squaredDistance(e,t){let n=t[0]-e[0],s=t[1]-e[1];return n*n+s*s}static sqrDist(e,t){return 0}static magnitude(e){let t=e[0],n=e[1];return Math.sqrt(t*t+n*n)}static mag(e){return 0}static length(e){return 0}static len(e){return 0}static squaredLength(e){let t=e[0],n=e[1];return t*t+n*n}static sqrLen(e,t){return 0}static negate(e,t){return e[0]=-t[0],e[1]=-t[1],e}static inverse(e,t){return e[0]=1/t[0],e[1]=1/t[1],e}static abs(e,t){return e[0]=Math.abs(t[0]),e[1]=Math.abs(t[1]),e}static normalize(e,t){let n=t[0],s=t[1],r=n*n+s*s;return r>0&&(r=1/Math.sqrt(r)),e[0]=t[0]*r,e[1]=t[1]*r,e}static dot(e,t){return e[0]*t[0]+e[1]*t[1]}static cross(e,t,n){let s=t[0]*n[1]-t[1]*n[0];return e[0]=e[1]=0,e[2]=s,e}static lerp(e,t,n,s){let r=t[0],i=t[1];return e[0]=r+s*(n[0]-r),e[1]=i+s*(n[1]-i),e}static transformMat2(e,t,n){let s=t[0],r=t[1];return e[0]=n[0]*s+n[2]*r,e[1]=n[1]*s+n[3]*r,e}static transformMat2d(e,t,n){let s=t[0],r=t[1];return e[0]=n[0]*s+n[2]*r+n[4],e[1]=n[1]*s+n[3]*r+n[5],e}static transformMat3(e,t,n){let s=t[0],r=t[1];return e[0]=n[0]*s+n[3]*r+n[6],e[1]=n[1]*s+n[4]*r+n[7],e}static transformMat4(e,t,n){let s=t[0],r=t[1];return e[0]=n[0]*s+n[4]*r+n[12],e[1]=n[1]*s+n[5]*r+n[13],e}static rotate(e,t,n,s){let r=t[0]-n[0],i=t[1]-n[1],a=Math.sin(s),c=Math.cos(s);return e[0]=r*c-i*a+n[0],e[1]=r*a+i*c+n[1],e}static angle(e,t){let n=e[0],s=e[1],r=t[0],i=t[1],a=Math.sqrt(n*n+s*s)*Math.sqrt(r*r+i*i),c=a&&(n*r+s*i)/a;return Math.acos(Math.min(Math.max(c,-1),1))}static zero(e){return e[0]=0,e[1]=0,e}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]}static equals(e,t){let n=e[0],s=e[1],r=t[0],i=t[1];return Math.abs(n-r)<=1e-6*Math.max(1,Math.abs(n),Math.abs(r))&&Math.abs(s-i)<=1e-6*Math.max(1,Math.abs(s),Math.abs(i))}static str(e){return`Vec2(${e.join(\", \")})`}};B.prototype.sub=B.prototype.subtract;B.prototype.mul=B.prototype.multiply;B.prototype.div=B.prototype.divide;B.prototype.dist=B.prototype.distance;B.prototype.sqrDist=B.prototype.squaredDistance;B.sub=B.subtract;B.mul=B.multiply;B.div=B.divide;B.dist=B.distance;B.sqrDist=B.squaredDistance;B.sqrLen=B.squaredLength;B.mag=B.magnitude;B.length=B.magnitude;B.len=B.magnitude;var be=Math.PI/180,xe=180/Math.PI;function ve(w){return w*xe}function ue(w){return w*be}export{u as Mat2,_ as Mat2d,J as Mat3,j as Mat4,F as Quat,K as Quat2,B as Vec2,E as Vec3,q as Vec4,ve as toDegree,ue as toRadian};\n//# sourceMappingURL=gl-matrix-f64.min.js.map\n"],"names":["ee","$","_Float64Array","_this","_classCallCheck","_len","arguments","length","e","Array","_key","_callSuper","t","f","_assertThisInitialized","_inherits","_createClass","key","get","str","value","copy","set","identity","multiply","mul","transpose","invert","scale","rotate","Float64Array","BYTES_PER_ELEMENT","create","clone","fromValues","_len2","_key2","_construct","undefined","n","s","r","i","a","adjoint","determinant","add","subtract","sub","c","d","l","L","Math","sin","cos","fromRotation","fromScaling","frob","sqrt","multiplyScalar","multiplyScalarAndAdd","LDU","exactEquals","equals","abs","max","concat","join","_wrapNativeSuper","WeakMap","G","u","prototype"],"mappings":"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}