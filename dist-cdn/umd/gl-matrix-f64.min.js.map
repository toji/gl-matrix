{"version":3,"file":"gl-matrix-f64.min.js","sources":["../esm/2016/gl-matrix-f64.min.js"],"sourcesContent":["// gl-matrix - v4.0.0-beta.3 - A high performance matrix and vector library.\n// @author Brandon Jones\n// @author Colin MacKenzie IV\n// @license MIT (https://github.com/toji/gl-matrix/blob/master/LICENSE.md)\nvar Me=E=>{throw TypeError(E)};var oe=(E,e,t)=>e.has(E)||Me(\"Cannot \"+t);var w=(E,e,t)=>(oe(E,e,\"read from private field\"),t?t.call(E):e.get(E)),Z=(E,e,t)=>e.has(E)?Me(\"Cannot add the same private member more than once\"):e instanceof WeakSet?e.add(E):e.set(E,t);var ee,C=class C extends Float64Array{constructor(...e){switch(e.length){case 4:super(e);break;case 2:super(e[0],e[1],4);break;case 1:let t=e[0];t===void 0?super(w(C,ee)):typeof t==\"number\"?super([t,t,t,t]):super(t,0,4);break;default:super(w(C,ee));break}}get str(){return C.str(this)}copy(e){return this.set(e),this}identity(){return this.set(w(C,ee)),this}multiply(e){return C.multiply(this,this,e)}mul(e){return this}transpose(){return C.transpose(this,this)}invert(){return C.invert(this,this)}scale(e){return C.scale(this,this,e)}rotate(e){return C.rotate(this,this,e)}static get BYTE_LENGTH(){return 4*Float64Array.BYTES_PER_ELEMENT}static create(){return new C}static clone(e){return new C(e)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}static fromValues(...e){return new C(...e)}static set(e,...t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}static identity(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e}static transpose(e,t){if(e===t){let n=t[1];e[1]=t[2],e[2]=n}else e[0]=t[0],e[1]=t[2],e[2]=t[1],e[3]=t[3];return e}static invert(e,t){let n=t[0],s=t[1],r=t[2],a=t[3],i=n*a-r*s;return i?(i=1/i,e[0]=a*i,e[1]=-s*i,e[2]=-r*i,e[3]=n*i,e):null}static adjoint(e,t){let n=t[0];return e[0]=t[3],e[1]=-t[1],e[2]=-t[2],e[3]=n,e}static determinant(e){return e[0]*e[3]-e[2]*e[1]}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e}static subtract(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e}static sub(e,t,n){return e}static multiply(e,t,n){let s=t[0],r=t[1],a=t[2],i=t[3],c=n[0],y=n[1],d=n[2],l=n[3];return e[0]=s*c+a*y,e[1]=r*c+i*y,e[2]=s*d+a*l,e[3]=r*d+i*l,e}static mul(e,t,n){return e}static rotate(e,t,n){let s=t[0],r=t[1],a=t[2],i=t[3],c=Math.sin(n),y=Math.cos(n);return e[0]=s*y+a*c,e[1]=r*y+i*c,e[2]=s*-c+a*y,e[3]=r*-c+i*y,e}static scale(e,t,n){let s=t[0],r=t[1],a=t[2],i=t[3],c=n[0],y=n[1];return e[0]=s*c,e[1]=r*c,e[2]=a*y,e[3]=i*y,e}static fromRotation(e,t){let n=Math.sin(t),s=Math.cos(t);return e[0]=s,e[1]=n,e[2]=-n,e[3]=s,e}static fromScaling(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=t[1],e}static frob(e){return Math.sqrt(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]+e[3]*e[3])}static multiplyScalar(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e}static multiplyScalarAndAdd(e,t,n,s){return e[0]=t[0]+n[0]*s,e[1]=t[1]+n[1]*s,e[2]=t[2]+n[2]*s,e[3]=t[3]+n[3]*s,e}static LDU(e,t,n,s){return e[2]=s[2]/s[0],n[0]=s[0],n[1]=s[1],n[3]=s[3]-e[2]*n[1],[e,t,n]}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]}static equals(e,t){let n=e[0],s=e[1],r=e[2],a=e[3],i=t[0],c=t[1],y=t[2],d=t[3];return Math.abs(n-i)<=1e-6*Math.max(1,Math.abs(n),Math.abs(i))&&Math.abs(s-c)<=1e-6*Math.max(1,Math.abs(s),Math.abs(c))&&Math.abs(r-y)<=1e-6*Math.max(1,Math.abs(r),Math.abs(y))&&Math.abs(a-d)<=1e-6*Math.max(1,Math.abs(a),Math.abs(d))}static str(e){return`Mat2(${e.join(\", \")})`}};ee=new WeakMap,Z(C,ee,new Float64Array([1,0,0,1]));var u=C;u.prototype.mul=u.prototype.multiply;u.mul=u.multiply;u.sub=u.subtract;var te,$=class $ extends Float64Array{constructor(...e){switch(e.length){case 6:super(e);break;case 2:super(e[0],e[1],6);break;case 1:let t=e[0];t===void 0?super(w($,te)):typeof t==\"number\"?super([t,t,t,t,t,t]):super(t,0,6);break;default:super(w($,te));break}}get str(){return $.str(this)}copy(e){return this.set(e),this}identity(){return this.set(w($,te)),this}multiply(e){return $.multiply(this,this,e)}mul(e){return this}translate(e){return $.translate(this,this,e)}rotate(e){return $.rotate(this,this,e)}scale(e){return $.scale(this,this,e)}static get BYTE_LENGTH(){return 6*Float64Array.BYTES_PER_ELEMENT}static create(){return new $}static clone(e){return new $(e)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e}static fromValues(...e){return new $(...e)}static set(e,...t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e}static identity(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e[4]=0,e[5]=0,e}static invert(e,t){let n=t[0],s=t[1],r=t[2],a=t[3],i=t[4],c=t[5],y=n*a-s*r;return y?(y=1/y,e[0]=a*y,e[1]=-s*y,e[2]=-r*y,e[3]=n*y,e[4]=(r*c-a*i)*y,e[5]=(s*i-n*c)*y,e):null}static determinant(e){return e[0]*e[3]-e[1]*e[2]}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e[4]=t[4]+n[4],e[5]=t[5]+n[5],e}static subtract(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e[4]=t[4]-n[4],e[5]=t[5]-n[5],e}static sub(e,t,n){return e}static multiply(e,t,n){let s=t[0],r=t[1],a=t[2],i=t[3],c=t[4],y=t[5],d=n[0],l=n[1],L=n[2],k=n[3],h=n[4],b=n[5];return e[0]=s*d+a*l,e[1]=r*d+i*l,e[2]=s*L+a*k,e[3]=r*L+i*k,e[4]=s*h+a*b+c,e[5]=r*h+i*b+y,e}static mul(e,t,n){return e}static translate(e,t,n){let s=t[0],r=t[1],a=t[2],i=t[3],c=t[4],y=t[5],d=n[0],l=n[1];return e[0]=s,e[1]=r,e[2]=a,e[3]=i,e[4]=s*d+a*l+c,e[5]=r*d+i*l+y,e}static rotate(e,t,n){let s=t[0],r=t[1],a=t[2],i=t[3],c=t[4],y=t[5],d=Math.sin(n),l=Math.cos(n);return e[0]=s*l+a*d,e[1]=r*l+i*d,e[2]=s*-d+a*l,e[3]=r*-d+i*l,e[4]=c,e[5]=y,e}static scale(e,t,n){let s=t[0],r=t[1],a=t[2],i=t[3],c=t[4],y=t[5],d=n[0],l=n[1];return e[0]=s*d,e[1]=r*d,e[2]=a*l,e[3]=i*l,e[4]=c,e[5]=y,e}static fromTranslation(e,t){return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e[4]=t[0],e[5]=t[1],e}static fromRotation(e,t){let n=Math.sin(t),s=Math.cos(t);return e[0]=s,e[1]=n,e[2]=-n,e[3]=s,e[4]=0,e[5]=0,e}static fromScaling(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=t[1],e[4]=0,e[5]=0,e}static frob(e){return Math.sqrt(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]+e[3]*e[3]+e[4]*e[4]+e[5]*e[5]+1)}static multiplyScalar(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*n,e[5]=t[5]*n,e}static multiplyScalarAndAdd(e,t,n,s){return e[0]=t[0]+n[0]*s,e[1]=t[1]+n[1]*s,e[2]=t[2]+n[2]*s,e[3]=t[3]+n[3]*s,e[4]=t[4]+n[4]*s,e[5]=t[5]+n[5]*s,e}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]}static equals(e,t){let n=e[0],s=e[1],r=e[2],a=e[3],i=e[4],c=e[5],y=t[0],d=t[1],l=t[2],L=t[3],k=t[4],h=t[5];return Math.abs(n-y)<=1e-6*Math.max(1,Math.abs(n),Math.abs(y))&&Math.abs(s-d)<=1e-6*Math.max(1,Math.abs(s),Math.abs(d))&&Math.abs(r-l)<=1e-6*Math.max(1,Math.abs(r),Math.abs(l))&&Math.abs(a-L)<=1e-6*Math.max(1,Math.abs(a),Math.abs(L))&&Math.abs(i-k)<=1e-6*Math.max(1,Math.abs(i),Math.abs(k))&&Math.abs(c-h)<=1e-6*Math.max(1,Math.abs(c),Math.abs(h))}static str(e){return`Mat2d(${e.join(\", \")})`}};te=new WeakMap,Z($,te,new Float64Array([1,0,0,1,0,0]));var _=$;_.mul=_.multiply;_.sub=_.subtract;var ne,X=class X extends Float64Array{constructor(...e){switch(e.length){case 9:super(e);break;case 2:super(e[0],e[1],9);break;case 1:let t=e[0];t===void 0?super(w(X,ne)):typeof t==\"number\"?super([t,t,t,t,t,t,t,t,t]):super(t,0,9);break;default:super(w(X,ne));break}}get str(){return X.str(this)}copy(e){return this.set(e),this}identity(){return this.set(w(X,ne)),this}multiply(e){return X.multiply(this,this,e)}mul(e){return this}transpose(){return X.transpose(this,this)}invert(){return X.invert(this,this)}translate(e){return X.translate(this,this,e)}rotate(e){return X.rotate(this,this,e)}scale(e){return X.scale(this,this,e)}static get BYTE_LENGTH(){return 9*Float64Array.BYTES_PER_ELEMENT}static create(){return new X}static clone(e){return new X(e)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}static fromValues(...e){return new X(...e)}static set(e,...t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}static identity(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}static transpose(e,t){if(e===t){let n=t[1],s=t[2],r=t[5];e[1]=t[3],e[2]=t[6],e[3]=n,e[5]=t[7],e[6]=s,e[7]=r}else e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8];return e}static invert(e,t){let n=t[0],s=t[1],r=t[2],a=t[3],i=t[4],c=t[5],y=t[6],d=t[7],l=t[8],L=l*i-c*d,k=-l*a+c*y,h=d*a-i*y,b=n*L+s*k+r*h;return b?(b=1/b,e[0]=L*b,e[1]=(-l*s+r*d)*b,e[2]=(c*s-r*i)*b,e[3]=k*b,e[4]=(l*n-r*y)*b,e[5]=(-c*n+r*a)*b,e[6]=h*b,e[7]=(-d*n+s*y)*b,e[8]=(i*n-s*a)*b,e):null}static adjoint(e,t){let n=t[0],s=t[1],r=t[2],a=t[3],i=t[4],c=t[5],y=t[6],d=t[7],l=t[8];return e[0]=i*l-c*d,e[1]=r*d-s*l,e[2]=s*c-r*i,e[3]=c*y-a*l,e[4]=n*l-r*y,e[5]=r*a-n*c,e[6]=a*d-i*y,e[7]=s*y-n*d,e[8]=n*i-s*a,e}static determinant(e){let t=e[0],n=e[1],s=e[2],r=e[3],a=e[4],i=e[5],c=e[6],y=e[7],d=e[8];return t*(d*a-i*y)+n*(-d*r+i*c)+s*(y*r-a*c)}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e[4]=t[4]+n[4],e[5]=t[5]+n[5],e[6]=t[6]+n[6],e[7]=t[7]+n[7],e[8]=t[8]+n[8],e}static subtract(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e[4]=t[4]-n[4],e[5]=t[5]-n[5],e[6]=t[6]-n[6],e[7]=t[7]-n[7],e[8]=t[8]-n[8],e}static sub(e,t,n){return e}static multiply(e,t,n){let s=t[0],r=t[1],a=t[2],i=t[3],c=t[4],y=t[5],d=t[6],l=t[7],L=t[8],k=n[0],h=n[1],b=n[2];return e[0]=k*s+h*i+b*d,e[1]=k*r+h*c+b*l,e[2]=k*a+h*y+b*L,k=n[3],h=n[4],b=n[5],e[3]=k*s+h*i+b*d,e[4]=k*r+h*c+b*l,e[5]=k*a+h*y+b*L,k=n[6],h=n[7],b=n[8],e[6]=k*s+h*i+b*d,e[7]=k*r+h*c+b*l,e[8]=k*a+h*y+b*L,e}static mul(e,t,n){return e}static translate(e,t,n){let s=t[0],r=t[1],a=t[2],i=t[3],c=t[4],y=t[5],d=t[6],l=t[7],L=t[8],k=n[0],h=n[1];return e[0]=s,e[1]=r,e[2]=a,e[3]=i,e[4]=c,e[5]=y,e[6]=k*s+h*i+d,e[7]=k*r+h*c+l,e[8]=k*a+h*y+L,e}static rotate(e,t,n){let s=t[0],r=t[1],a=t[2],i=t[3],c=t[4],y=t[5],d=t[6],l=t[7],L=t[8],k=Math.sin(n),h=Math.cos(n);return e[0]=h*s+k*i,e[1]=h*r+k*c,e[2]=h*a+k*y,e[3]=h*i-k*s,e[4]=h*c-k*r,e[5]=h*y-k*a,e[6]=d,e[7]=l,e[8]=L,e}static scale(e,t,n){let s=n[0],r=n[1];return e[0]=s*t[0],e[1]=s*t[1],e[2]=s*t[2],e[3]=r*t[3],e[4]=r*t[4],e[5]=r*t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}static fromTranslation(e,t){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=t[0],e[7]=t[1],e[8]=1,e}static fromRotation(e,t){let n=Math.sin(t),s=Math.cos(t);return e[0]=s,e[1]=n,e[2]=0,e[3]=-n,e[4]=s,e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}static fromScaling(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=0,e[4]=t[1],e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}static fromMat2d(e,t){return e[0]=t[0],e[1]=t[1],e[2]=0,e[3]=t[2],e[4]=t[3],e[5]=0,e[6]=t[4],e[7]=t[5],e[8]=1,e}static fromQuat(e,t){let n=t[0],s=t[1],r=t[2],a=t[3],i=n+n,c=s+s,y=r+r,d=n*i,l=s*i,L=s*c,k=r*i,h=r*c,b=r*y,x=a*i,M=a*c,T=a*y;return e[0]=1-L-b,e[3]=l-T,e[6]=k+M,e[1]=l+T,e[4]=1-d-b,e[7]=h-x,e[2]=k-M,e[5]=h+x,e[8]=1-d-L,e}static fromMat4(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[4],e[4]=t[5],e[5]=t[6],e[6]=t[8],e[7]=t[9],e[8]=t[10],e}static normalFromMat4(e,t){let n=t[0],s=t[1],r=t[2],a=t[4],i=t[5],c=t[6],y=t[8],d=t[9],l=t[10];return e[0]=i*l-c*d,e[1]=r*d-s*l,e[2]=s*c-r*i,e[3]=c*y-a*l,e[4]=n*l-r*y,e[5]=r*a-n*c,e[6]=a*d-i*y,e[7]=s*y-n*d,e[8]=n*i-s*a,e}static normalFromMat4Fast(e,t){return e}static projection(e,t,n){return e[0]=2/t,e[1]=0,e[2]=0,e[3]=0,e[4]=-2/n,e[5]=0,e[6]=-1,e[7]=1,e[8]=1,e}static frob(e){return Math.sqrt(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]+e[3]*e[3]+e[4]*e[4]+e[5]*e[5]+e[6]*e[6]+e[7]*e[7]+e[8]*e[8])}static multiplyScalar(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*n,e[5]=t[5]*n,e[6]=t[6]*n,e[7]=t[7]*n,e[8]=t[8]*n,e}static multiplyScalarAndAdd(e,t,n,s){return e[0]=t[0]+n[0]*s,e[1]=t[1]+n[1]*s,e[2]=t[2]+n[2]*s,e[3]=t[3]+n[3]*s,e[4]=t[4]+n[4]*s,e[5]=t[5]+n[5]*s,e[6]=t[6]+n[6]*s,e[7]=t[7]+n[7]*s,e[8]=t[8]+n[8]*s,e}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]&&e[8]===t[8]}static equals(e,t){let n=e[0],s=e[1],r=e[2],a=e[3],i=e[4],c=e[5],y=e[6],d=e[7],l=e[8],L=t[0],k=t[1],h=t[2],b=t[3],x=t[4],M=t[5],T=t[6],R=t[7],m=t[8];return Math.abs(n-L)<=1e-6*Math.max(1,Math.abs(n),Math.abs(L))&&Math.abs(s-k)<=1e-6*Math.max(1,Math.abs(s),Math.abs(k))&&Math.abs(r-h)<=1e-6*Math.max(1,Math.abs(r),Math.abs(h))&&Math.abs(a-b)<=1e-6*Math.max(1,Math.abs(a),Math.abs(b))&&Math.abs(i-x)<=1e-6*Math.max(1,Math.abs(i),Math.abs(x))&&Math.abs(c-M)<=1e-6*Math.max(1,Math.abs(c),Math.abs(M))&&Math.abs(y-T)<=1e-6*Math.max(1,Math.abs(y),Math.abs(T))&&Math.abs(d-R)<=1e-6*Math.max(1,Math.abs(d),Math.abs(R))&&Math.abs(l-m)<=1e-6*Math.max(1,Math.abs(l),Math.abs(m))}static str(e){return`Mat3(${e.join(\", \")})`}};ne=new WeakMap,Z(X,ne,new Float64Array([1,0,0,0,1,0,0,0,1]));var J=X;J.prototype.mul=J.prototype.multiply;J.mul=J.multiply;J.sub=J.subtract;J.normalFromMat4Fast=J.normalFromMat4;var se,H,A=class A extends Float64Array{constructor(...e){switch(e.length){case 16:super(e);break;case 2:super(e[0],e[1],16);break;case 1:let t=e[0];t===void 0?super(w(A,se)):typeof t==\"number\"?super([t,t,t,t,t,t,t,t,t,t,t,t,t,t,t,t]):super(t,0,16);break;default:super(w(A,se));break}}get str(){return A.str(this)}copy(e){return this.set(e),this}identity(){return this.set(w(A,se)),this}multiply(e){return A.multiply(this,this,e)}mul(e){return this}transpose(){return A.transpose(this,this)}invert(){return A.invert(this,this)}translate(e){return A.translate(this,this,e)}rotate(e,t){return A.rotate(this,this,e,t)}scale(e){return A.scale(this,this,e)}rotateX(e){return A.rotateX(this,this,e)}rotateY(e){return A.rotateY(this,this,e)}rotateZ(e){return A.rotateZ(this,this,e)}perspectiveNO(e,t,n,s){return A.perspectiveNO(this,e,t,n,s)}perspectiveZO(e,t,n,s){return A.perspectiveZO(this,e,t,n,s)}orthoNO(e,t,n,s,r,a){return A.orthoNO(this,e,t,n,s,r,a)}orthoZO(e,t,n,s,r,a){return A.orthoZO(this,e,t,n,s,r,a)}static get BYTE_LENGTH(){return 16*Float64Array.BYTES_PER_ELEMENT}static create(){return new A}static clone(e){return new A(e)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}static fromValues(...e){return new A(...e)}static set(e,...t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}static identity(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static transpose(e,t){if(e===t){let n=t[1],s=t[2],r=t[3],a=t[6],i=t[7],c=t[11];e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=n,e[6]=t[9],e[7]=t[13],e[8]=s,e[9]=a,e[11]=t[14],e[12]=r,e[13]=i,e[14]=c}else e[0]=t[0],e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=t[1],e[5]=t[5],e[6]=t[9],e[7]=t[13],e[8]=t[2],e[9]=t[6],e[10]=t[10],e[11]=t[14],e[12]=t[3],e[13]=t[7],e[14]=t[11],e[15]=t[15];return e}static invert(e,t){let n=t[0],s=t[1],r=t[2],a=t[3],i=t[4],c=t[5],y=t[6],d=t[7],l=t[8],L=t[9],k=t[10],h=t[11],b=t[12],x=t[13],M=t[14],T=t[15],R=n*c-s*i,m=n*y-r*i,o=n*d-a*i,g=s*y-r*c,z=s*d-a*c,S=r*d-a*y,D=l*x-L*b,N=l*M-k*b,f=l*T-h*b,P=L*M-k*x,O=L*T-h*x,Y=k*T-h*M,I=R*Y-m*O+o*P+g*f-z*N+S*D;return I?(I=1/I,e[0]=(c*Y-y*O+d*P)*I,e[1]=(r*O-s*Y-a*P)*I,e[2]=(x*S-M*z+T*g)*I,e[3]=(k*z-L*S-h*g)*I,e[4]=(y*f-i*Y-d*N)*I,e[5]=(n*Y-r*f+a*N)*I,e[6]=(M*o-b*S-T*m)*I,e[7]=(l*S-k*o+h*m)*I,e[8]=(i*O-c*f+d*D)*I,e[9]=(s*f-n*O-a*D)*I,e[10]=(b*z-x*o+T*R)*I,e[11]=(L*o-l*z-h*R)*I,e[12]=(c*N-i*P-y*D)*I,e[13]=(n*P-s*N+r*D)*I,e[14]=(x*m-b*g-M*R)*I,e[15]=(l*g-L*m+k*R)*I,e):null}static adjoint(e,t){let n=t[0],s=t[1],r=t[2],a=t[3],i=t[4],c=t[5],y=t[6],d=t[7],l=t[8],L=t[9],k=t[10],h=t[11],b=t[12],x=t[13],M=t[14],T=t[15],R=n*c-s*i,m=n*y-r*i,o=n*d-a*i,g=s*y-r*c,z=s*d-a*c,S=r*d-a*y,D=l*x-L*b,N=l*M-k*b,f=l*T-h*b,P=L*M-k*x,O=L*T-h*x,Y=k*T-h*M;return e[0]=c*Y-y*O+d*P,e[1]=r*O-s*Y-a*P,e[2]=x*S-M*z+T*g,e[3]=k*z-L*S-h*g,e[4]=y*f-i*Y-d*N,e[5]=n*Y-r*f+a*N,e[6]=M*o-b*S-T*m,e[7]=l*S-k*o+h*m,e[8]=i*O-c*f+d*D,e[9]=s*f-n*O-a*D,e[10]=b*z-x*o+T*R,e[11]=L*o-l*z-h*R,e[12]=c*N-i*P-y*D,e[13]=n*P-s*N+r*D,e[14]=x*m-b*g-M*R,e[15]=l*g-L*m+k*R,e}static determinant(e){let t=e[0],n=e[1],s=e[2],r=e[3],a=e[4],i=e[5],c=e[6],y=e[7],d=e[8],l=e[9],L=e[10],k=e[11],h=e[12],b=e[13],x=e[14],M=e[15],T=t*i-n*a,R=t*c-s*a,m=n*c-s*i,o=d*b-l*h,g=d*x-L*h,z=l*x-L*b,S=t*z-n*g+s*o,D=a*z-i*g+c*o,N=d*m-l*R+L*T,f=h*m-b*R+x*T;return y*S-r*D+M*N-k*f}static multiply(e,t,n){let s=t[0],r=t[1],a=t[2],i=t[3],c=t[4],y=t[5],d=t[6],l=t[7],L=t[8],k=t[9],h=t[10],b=t[11],x=t[12],M=t[13],T=t[14],R=t[15],m=n[0],o=n[1],g=n[2],z=n[3];return e[0]=m*s+o*c+g*L+z*x,e[1]=m*r+o*y+g*k+z*M,e[2]=m*a+o*d+g*h+z*T,e[3]=m*i+o*l+g*b+z*R,m=n[4],o=n[5],g=n[6],z=n[7],e[4]=m*s+o*c+g*L+z*x,e[5]=m*r+o*y+g*k+z*M,e[6]=m*a+o*d+g*h+z*T,e[7]=m*i+o*l+g*b+z*R,m=n[8],o=n[9],g=n[10],z=n[11],e[8]=m*s+o*c+g*L+z*x,e[9]=m*r+o*y+g*k+z*M,e[10]=m*a+o*d+g*h+z*T,e[11]=m*i+o*l+g*b+z*R,m=n[12],o=n[13],g=n[14],z=n[15],e[12]=m*s+o*c+g*L+z*x,e[13]=m*r+o*y+g*k+z*M,e[14]=m*a+o*d+g*h+z*T,e[15]=m*i+o*l+g*b+z*R,e}static mul(e,t,n){return e}static translate(e,t,n){let s=n[0],r=n[1],a=n[2];if(t===e)e[12]=t[0]*s+t[4]*r+t[8]*a+t[12],e[13]=t[1]*s+t[5]*r+t[9]*a+t[13],e[14]=t[2]*s+t[6]*r+t[10]*a+t[14],e[15]=t[3]*s+t[7]*r+t[11]*a+t[15];else{let i=t[0],c=t[1],y=t[2],d=t[3],l=t[4],L=t[5],k=t[6],h=t[7],b=t[8],x=t[9],M=t[10],T=t[11];e[0]=i,e[1]=c,e[2]=y,e[3]=d,e[4]=l,e[5]=L,e[6]=k,e[7]=h,e[8]=b,e[9]=x,e[10]=M,e[11]=T,e[12]=i*s+l*r+b*a+t[12],e[13]=c*s+L*r+x*a+t[13],e[14]=y*s+k*r+M*a+t[14],e[15]=d*s+h*r+T*a+t[15]}return e}static scale(e,t,n){let s=n[0],r=n[1],a=n[2];return e[0]=t[0]*s,e[1]=t[1]*s,e[2]=t[2]*s,e[3]=t[3]*s,e[4]=t[4]*r,e[5]=t[5]*r,e[6]=t[6]*r,e[7]=t[7]*r,e[8]=t[8]*a,e[9]=t[9]*a,e[10]=t[10]*a,e[11]=t[11]*a,e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}static rotate(e,t,n,s){let r=s[0],a=s[1],i=s[2],c=Math.sqrt(r*r+a*a+i*i);if(c<1e-6)return null;c=1/c,r*=c,a*=c,i*=c;let y=Math.sin(n),d=Math.cos(n),l=1-d,L=t[0],k=t[1],h=t[2],b=t[3],x=t[4],M=t[5],T=t[6],R=t[7],m=t[8],o=t[9],g=t[10],z=t[11],S=r*r*l+d,D=a*r*l+i*y,N=i*r*l-a*y,f=r*a*l-i*y,P=a*a*l+d,O=i*a*l+r*y,Y=r*i*l+a*y,I=a*i*l-r*y,v=i*i*l+d;return e[0]=L*S+x*D+m*N,e[1]=k*S+M*D+o*N,e[2]=h*S+T*D+g*N,e[3]=b*S+R*D+z*N,e[4]=L*f+x*P+m*O,e[5]=k*f+M*P+o*O,e[6]=h*f+T*P+g*O,e[7]=b*f+R*P+z*O,e[8]=L*Y+x*I+m*v,e[9]=k*Y+M*I+o*v,e[10]=h*Y+T*I+g*v,e[11]=b*Y+R*I+z*v,t!==e&&(e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e}static rotateX(e,t,n){let s=Math.sin(n),r=Math.cos(n),a=t[4],i=t[5],c=t[6],y=t[7],d=t[8],l=t[9],L=t[10],k=t[11];return t!==e&&(e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[4]=a*r+d*s,e[5]=i*r+l*s,e[6]=c*r+L*s,e[7]=y*r+k*s,e[8]=d*r-a*s,e[9]=l*r-i*s,e[10]=L*r-c*s,e[11]=k*r-y*s,e}static rotateY(e,t,n){let s=Math.sin(n),r=Math.cos(n),a=t[0],i=t[1],c=t[2],y=t[3],d=t[8],l=t[9],L=t[10],k=t[11];return t!==e&&(e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[0]=a*r-d*s,e[1]=i*r-l*s,e[2]=c*r-L*s,e[3]=y*r-k*s,e[8]=a*s+d*r,e[9]=i*s+l*r,e[10]=c*s+L*r,e[11]=y*s+k*r,e}static rotateZ(e,t,n){let s=Math.sin(n),r=Math.cos(n),a=t[0],i=t[1],c=t[2],y=t[3],d=t[4],l=t[5],L=t[6],k=t[7];return t!==e&&(e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[0]=a*r+d*s,e[1]=i*r+l*s,e[2]=c*r+L*s,e[3]=y*r+k*s,e[4]=d*r-a*s,e[5]=l*r-i*s,e[6]=L*r-c*s,e[7]=k*r-y*s,e}static fromTranslation(e,t){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=t[0],e[13]=t[1],e[14]=t[2],e[15]=1,e}static fromScaling(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=t[1],e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=t[2],e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static fromRotation(e,t,n){let s=n[0],r=n[1],a=n[2],i=Math.sqrt(s*s+r*r+a*a);if(i<1e-6)return null;i=1/i,s*=i,r*=i,a*=i;let c=Math.sin(t),y=Math.cos(t),d=1-y;return e[0]=s*s*d+y,e[1]=r*s*d+a*c,e[2]=a*s*d-r*c,e[3]=0,e[4]=s*r*d-a*c,e[5]=r*r*d+y,e[6]=a*r*d+s*c,e[7]=0,e[8]=s*a*d+r*c,e[9]=r*a*d-s*c,e[10]=a*a*d+y,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static fromXRotation(e,t){let n=Math.sin(t),s=Math.cos(t);return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=s,e[6]=n,e[7]=0,e[8]=0,e[9]=-n,e[10]=s,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static fromYRotation(e,t){let n=Math.sin(t),s=Math.cos(t);return e[0]=s,e[1]=0,e[2]=-n,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=n,e[9]=0,e[10]=s,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static fromZRotation(e,t){let n=Math.sin(t),s=Math.cos(t);return e[0]=s,e[1]=n,e[2]=0,e[3]=0,e[4]=-n,e[5]=s,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static fromRotationTranslation(e,t,n){let s=t[0],r=t[1],a=t[2],i=t[3],c=s+s,y=r+r,d=a+a,l=s*c,L=s*y,k=s*d,h=r*y,b=r*d,x=a*d,M=i*c,T=i*y,R=i*d;return e[0]=1-(h+x),e[1]=L+R,e[2]=k-T,e[3]=0,e[4]=L-R,e[5]=1-(l+x),e[6]=b+M,e[7]=0,e[8]=k+T,e[9]=b-M,e[10]=1-(l+h),e[11]=0,e[12]=n[0],e[13]=n[1],e[14]=n[2],e[15]=1,e}static fromQuat2(e,t){let n=-t[0],s=-t[1],r=-t[2],a=t[3],i=t[4],c=t[5],y=t[6],d=t[7],l=n*n+s*s+r*r+a*a;return l>0?(w(A,H)[0]=(i*a+d*n+c*r-y*s)*2/l,w(A,H)[1]=(c*a+d*s+y*n-i*r)*2/l,w(A,H)[2]=(y*a+d*r+i*s-c*n)*2/l):(w(A,H)[0]=(i*a+d*n+c*r-y*s)*2,w(A,H)[1]=(c*a+d*s+y*n-i*r)*2,w(A,H)[2]=(y*a+d*r+i*s-c*n)*2),A.fromRotationTranslation(e,t,w(A,H)),e}static normalFromMat4(e,t){let n=t[0],s=t[1],r=t[2],a=t[4],i=t[5],c=t[6],y=t[8],d=t[9],l=t[10];return e[0]=i*l-c*d,e[1]=r*d-s*l,e[2]=s*c-r*i,e[3]=0,e[4]=c*y-a*l,e[5]=n*l-r*y,e[6]=r*a-n*c,e[7]=0,e[8]=a*d-i*y,e[9]=s*y-n*d,e[10]=n*i-s*a,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static normalFromMat4Fast(e,t){return e}static getTranslation(e,t){return e[0]=t[12],e[1]=t[13],e[2]=t[14],e}static getScaling(e,t){let n=t[0],s=t[1],r=t[2],a=t[4],i=t[5],c=t[6],y=t[8],d=t[9],l=t[10];return e[0]=Math.sqrt(n*n+s*s+r*r),e[1]=Math.sqrt(a*a+i*i+c*c),e[2]=Math.sqrt(y*y+d*d+l*l),e}static getRotation(e,t){A.getScaling(w(A,H),t);let n=1/w(A,H)[0],s=1/w(A,H)[1],r=1/w(A,H)[2],a=t[0]*n,i=t[1]*s,c=t[2]*r,y=t[4]*n,d=t[5]*s,l=t[6]*r,L=t[8]*n,k=t[9]*s,h=t[10]*r,b=a+d+h,x=0;return b>0?(x=Math.sqrt(b+1)*2,e[3]=.25*x,e[0]=(l-k)/x,e[1]=(L-c)/x,e[2]=(i-y)/x):a>d&&a>h?(x=Math.sqrt(1+a-d-h)*2,e[3]=(l-k)/x,e[0]=.25*x,e[1]=(i+y)/x,e[2]=(L+c)/x):d>h?(x=Math.sqrt(1+d-a-h)*2,e[3]=(L-c)/x,e[0]=(i+y)/x,e[1]=.25*x,e[2]=(l+k)/x):(x=Math.sqrt(1+h-a-d)*2,e[3]=(i-y)/x,e[0]=(L+c)/x,e[1]=(l+k)/x,e[2]=.25*x),e}static decompose(e,t,n,s){t[0]=s[12],t[1]=s[13],t[2]=s[14];let r=s[0],a=s[1],i=s[2],c=s[4],y=s[5],d=s[6],l=s[8],L=s[9],k=s[10];n[0]=Math.sqrt(r*r+a*a+i*i),n[1]=Math.sqrt(c*c+y*y+d*d),n[2]=Math.sqrt(l*l+L*L+k*k);let h=1/n[0],b=1/n[1],x=1/n[2],M=r*h,T=a*b,R=i*x,m=c*h,o=y*b,g=d*x,z=l*h,S=L*b,D=k*x,N=M+o+D,f=0;return N>0?(f=Math.sqrt(N+1)*2,e[3]=.25*f,e[0]=(g-S)/f,e[1]=(z-R)/f,e[2]=(T-m)/f):M>o&&M>D?(f=Math.sqrt(1+M-o-D)*2,e[3]=(g-S)/f,e[0]=.25*f,e[1]=(T+m)/f,e[2]=(z+R)/f):o>D?(f=Math.sqrt(1+o-M-D)*2,e[3]=(z-R)/f,e[0]=(T+m)/f,e[1]=.25*f,e[2]=(g+S)/f):(f=Math.sqrt(1+D-M-o)*2,e[3]=(T-m)/f,e[0]=(z+R)/f,e[1]=(g+S)/f,e[2]=.25*f),e}static fromRotationTranslationScale(e,t,n,s){let r=t[0],a=t[1],i=t[2],c=t[3],y=r+r,d=a+a,l=i+i,L=r*y,k=r*d,h=r*l,b=a*d,x=a*l,M=i*l,T=c*y,R=c*d,m=c*l,o=s[0],g=s[1],z=s[2];return e[0]=(1-(b+M))*o,e[1]=(k+m)*o,e[2]=(h-R)*o,e[3]=0,e[4]=(k-m)*g,e[5]=(1-(L+M))*g,e[6]=(x+T)*g,e[7]=0,e[8]=(h+R)*z,e[9]=(x-T)*z,e[10]=(1-(L+b))*z,e[11]=0,e[12]=n[0],e[13]=n[1],e[14]=n[2],e[15]=1,e}static fromRotationTranslationScaleOrigin(e,t,n,s,r){let a=t[0],i=t[1],c=t[2],y=t[3],d=a+a,l=i+i,L=c+c,k=a*d,h=a*l,b=a*L,x=i*l,M=i*L,T=c*L,R=y*d,m=y*l,o=y*L,g=s[0],z=s[1],S=s[2],D=r[0],N=r[1],f=r[2],P=(1-(x+T))*g,O=(h+o)*g,Y=(b-m)*g,I=(h-o)*z,v=(1-(k+T))*z,re=(M+R)*z,ae=(b+m)*S,be=(M-R)*S,xe=(1-(k+x))*S;return e[0]=P,e[1]=O,e[2]=Y,e[3]=0,e[4]=I,e[5]=v,e[6]=re,e[7]=0,e[8]=ae,e[9]=be,e[10]=xe,e[11]=0,e[12]=n[0]+D-(P*D+I*N+ae*f),e[13]=n[1]+N-(O*D+v*N+be*f),e[14]=n[2]+f-(Y*D+re*N+xe*f),e[15]=1,e}static fromQuat(e,t){let n=t[0],s=t[1],r=t[2],a=t[3],i=n+n,c=s+s,y=r+r,d=n*i,l=s*i,L=s*c,k=r*i,h=r*c,b=r*y,x=a*i,M=a*c,T=a*y;return e[0]=1-L-b,e[1]=l+T,e[2]=k-M,e[3]=0,e[4]=l-T,e[5]=1-d-b,e[6]=h+x,e[7]=0,e[8]=k+M,e[9]=h-x,e[10]=1-d-L,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static frustumNO(e,t,n,s,r,a,i=1/0){let c=1/(n-t),y=1/(r-s);if(e[0]=a*2*c,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=a*2*y,e[6]=0,e[7]=0,e[8]=(n+t)*c,e[9]=(r+s)*y,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,i!=null&&i!==1/0){let d=1/(a-i);e[10]=(i+a)*d,e[14]=2*i*a*d}else e[10]=-1,e[14]=-2*a;return e}static frustum(e,t,n,s,r,a,i=1/0){return e}static frustumZO(e,t,n,s,r,a,i=1/0){let c=1/(n-t),y=1/(r-s);if(e[0]=a*2*c,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=a*2*y,e[6]=0,e[7]=0,e[8]=(n+t)*c,e[9]=(r+s)*y,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,i!=null&&i!==1/0){let d=1/(a-i);e[10]=i*d,e[14]=i*a*d}else e[10]=-1,e[14]=-a;return e}static perspectiveNO(e,t,n,s,r=1/0){let a=1/Math.tan(t/2);if(e[0]=a/n,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=a,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,r!=null&&r!==1/0){let i=1/(s-r);e[10]=(r+s)*i,e[14]=2*r*s*i}else e[10]=-1,e[14]=-2*s;return e}static perspective(e,t,n,s,r=1/0){return e}static perspectiveZO(e,t,n,s,r=1/0){let a=1/Math.tan(t/2);if(e[0]=a/n,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=a,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,r!=null&&r!==1/0){let i=1/(s-r);e[10]=r*i,e[14]=r*s*i}else e[10]=-1,e[14]=-s;return e}static perspectiveFromFieldOfView(e,t,n,s){let r=Math.tan(t.upDegrees*Math.PI/180),a=Math.tan(t.downDegrees*Math.PI/180),i=Math.tan(t.leftDegrees*Math.PI/180),c=Math.tan(t.rightDegrees*Math.PI/180),y=2/(i+c),d=2/(r+a);return e[0]=y,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=d,e[6]=0,e[7]=0,e[8]=-((i-c)*y*.5),e[9]=(r-a)*d*.5,e[10]=s/(n-s),e[11]=-1,e[12]=0,e[13]=0,e[14]=s*n/(n-s),e[15]=0,e}static orthoNO(e,t,n,s,r,a,i){let c=1/(t-n),y=1/(s-r),d=1/(a-i);return e[0]=-2*c,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=-2*y,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=2*d,e[11]=0,e[12]=(t+n)*c,e[13]=(r+s)*y,e[14]=(i+a)*d,e[15]=1,e}static ortho(e,t,n,s,r,a,i){return e}static orthoZO(e,t,n,s,r,a,i){let c=1/(t-n),y=1/(s-r),d=1/(a-i);return e[0]=-2*c,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=-2*y,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=d,e[11]=0,e[12]=(t+n)*c,e[13]=(r+s)*y,e[14]=a*d,e[15]=1,e}static lookAt(e,t,n,s){let r=t[0],a=t[1],i=t[2],c=s[0],y=s[1],d=s[2],l=n[0],L=n[1],k=n[2];if(Math.abs(r-l)<1e-6&&Math.abs(a-L)<1e-6&&Math.abs(i-k)<1e-6)return A.identity(e);let h=r-l,b=a-L,x=i-k,M=1/Math.sqrt(h*h+b*b+x*x);h*=M,b*=M,x*=M;let T=y*x-d*b,R=d*h-c*x,m=c*b-y*h;M=Math.sqrt(T*T+R*R+m*m),M?(M=1/M,T*=M,R*=M,m*=M):(T=0,R=0,m=0);let o=b*m-x*R,g=x*T-h*m,z=h*R-b*T;return M=Math.sqrt(o*o+g*g+z*z),M?(M=1/M,o*=M,g*=M,z*=M):(o=0,g=0,z=0),e[0]=T,e[1]=o,e[2]=h,e[3]=0,e[4]=R,e[5]=g,e[6]=b,e[7]=0,e[8]=m,e[9]=z,e[10]=x,e[11]=0,e[12]=-(T*r+R*a+m*i),e[13]=-(o*r+g*a+z*i),e[14]=-(h*r+b*a+x*i),e[15]=1,e}static targetTo(e,t,n,s){let r=t[0],a=t[1],i=t[2],c=s[0],y=s[1],d=s[2],l=r-n[0],L=a-n[1],k=i-n[2],h=l*l+L*L+k*k;h>0&&(h=1/Math.sqrt(h),l*=h,L*=h,k*=h);let b=y*k-d*L,x=d*l-c*k,M=c*L-y*l;return h=b*b+x*x+M*M,h>0&&(h=1/Math.sqrt(h),b*=h,x*=h,M*=h),e[0]=b,e[1]=x,e[2]=M,e[3]=0,e[4]=L*M-k*x,e[5]=k*b-l*M,e[6]=l*x-L*b,e[7]=0,e[8]=l,e[9]=L,e[10]=k,e[11]=0,e[12]=r,e[13]=a,e[14]=i,e[15]=1,e}static frob(e){return Math.sqrt(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]+e[3]*e[3]+e[4]*e[4]+e[5]*e[5]+e[6]*e[6]+e[7]*e[7]+e[8]*e[8]+e[9]*e[9]+e[10]*e[10]+e[11]*e[11]+e[12]*e[12]+e[13]*e[13]+e[14]*e[14]+e[15]*e[15])}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e[4]=t[4]+n[4],e[5]=t[5]+n[5],e[6]=t[6]+n[6],e[7]=t[7]+n[7],e[8]=t[8]+n[8],e[9]=t[9]+n[9],e[10]=t[10]+n[10],e[11]=t[11]+n[11],e[12]=t[12]+n[12],e[13]=t[13]+n[13],e[14]=t[14]+n[14],e[15]=t[15]+n[15],e}static subtract(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e[4]=t[4]-n[4],e[5]=t[5]-n[5],e[6]=t[6]-n[6],e[7]=t[7]-n[7],e[8]=t[8]-n[8],e[9]=t[9]-n[9],e[10]=t[10]-n[10],e[11]=t[11]-n[11],e[12]=t[12]-n[12],e[13]=t[13]-n[13],e[14]=t[14]-n[14],e[15]=t[15]-n[15],e}static sub(e,t,n){return e}static multiplyScalar(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*n,e[5]=t[5]*n,e[6]=t[6]*n,e[7]=t[7]*n,e[8]=t[8]*n,e[9]=t[9]*n,e[10]=t[10]*n,e[11]=t[11]*n,e[12]=t[12]*n,e[13]=t[13]*n,e[14]=t[14]*n,e[15]=t[15]*n,e}static multiplyScalarAndAdd(e,t,n,s){return e[0]=t[0]+n[0]*s,e[1]=t[1]+n[1]*s,e[2]=t[2]+n[2]*s,e[3]=t[3]+n[3]*s,e[4]=t[4]+n[4]*s,e[5]=t[5]+n[5]*s,e[6]=t[6]+n[6]*s,e[7]=t[7]+n[7]*s,e[8]=t[8]+n[8]*s,e[9]=t[9]+n[9]*s,e[10]=t[10]+n[10]*s,e[11]=t[11]+n[11]*s,e[12]=t[12]+n[12]*s,e[13]=t[13]+n[13]*s,e[14]=t[14]+n[14]*s,e[15]=t[15]+n[15]*s,e}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]&&e[8]===t[8]&&e[9]===t[9]&&e[10]===t[10]&&e[11]===t[11]&&e[12]===t[12]&&e[13]===t[13]&&e[14]===t[14]&&e[15]===t[15]}static equals(e,t){let n=e[0],s=e[1],r=e[2],a=e[3],i=e[4],c=e[5],y=e[6],d=e[7],l=e[8],L=e[9],k=e[10],h=e[11],b=e[12],x=e[13],M=e[14],T=e[15],R=t[0],m=t[1],o=t[2],g=t[3],z=t[4],S=t[5],D=t[6],N=t[7],f=t[8],P=t[9],O=t[10],Y=t[11],I=t[12],v=t[13],re=t[14],ae=t[15];return Math.abs(n-R)<=1e-6*Math.max(1,Math.abs(n),Math.abs(R))&&Math.abs(s-m)<=1e-6*Math.max(1,Math.abs(s),Math.abs(m))&&Math.abs(r-o)<=1e-6*Math.max(1,Math.abs(r),Math.abs(o))&&Math.abs(a-g)<=1e-6*Math.max(1,Math.abs(a),Math.abs(g))&&Math.abs(i-z)<=1e-6*Math.max(1,Math.abs(i),Math.abs(z))&&Math.abs(c-S)<=1e-6*Math.max(1,Math.abs(c),Math.abs(S))&&Math.abs(y-D)<=1e-6*Math.max(1,Math.abs(y),Math.abs(D))&&Math.abs(d-N)<=1e-6*Math.max(1,Math.abs(d),Math.abs(N))&&Math.abs(l-f)<=1e-6*Math.max(1,Math.abs(l),Math.abs(f))&&Math.abs(L-P)<=1e-6*Math.max(1,Math.abs(L),Math.abs(P))&&Math.abs(k-O)<=1e-6*Math.max(1,Math.abs(k),Math.abs(O))&&Math.abs(h-Y)<=1e-6*Math.max(1,Math.abs(h),Math.abs(Y))&&Math.abs(b-I)<=1e-6*Math.max(1,Math.abs(b),Math.abs(I))&&Math.abs(x-v)<=1e-6*Math.max(1,Math.abs(x),Math.abs(v))&&Math.abs(M-re)<=1e-6*Math.max(1,Math.abs(M),Math.abs(re))&&Math.abs(T-ae)<=1e-6*Math.max(1,Math.abs(T),Math.abs(ae))}static str(e){return`Mat4(${e.join(\", \")})`}};se=new WeakMap,H=new WeakMap,Z(A,se,new Float64Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1])),Z(A,H,new Float64Array(3));var G=A;G.prototype.mul=G.prototype.multiply;G.sub=G.subtract;G.mul=G.multiply;G.frustum=G.frustumNO;G.perspective=G.perspectiveNO;G.ortho=G.orthoNO;G.normalFromMat4Fast=G.normalFromMat4;var q=class E extends Float64Array{constructor(...e){switch(e.length){case 3:super(e);break;case 2:super(e[0],e[1],3);break;case 1:{let t=e[0];t===void 0?super(3):typeof t==\"number\"?super([t,t,t]):super(t,0,3);break}default:super(3);break}}get x(){return this[0]}set x(e){this[0]=e}get y(){return this[1]}set y(e){this[1]=e}get z(){return this[2]}set z(e){this[2]=e}get r(){return this[0]}set r(e){this[0]=e}get g(){return this[1]}set g(e){this[1]=e}get b(){return this[2]}set b(e){this[2]=e}get magnitude(){let e=this[0],t=this[1],n=this[2];return Math.sqrt(e*e+t*t+n*n)}get mag(){return this.magnitude}get squaredMagnitude(){let e=this[0],t=this[1],n=this[2];return e*e+t*t+n*n}get sqrMag(){return this.squaredMagnitude}get str(){return E.str(this)}copy(e){return this.set(e),this}add(e){return this[0]+=e[0],this[1]+=e[1],this[2]+=e[2],this}subtract(e){return this[0]-=e[0],this[1]-=e[1],this[2]-=e[2],this}sub(e){return this}multiply(e){return this[0]*=e[0],this[1]*=e[1],this[2]*=e[2],this}mul(e){return this}divide(e){return this[0]/=e[0],this[1]/=e[1],this[2]/=e[2],this}div(e){return this}scale(e){return this[0]*=e,this[1]*=e,this[2]*=e,this}scaleAndAdd(e,t){return this[0]+=e[0]*t,this[1]+=e[1]*t,this[2]+=e[2]*t,this}distance(e){return E.distance(this,e)}dist(e){return 0}squaredDistance(e){return E.squaredDistance(this,e)}sqrDist(e){return 0}negate(){return this[0]*=-1,this[1]*=-1,this[2]*=-1,this}invert(){return this[0]=1/this[0],this[1]=1/this[1],this[2]=1/this[2],this}abs(){return this[0]=Math.abs(this[0]),this[1]=Math.abs(this[1]),this[2]=Math.abs(this[2]),this}dot(e){return this[0]*e[0]+this[1]*e[1]+this[2]*e[2]}normalize(){return E.normalize(this,this)}static get BYTE_LENGTH(){return 3*Float64Array.BYTES_PER_ELEMENT}static create(){return new E}static clone(e){return new E(e)}static magnitude(e){let t=e[0],n=e[1],s=e[2];return Math.sqrt(t*t+n*n+s*s)}static mag(e){return 0}static length(e){return 0}static len(e){return 0}static fromValues(e,t,n){return new E(e,t,n)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e}static set(e,t,n,s){return e[0]=t,e[1]=n,e[2]=s,e}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e}static subtract(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e}static sub(e,t,n){return e}static multiply(e,t,n){return e[0]=t[0]*n[0],e[1]=t[1]*n[1],e[2]=t[2]*n[2],e}static mul(e,t,n){return e}static divide(e,t,n){return e[0]=t[0]/n[0],e[1]=t[1]/n[1],e[2]=t[2]/n[2],e}static div(e,t,n){return e}static ceil(e,t){return e[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e[2]=Math.ceil(t[2]),e}static floor(e,t){return e[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e[2]=Math.floor(t[2]),e}static min(e,t,n){return e[0]=Math.min(t[0],n[0]),e[1]=Math.min(t[1],n[1]),e[2]=Math.min(t[2],n[2]),e}static max(e,t,n){return e[0]=Math.max(t[0],n[0]),e[1]=Math.max(t[1],n[1]),e[2]=Math.max(t[2],n[2]),e}static scale(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e}static scaleAndAdd(e,t,n,s){return e[0]=t[0]+n[0]*s,e[1]=t[1]+n[1]*s,e[2]=t[2]+n[2]*s,e}static distance(e,t){let n=t[0]-e[0],s=t[1]-e[1],r=t[2]-e[2];return Math.sqrt(n*n+s*s+r*r)}static dist(e,t){return 0}static squaredDistance(e,t){let n=t[0]-e[0],s=t[1]-e[1],r=t[2]-e[2];return n*n+s*s+r*r}static sqrDist(e,t){return 0}static squaredLength(e){let t=e[0],n=e[1],s=e[2];return t*t+n*n+s*s}static sqrLen(e,t){return 0}static negate(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e}static inverse(e,t){return e[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e}static abs(e,t){return e[0]=Math.abs(t[0]),e[1]=Math.abs(t[1]),e[2]=Math.abs(t[2]),e}static normalize(e,t){let n=t[0],s=t[1],r=t[2],a=n*n+s*s+r*r;return a>0&&(a=1/Math.sqrt(a)),e[0]=t[0]*a,e[1]=t[1]*a,e[2]=t[2]*a,e}static dot(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}static cross(e,t,n){let s=t[0],r=t[1],a=t[2],i=n[0],c=n[1],y=n[2];return e[0]=r*y-a*c,e[1]=a*i-s*y,e[2]=s*c-r*i,e}static lerp(e,t,n,s){let r=t[0],a=t[1],i=t[2];return e[0]=r+s*(n[0]-r),e[1]=a+s*(n[1]-a),e[2]=i+s*(n[2]-i),e}static slerp(e,t,n,s){let r=Math.acos(Math.min(Math.max(E.dot(t,n),-1),1)),a=Math.sin(r),i=Math.sin((1-s)*r)/a,c=Math.sin(s*r)/a;return e[0]=i*t[0]+c*n[0],e[1]=i*t[1]+c*n[1],e[2]=i*t[2]+c*n[2],e}static hermite(e,t,n,s,r,a){let i=a*a,c=i*(2*a-3)+1,y=i*(a-2)+a,d=i*(a-1),l=i*(3-2*a);return e[0]=t[0]*c+n[0]*y+s[0]*d+r[0]*l,e[1]=t[1]*c+n[1]*y+s[1]*d+r[1]*l,e[2]=t[2]*c+n[2]*y+s[2]*d+r[2]*l,e}static bezier(e,t,n,s,r,a){let i=1-a,c=i*i,y=a*a,d=c*i,l=3*a*c,L=3*y*i,k=y*a;return e[0]=t[0]*d+n[0]*l+s[0]*L+r[0]*k,e[1]=t[1]*d+n[1]*l+s[1]*L+r[1]*k,e[2]=t[2]*d+n[2]*l+s[2]*L+r[2]*k,e}static transformMat4(e,t,n){let s=t[0],r=t[1],a=t[2],i=n[3]*s+n[7]*r+n[11]*a+n[15]||1;return e[0]=(n[0]*s+n[4]*r+n[8]*a+n[12])/i,e[1]=(n[1]*s+n[5]*r+n[9]*a+n[13])/i,e[2]=(n[2]*s+n[6]*r+n[10]*a+n[14])/i,e}static transformMat3(e,t,n){let s=t[0],r=t[1],a=t[2];return e[0]=s*n[0]+r*n[3]+a*n[6],e[1]=s*n[1]+r*n[4]+a*n[7],e[2]=s*n[2]+r*n[5]+a*n[8],e}static transformQuat(e,t,n){let s=n[0],r=n[1],a=n[2],i=n[3]*2,c=t[0],y=t[1],d=t[2],l=r*d-a*y,L=a*c-s*d,k=s*y-r*c,h=(r*k-a*L)*2,b=(a*l-s*k)*2,x=(s*L-r*l)*2;return e[0]=c+l*i+h,e[1]=y+L*i+b,e[2]=d+k*i+x,e}static rotateX(e,t,n,s){let r=n[1],a=n[2],i=t[1]-r,c=t[2]-a;return e[0]=t[0],e[1]=i*Math.cos(s)-c*Math.sin(s)+r,e[2]=i*Math.sin(s)+c*Math.cos(s)+a,e}static rotateY(e,t,n,s){let r=n[0],a=n[2],i=t[0]-r,c=t[2]-a;return e[0]=c*Math.sin(s)+i*Math.cos(s)+r,e[1]=t[1],e[2]=c*Math.cos(s)-i*Math.sin(s)+a,e}static rotateZ(e,t,n,s){let r=n[0],a=n[1],i=t[0]-r,c=t[1]-a;return e[0]=i*Math.cos(s)-c*Math.sin(s)+r,e[1]=i*Math.sin(s)+c*Math.cos(s)+a,e[2]=n[2],e}static angle(e,t){let n=e[0],s=e[1],r=e[2],a=t[0],i=t[1],c=t[2],y=Math.sqrt((n*n+s*s+r*r)*(a*a+i*i+c*c)),d=y&&E.dot(e,t)/y;return Math.acos(Math.min(Math.max(d,-1),1))}static zero(e){return e[0]=0,e[1]=0,e[2]=0,e}static str(e){return`Vec3(${e.join(\", \")})`}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]}static equals(e,t){let n=e[0],s=e[1],r=e[2],a=t[0],i=t[1],c=t[2];return Math.abs(n-a)<=1e-6*Math.max(1,Math.abs(n),Math.abs(a))&&Math.abs(s-i)<=1e-6*Math.max(1,Math.abs(s),Math.abs(i))&&Math.abs(r-c)<=1e-6*Math.max(1,Math.abs(r),Math.abs(c))}};q.prototype.sub=q.prototype.subtract;q.prototype.mul=q.prototype.multiply;q.prototype.div=q.prototype.divide;q.prototype.dist=q.prototype.distance;q.prototype.sqrDist=q.prototype.squaredDistance;q.sub=q.subtract;q.mul=q.multiply;q.div=q.divide;q.dist=q.distance;q.sqrDist=q.squaredDistance;q.sqrLen=q.squaredLength;q.mag=q.magnitude;q.length=q.magnitude;q.len=q.magnitude;var Q=class E extends Float64Array{constructor(...e){switch(e.length){case 4:super(e);break;case 2:super(e[0],e[1],4);break;case 1:{let t=e[0];t===void 0?super(4):typeof t==\"number\"?super([t,t,t,t]):super(t,0,4);break}default:super(4);break}}get x(){return this[0]}set x(e){this[0]=e}get y(){return this[1]}set y(e){this[1]=e}get z(){return this[2]}set z(e){this[2]=e}get w(){return this[3]}set w(e){this[3]=e}get r(){return this[0]}set r(e){this[0]=e}get g(){return this[1]}set g(e){this[1]=e}get b(){return this[2]}set b(e){this[2]=e}get a(){return this[3]}set a(e){this[3]=e}get magnitude(){let e=this[0],t=this[1],n=this[2],s=this[3];return Math.sqrt(e*e+t*t+n*n+s*s)}get mag(){return this.magnitude}get str(){return E.str(this)}copy(e){return super.set(e),this}add(e){return this[0]+=e[0],this[1]+=e[1],this[2]+=e[2],this[3]+=e[3],this}subtract(e){return this[0]-=e[0],this[1]-=e[1],this[2]-=e[2],this[3]-=e[3],this}sub(e){return this}multiply(e){return this[0]*=e[0],this[1]*=e[1],this[2]*=e[2],this[3]*=e[3],this}mul(e){return this}divide(e){return this[0]/=e[0],this[1]/=e[1],this[2]/=e[2],this[3]/=e[3],this}div(e){return this}scale(e){return this[0]*=e,this[1]*=e,this[2]*=e,this[3]*=e,this}scaleAndAdd(e,t){return this[0]+=e[0]*t,this[1]+=e[1]*t,this[2]+=e[2]*t,this[3]+=e[3]*t,this}distance(e){return E.distance(this,e)}dist(e){return 0}squaredDistance(e){return E.squaredDistance(this,e)}sqrDist(e){return 0}negate(){return this[0]*=-1,this[1]*=-1,this[2]*=-1,this[3]*=-1,this}invert(){return this[0]=1/this[0],this[1]=1/this[1],this[2]=1/this[2],this[3]=1/this[3],this}abs(){return this[0]=Math.abs(this[0]),this[1]=Math.abs(this[1]),this[2]=Math.abs(this[2]),this[3]=Math.abs(this[3]),this}dot(e){return this[0]*e[0]+this[1]*e[1]+this[2]*e[2]+this[3]*e[3]}normalize(){return E.normalize(this,this)}static get BYTE_LENGTH(){return 4*Float64Array.BYTES_PER_ELEMENT}static create(){return new E}static clone(e){return new E(e)}static fromValues(e,t,n,s){return new E(e,t,n,s)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}static set(e,t,n,s,r){return e[0]=t,e[1]=n,e[2]=s,e[3]=r,e}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e}static subtract(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e}static sub(e,t,n){return e}static multiply(e,t,n){return e[0]=t[0]*n[0],e[1]=t[1]*n[1],e[2]=t[2]*n[2],e[3]=t[3]*n[3],e}static mul(e,t,n){return e}static divide(e,t,n){return e[0]=t[0]/n[0],e[1]=t[1]/n[1],e[2]=t[2]/n[2],e[3]=t[3]/n[3],e}static div(e,t,n){return e}static ceil(e,t){return e[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e[2]=Math.ceil(t[2]),e[3]=Math.ceil(t[3]),e}static floor(e,t){return e[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e[2]=Math.floor(t[2]),e[3]=Math.floor(t[3]),e}static min(e,t,n){return e[0]=Math.min(t[0],n[0]),e[1]=Math.min(t[1],n[1]),e[2]=Math.min(t[2],n[2]),e[3]=Math.min(t[3],n[3]),e}static max(e,t,n){return e[0]=Math.max(t[0],n[0]),e[1]=Math.max(t[1],n[1]),e[2]=Math.max(t[2],n[2]),e[3]=Math.max(t[3],n[3]),e}static round(e,t){return e[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e[2]=Math.round(t[2]),e[3]=Math.round(t[3]),e}static scale(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e}static scaleAndAdd(e,t,n,s){return e[0]=t[0]+n[0]*s,e[1]=t[1]+n[1]*s,e[2]=t[2]+n[2]*s,e[3]=t[3]+n[3]*s,e}static distance(e,t){let n=t[0]-e[0],s=t[1]-e[1],r=t[2]-e[2],a=t[3]-e[3];return Math.hypot(n,s,r,a)}static dist(e,t){return 0}static squaredDistance(e,t){let n=t[0]-e[0],s=t[1]-e[1],r=t[2]-e[2],a=t[3]-e[3];return n*n+s*s+r*r+a*a}static sqrDist(e,t){return 0}static magnitude(e){let t=e[0],n=e[1],s=e[2],r=e[3];return Math.sqrt(t*t+n*n+s*s+r*r)}static mag(e){return 0}static length(e){return 0}static len(e){return 0}static squaredLength(e){let t=e[0],n=e[1],s=e[2],r=e[3];return t*t+n*n+s*s+r*r}static sqrLen(e){return 0}static negate(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=-t[3],e}static inverse(e,t){return e[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e[3]=1/t[3],e}static abs(e,t){return e[0]=Math.abs(t[0]),e[1]=Math.abs(t[1]),e[2]=Math.abs(t[2]),e[3]=Math.abs(t[3]),e}static normalize(e,t){let n=t[0],s=t[1],r=t[2],a=t[3],i=n*n+s*s+r*r+a*a;return i>0&&(i=1/Math.sqrt(i)),e[0]=n*i,e[1]=s*i,e[2]=r*i,e[3]=a*i,e}static dot(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]}static cross(e,t,n,s){let r=n[0]*s[1]-n[1]*s[0],a=n[0]*s[2]-n[2]*s[0],i=n[0]*s[3]-n[3]*s[0],c=n[1]*s[2]-n[2]*s[1],y=n[1]*s[3]-n[3]*s[1],d=n[2]*s[3]-n[3]*s[2],l=t[0],L=t[1],k=t[2],h=t[3];return e[0]=L*d-k*y+h*c,e[1]=-(l*d)+k*i-h*a,e[2]=l*y-L*i+h*r,e[3]=-(l*c)+L*a-k*r,e}static lerp(e,t,n,s){let r=t[0],a=t[1],i=t[2],c=t[3];return e[0]=r+s*(n[0]-r),e[1]=a+s*(n[1]-a),e[2]=i+s*(n[2]-i),e[3]=c+s*(n[3]-c),e}static transformMat4(e,t,n){let s=t[0],r=t[1],a=t[2],i=t[3];return e[0]=n[0]*s+n[4]*r+n[8]*a+n[12]*i,e[1]=n[1]*s+n[5]*r+n[9]*a+n[13]*i,e[2]=n[2]*s+n[6]*r+n[10]*a+n[14]*i,e[3]=n[3]*s+n[7]*r+n[11]*a+n[15]*i,e}static transformQuat(e,t,n){let s=t[0],r=t[1],a=t[2],i=n[0],c=n[1],y=n[2],d=n[3],l=d*s+c*a-y*r,L=d*r+y*s-i*a,k=d*a+i*r-c*s,h=-i*s-c*r-y*a;return e[0]=l*d+h*-i+L*-y-k*-c,e[1]=L*d+h*-c+k*-i-l*-y,e[2]=k*d+h*-y+l*-c-L*-i,e[3]=t[3],e}static zero(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=0,e}static str(e){return`Vec4(${e.join(\", \")})`}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]}static equals(e,t){let n=e[0],s=e[1],r=e[2],a=e[3],i=t[0],c=t[1],y=t[2],d=t[3];return Math.abs(n-i)<=1e-6*Math.max(1,Math.abs(n),Math.abs(i))&&Math.abs(s-c)<=1e-6*Math.max(1,Math.abs(s),Math.abs(c))&&Math.abs(r-y)<=1e-6*Math.max(1,Math.abs(r),Math.abs(y))&&Math.abs(a-d)<=1e-6*Math.max(1,Math.abs(a),Math.abs(d))}};Q.prototype.sub=Q.prototype.subtract;Q.prototype.mul=Q.prototype.multiply;Q.prototype.div=Q.prototype.divide;Q.prototype.dist=Q.prototype.distance;Q.prototype.sqrDist=Q.prototype.squaredDistance;Q.sub=Q.subtract;Q.mul=Q.multiply;Q.div=Q.divide;Q.dist=Q.distance;Q.sqrDist=Q.squaredDistance;Q.sqrLen=Q.squaredLength;Q.mag=Q.magnitude;Q.length=Q.magnitude;Q.len=Q.magnitude;var ke=new Float64Array([0,0,0,1]),le,ie,ce,U,W,Le,he,p=class p extends Float64Array{constructor(...e){switch(e.length){case 4:super(e);break;case 2:super(e[0],e[1],4);break;case 1:{let t=e[0];t===void 0?super(ke):typeof t==\"number\"?super([t,t,t,t]):super(t,0,4);break}default:super(ke);break}}get x(){return this[0]}set x(e){this[0]=e}get y(){return this[1]}set y(e){this[1]=e}get z(){return this[2]}set z(e){this[2]=e}get w(){return this[3]}set w(e){this[3]=e}get magnitude(){let e=this[0],t=this[1],n=this[2],s=this[3];return Math.sqrt(e*e+t*t+n*n+s*s)}get mag(){return this.magnitude}get str(){return p.str(this)}copy(e){return super.set(e),this}identity(){return this.set(ke),this}multiply(e){return p.multiply(this,this,e)}mul(e){return this}rotateX(e){return p.rotateX(this,this,e)}rotateY(e){return p.rotateY(this,this,e)}rotateZ(e){return p.rotateZ(this,this,e)}invert(){return p.invert(this,this)}scale(e){return this[0]*=e,this[1]*=e,this[2]*=e,this[3]*=e,this}dot(e){return p.dot(this,e)}static get BYTE_LENGTH(){return 4*Float64Array.BYTES_PER_ELEMENT}static create(){return new p}static identity(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e}static setAxisAngle(e,t,n){n*=.5;let s=Math.sin(n);return e[0]=s*t[0],e[1]=s*t[1],e[2]=s*t[2],e[3]=Math.cos(n),e}static getAxisAngle(e,t){let n=Math.acos(t[3])*2,s=Math.sin(n/2);return s>1e-6?(e[0]=t[0]/s,e[1]=t[1]/s,e[2]=t[2]/s):(e[0]=1,e[1]=0,e[2]=0),n}static getAngle(e,t){let n=p.dot(e,t);return Math.acos(2*n*n-1)}static multiply(e,t,n){let s=t[0],r=t[1],a=t[2],i=t[3],c=n[0],y=n[1],d=n[2],l=n[3];return e[0]=s*l+i*c+r*d-a*y,e[1]=r*l+i*y+a*c-s*d,e[2]=a*l+i*d+s*y-r*c,e[3]=i*l-s*c-r*y-a*d,e}static rotateX(e,t,n){n*=.5;let s=t[0],r=t[1],a=t[2],i=t[3],c=Math.sin(n),y=Math.cos(n);return e[0]=s*y+i*c,e[1]=r*y+a*c,e[2]=a*y-r*c,e[3]=i*y-s*c,e}static rotateY(e,t,n){n*=.5;let s=t[0],r=t[1],a=t[2],i=t[3],c=Math.sin(n),y=Math.cos(n);return e[0]=s*y-a*c,e[1]=r*y+i*c,e[2]=a*y+s*c,e[3]=i*y-r*c,e}static rotateZ(e,t,n){n*=.5;let s=t[0],r=t[1],a=t[2],i=t[3],c=Math.sin(n),y=Math.cos(n);return e[0]=s*y+r*c,e[1]=r*y-s*c,e[2]=a*y+i*c,e[3]=i*y-a*c,e}static calculateW(e,t){let n=t[0],s=t[1],r=t[2];return e[0]=n,e[1]=s,e[2]=r,e[3]=Math.sqrt(Math.abs(1-n*n-s*s-r*r)),e}static exp(e,t){let n=t[0],s=t[1],r=t[2],a=t[3],i=Math.sqrt(n*n+s*s+r*r),c=Math.exp(a),y=i>0?c*Math.sin(i)/i:0;return e[0]=n*y,e[1]=s*y,e[2]=r*y,e[3]=c*Math.cos(i),e}static ln(e,t){let n=t[0],s=t[1],r=t[2],a=t[3],i=Math.sqrt(n*n+s*s+r*r),c=i>0?Math.atan2(i,a)/i:0;return e[0]=n*c,e[1]=s*c,e[2]=r*c,e[3]=.5*Math.log(n*n+s*s+r*r+a*a),e}static pow(e,t,n){return p.ln(e,t),p.scale(e,e,n),p.exp(e,e),e}static slerp(e,t,n,s){let r=t[0],a=t[1],i=t[2],c=t[3],y=n[0],d=n[1],l=n[2],L=n[3],k,h,b=r*y+a*d+i*l+c*L;if(b<0&&(b=-b,y=-y,d=-d,l=-l,L=-L),1-b>1e-6){let x=Math.acos(b),M=Math.sin(x);k=Math.sin((1-s)*x)/M,h=Math.sin(s*x)/M}else k=1-s,h=s;return e[0]=k*r+h*y,e[1]=k*a+h*d,e[2]=k*i+h*l,e[3]=k*c+h*L,e}static invert(e,t){let n=t[0],s=t[1],r=t[2],a=t[3],i=n*n+s*s+r*r+a*a,c=i?1/i:0;return e[0]=-n*c,e[1]=-s*c,e[2]=-r*c,e[3]=a*c,e}static conjugate(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=t[3],e}static fromMat3(e,t){let n=t[0]+t[4]+t[8],s;if(n>0)s=Math.sqrt(n+1),e[3]=.5*s,s=.5/s,e[0]=(t[5]-t[7])*s,e[1]=(t[6]-t[2])*s,e[2]=(t[1]-t[3])*s;else{let r=0;t[4]>t[0]&&(r=1),t[8]>t[r*3+r]&&(r=2);let a=(r+1)%3,i=(r+2)%3;s=Math.sqrt(t[r*3+r]-t[a*3+a]-t[i*3+i]+1),e[r]=.5*s,s=.5/s,e[3]=(t[a*3+i]-t[i*3+a])*s,e[a]=(t[a*3+r]+t[r*3+a])*s,e[i]=(t[i*3+r]+t[r*3+i])*s}return e}static fromEuler(e,t,n,s,r=w(p,le)){let a=.5*Math.PI/180;t*=a,n*=a,s*=a;let i=Math.sin(t),c=Math.cos(t),y=Math.sin(n),d=Math.cos(n),l=Math.sin(s),L=Math.cos(s);switch(r){case\"xyz\":e[0]=i*d*L+c*y*l,e[1]=c*y*L-i*d*l,e[2]=c*d*l+i*y*L,e[3]=c*d*L-i*y*l;break;case\"xzy\":e[0]=i*d*L-c*y*l,e[1]=c*y*L-i*d*l,e[2]=c*d*l+i*y*L,e[3]=c*d*L+i*y*l;break;case\"yxz\":e[0]=i*d*L+c*y*l,e[1]=c*y*L-i*d*l,e[2]=c*d*l-i*y*L,e[3]=c*d*L+i*y*l;break;case\"yzx\":e[0]=i*d*L+c*y*l,e[1]=c*y*L+i*d*l,e[2]=c*d*l-i*y*L,e[3]=c*d*L-i*y*l;break;case\"zxy\":e[0]=i*d*L-c*y*l,e[1]=c*y*L+i*d*l,e[2]=c*d*l+i*y*L,e[3]=c*d*L-i*y*l;break;case\"zyx\":e[0]=i*d*L-c*y*l,e[1]=c*y*L+i*d*l,e[2]=c*d*l-i*y*L,e[3]=c*d*L+i*y*l;break;default:throw new Error(`Unknown angle order ${r}`)}return e}static str(e){return`Quat(${e.join(\", \")})`}static clone(e){return new p(e)}static fromValues(e,t,n,s){return new p(e,t,n,s)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}static set(e,t,n,s,r){return e}static add(e,t,n){return e}static mul(e,t,n){return e}static scale(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e}static dot(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]}static lerp(e,t,n,s){return e}static magnitude(e){return 0}static mag(e){return 0}static length(e){return 0}static len(e){return 0}static squaredLength(e){return 0}static sqrLen(e){return 0}static normalize(e,t){return e}static exactEquals(e,t){return!1}static equals(e,t){return!1}static rotationTo(e,t,n){let s=q.dot(t,n);return s<-.999999?(q.cross(w(p,W),w(p,Le),t),q.mag(w(p,W))<1e-6&&q.cross(w(p,W),w(p,he),t),q.normalize(w(p,W),w(p,W)),p.setAxisAngle(e,w(p,W),Math.PI),e):s>.999999?(e[0]=0,e[1]=0,e[2]=0,e[3]=1,e):(q.cross(w(p,W),t,n),e[0]=w(p,W)[0],e[1]=w(p,W)[1],e[2]=w(p,W)[2],e[3]=1+s,p.normalize(e,e))}static sqlerp(e,t,n,s,r,a){return p.slerp(w(p,ie),t,r,a),p.slerp(w(p,ce),n,s,a),p.slerp(e,w(p,ie),w(p,ce),2*a*(1-a)),e}static setAxes(e,t,n,s){return w(p,U)[0]=n[0],w(p,U)[3]=n[1],w(p,U)[6]=n[2],w(p,U)[1]=s[0],w(p,U)[4]=s[1],w(p,U)[7]=s[2],w(p,U)[2]=-t[0],w(p,U)[5]=-t[1],w(p,U)[8]=-t[2],p.normalize(e,p.fromMat3(e,w(p,U)))}};le=new WeakMap,ie=new WeakMap,ce=new WeakMap,U=new WeakMap,W=new WeakMap,Le=new WeakMap,he=new WeakMap,Z(p,le,\"zyx\"),Z(p,ie,new Float64Array(4)),Z(p,ce,new Float64Array(4)),Z(p,U,new Float64Array(9)),Z(p,W,new Float64Array(3)),Z(p,Le,new Float64Array([1,0,0])),Z(p,he,new Float64Array([0,1,0]));var B=p;B.set=Q.set;B.add=Q.add;B.lerp=Q.lerp;B.normalize=Q.normalize;B.squaredLength=Q.squaredLength;B.sqrLen=Q.squaredLength;B.exactEquals=Q.exactEquals;B.equals=Q.equals;B.magnitude=Q.magnitude;B.prototype.mul=B.prototype.multiply;B.mul=B.multiply;B.mag=B.magnitude;B.length=B.magnitude;B.len=B.magnitude;var Te=new Float64Array([0,0,0,1,0,0,0,0]),ye,de,j=class j extends Float64Array{constructor(...e){switch(e.length){case 8:super(e);break;case 2:super(e[0],e[1],8);break;case 1:{let t=e[0];t===void 0?super(Te):typeof t==\"number\"?super([t,t,t,t,t,t,t,t]):super(t,0,8);break}default:super(Te);break}}get str(){return j.str(this)}copy(e){return super.set(e),this}static get BYTE_LENGTH(){return 8*Float64Array.BYTES_PER_ELEMENT}static create(){return new j}static clone(e){return new j(e)}static fromValues(e,t,n,s,r,a,i,c){return new j(e,t,n,s,r,a,i,c)}static fromRotationTranslationValues(e,t,n,s,r,a,i){let c=r*.5,y=a*.5,d=i*.5;return new j(e,t,n,s,c*s+y*n-d*t,y*s+d*e-c*n,d*s+c*t-y*e,-c*e-y*t-d*n)}static fromRotationTranslation(e,t,n){let s=n[0]*.5,r=n[1]*.5,a=n[2]*.5,i=t[0],c=t[1],y=t[2],d=t[3];return e[0]=i,e[1]=c,e[2]=y,e[3]=d,e[4]=s*d+r*y-a*c,e[5]=r*d+a*i-s*y,e[6]=a*d+s*c-r*i,e[7]=-s*i-r*c-a*y,e}static fromTranslation(e,t){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e[4]=t[0]*.5,e[5]=t[1]*.5,e[6]=t[2]*.5,e[7]=0,e}static fromRotation(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=0,e[5]=0,e[6]=0,e[7]=0,e}static fromMat4(e,t){return G.getRotation(w(j,ye),t),G.getTranslation(w(j,de),t),j.fromRotationTranslation(e,w(j,ye),w(j,de))}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e}static identity(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e[4]=0,e[5]=0,e[6]=0,e[7]=0,e}static set(e,t,n,s,r,a,i,c,y){return e[0]=t,e[1]=n,e[2]=s,e[3]=r,e[4]=a,e[5]=i,e[6]=c,e[7]=y,e}static getReal(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}static getDual(e,t){return e[0]=t[4],e[1]=t[5],e[2]=t[6],e[3]=t[7],e}static setReal(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}static setDual(e,t){return e[4]=t[0],e[5]=t[1],e[6]=t[2],e[7]=t[3],e}static getTranslation(e,t){let n=t[4],s=t[5],r=t[6],a=t[7],i=-t[0],c=-t[1],y=-t[2],d=t[3];return e[0]=(n*d+a*i+s*y-r*c)*2,e[1]=(s*d+a*c+r*i-n*y)*2,e[2]=(r*d+a*y+n*c-s*i)*2,e}static translate(e,t,n){let s=t[0],r=t[1],a=t[2],i=t[3],c=n[0]*.5,y=n[1]*.5,d=n[2]*.5,l=t[4],L=t[5],k=t[6],h=t[7];return e[0]=s,e[1]=r,e[2]=a,e[3]=i,e[4]=i*c+r*d-a*y+l,e[5]=i*y+a*c-s*d+L,e[6]=i*d+s*y-r*c+k,e[7]=-s*c-r*y-a*d+h,e}static rotateX(e,t,n){let s=-t[0],r=-t[1],a=-t[2],i=t[3],c=t[4],y=t[5],d=t[6],l=t[7],L=c*i+l*s+y*a-d*r,k=y*i+l*r+d*s-c*a,h=d*i+l*a+c*r-y*s,b=l*i-c*s-y*r-d*a;return B.rotateX(e,t,n),s=e[0],r=e[1],a=e[2],i=e[3],e[4]=L*i+b*s+k*a-h*r,e[5]=k*i+b*r+h*s-L*a,e[6]=h*i+b*a+L*r-k*s,e[7]=b*i-L*s-k*r-h*a,e}static rotateY(e,t,n){let s=-t[0],r=-t[1],a=-t[2],i=t[3],c=t[4],y=t[5],d=t[6],l=t[7],L=c*i+l*s+y*a-d*r,k=y*i+l*r+d*s-c*a,h=d*i+l*a+c*r-y*s,b=l*i-c*s-y*r-d*a;return B.rotateY(e,t,n),s=e[0],r=e[1],a=e[2],i=e[3],e[4]=L*i+b*s+k*a-h*r,e[5]=k*i+b*r+h*s-L*a,e[6]=h*i+b*a+L*r-k*s,e[7]=b*i-L*s-k*r-h*a,e}static rotateZ(e,t,n){let s=-t[0],r=-t[1],a=-t[2],i=t[3],c=t[4],y=t[5],d=t[6],l=t[7],L=c*i+l*s+y*a-d*r,k=y*i+l*r+d*s-c*a,h=d*i+l*a+c*r-y*s,b=l*i-c*s-y*r-d*a;return B.rotateZ(e,t,n),s=e[0],r=e[1],a=e[2],i=e[3],e[4]=L*i+b*s+k*a-h*r,e[5]=k*i+b*r+h*s-L*a,e[6]=h*i+b*a+L*r-k*s,e[7]=b*i-L*s-k*r-h*a,e}static rotateByQuatAppend(e,t,n){let s=n[0],r=n[1],a=n[2],i=n[3],c=t[0],y=t[1],d=t[2],l=t[3];return e[0]=c*i+l*s+y*a-d*r,e[1]=y*i+l*r+d*s-c*a,e[2]=d*i+l*a+c*r-y*s,e[3]=l*i-c*s-y*r-d*a,c=t[4],y=t[5],d=t[6],l=t[7],e[4]=c*i+l*s+y*a-d*r,e[5]=y*i+l*r+d*s-c*a,e[6]=d*i+l*a+c*r-y*s,e[7]=l*i-c*s-y*r-d*a,e}static rotateByQuatPrepend(e,t,n){let s=t[0],r=t[1],a=t[2],i=t[3],c=n[0],y=n[1],d=n[2],l=n[3];return e[0]=s*l+i*c+r*d-a*y,e[1]=r*l+i*y+a*c-s*d,e[2]=a*l+i*d+s*y-r*c,e[3]=i*l-s*c-r*y-a*d,c=n[4],y=n[5],d=n[6],l=n[7],e[4]=s*l+i*c+r*d-a*y,e[5]=r*l+i*y+a*c-s*d,e[6]=a*l+i*d+s*y-r*c,e[7]=i*l-s*c-r*y-a*d,e}static rotateAroundAxis(e,t,n,s){if(Math.abs(s)<1e-6)return j.copy(e,t);let r=Math.sqrt(n[0]*n[0]+n[1]*n[1]+n[2]*n[2]);s*=.5;let a=Math.sin(s),i=a*n[0]/r,c=a*n[1]/r,y=a*n[2]/r,d=Math.cos(s),l=t[0],L=t[1],k=t[2],h=t[3];e[0]=l*d+h*i+L*y-k*c,e[1]=L*d+h*c+k*i-l*y,e[2]=k*d+h*y+l*c-L*i,e[3]=h*d-l*i-L*c-k*y;let b=t[4],x=t[5],M=t[6],T=t[7];return e[4]=b*d+T*i+x*y-M*c,e[5]=x*d+T*c+M*i-b*y,e[6]=M*d+T*y+b*c-x*i,e[7]=T*d-b*i-x*c-M*y,e}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e[4]=t[4]+n[4],e[5]=t[5]+n[5],e[6]=t[6]+n[6],e[7]=t[7]+n[7],e}static multiply(e,t,n){let s=t[0],r=t[1],a=t[2],i=t[3],c=n[4],y=n[5],d=n[6],l=n[7],L=t[4],k=t[5],h=t[6],b=t[7],x=n[0],M=n[1],T=n[2],R=n[3];return e[0]=s*R+i*x+r*T-a*M,e[1]=r*R+i*M+a*x-s*T,e[2]=a*R+i*T+s*M-r*x,e[3]=i*R-s*x-r*M-a*T,e[4]=s*l+i*c+r*d-a*y+L*R+b*x+k*T-h*M,e[5]=r*l+i*y+a*c-s*d+k*R+b*M+h*x-L*T,e[6]=a*l+i*d+s*y-r*c+h*R+b*T+L*M-k*x,e[7]=i*l-s*c-r*y-a*d+b*R-L*x-k*M-h*T,e}static mul(e,t,n){return e}static scale(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*n,e[5]=t[5]*n,e[6]=t[6]*n,e[7]=t[7]*n,e}static dot(e,t){return 0}static lerp(e,t,n,s){let r=1-s;return j.dot(t,n)<0&&(s=-s),e[0]=t[0]*r+n[0]*s,e[1]=t[1]*r+n[1]*s,e[2]=t[2]*r+n[2]*s,e[3]=t[3]*r+n[3]*s,e[4]=t[4]*r+n[4]*s,e[5]=t[5]*r+n[5]*s,e[6]=t[6]*r+n[6]*s,e[7]=t[7]*r+n[7]*s,e}static invert(e,t){let n=j.squaredLength(t);return e[0]=-t[0]/n,e[1]=-t[1]/n,e[2]=-t[2]/n,e[3]=t[3]/n,e[4]=-t[4]/n,e[5]=-t[5]/n,e[6]=-t[6]/n,e[7]=t[7]/n,e}static conjugate(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=t[3],e[4]=-t[4],e[5]=-t[5],e[6]=-t[6],e[7]=t[7],e}static magnitude(e){return 0}static mag(e){return 0}static length(e){return 0}static len(e){return 0}static squaredLength(e){return 0}static sqrLen(e){return 0}static normalize(e,t){let n=j.squaredLength(t);if(n>0){n=Math.sqrt(n);let s=t[0]/n,r=t[1]/n,a=t[2]/n,i=t[3]/n,c=t[4],y=t[5],d=t[6],l=t[7],L=s*c+r*y+a*d+i*l;e[0]=s,e[1]=r,e[2]=a,e[3]=i,e[4]=(c-s*L)/n,e[5]=(y-r*L)/n,e[6]=(d-a*L)/n,e[7]=(l-i*L)/n}return e}static str(e){return`Quat2(${e.join(\", \")})`}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]}static equals(e,t){let n=e[0],s=e[1],r=e[2],a=e[3],i=e[4],c=e[5],y=e[6],d=e[7],l=t[0],L=t[1],k=t[2],h=t[3],b=t[4],x=t[5],M=t[6],T=t[7];return Math.abs(n-l)<=1e-6*Math.max(1,Math.abs(n),Math.abs(l))&&Math.abs(s-L)<=1e-6*Math.max(1,Math.abs(s),Math.abs(L))&&Math.abs(r-k)<=1e-6*Math.max(1,Math.abs(r),Math.abs(k))&&Math.abs(a-h)<=1e-6*Math.max(1,Math.abs(a),Math.abs(h))&&Math.abs(i-b)<=1e-6*Math.max(1,Math.abs(i),Math.abs(b))&&Math.abs(c-x)<=1e-6*Math.max(1,Math.abs(c),Math.abs(x))&&Math.abs(y-M)<=1e-6*Math.max(1,Math.abs(y),Math.abs(M))&&Math.abs(d-T)<=1e-6*Math.max(1,Math.abs(d),Math.abs(T))}};ye=new WeakMap,de=new WeakMap,Z(j,ye,new Float64Array(4)),Z(j,de,new Float64Array(3));var K=j;K.dot=B.dot;K.squaredLength=B.squaredLength;K.sqrLen=B.squaredLength;K.mag=B.magnitude;K.length=B.magnitude;K.len=B.magnitude;K.mul=K.multiply;var F=class E extends Float64Array{constructor(...e){switch(e.length){case 2:{let t=e[0];typeof t==\"number\"?super([t,e[1]]):super(t,e[1],2);break}case 1:{let t=e[0];t===void 0?super(2):typeof t==\"number\"?super([t,t]):super(t,0,2);break}default:super(2);break}}get x(){return this[0]}set x(e){this[0]=e}get y(){return this[1]}set y(e){this[1]=e}get r(){return this[0]}set r(e){this[0]=e}get g(){return this[1]}set g(e){this[1]=e}get magnitude(){return Math.hypot(this[0],this[1])}get mag(){return this.magnitude}get squaredMagnitude(){let e=this[0],t=this[1];return e*e+t*t}get sqrMag(){return this.squaredMagnitude}get str(){return E.str(this)}copy(e){return this.set(e),this}add(e){return this[0]+=e[0],this[1]+=e[1],this}subtract(e){return this[0]-=e[0],this[1]-=e[1],this}sub(e){return this}multiply(e){return this[0]*=e[0],this[1]*=e[1],this}mul(e){return this}divide(e){return this[0]/=e[0],this[1]/=e[1],this}div(e){return this}scale(e){return this[0]*=e,this[1]*=e,this}scaleAndAdd(e,t){return this[0]+=e[0]*t,this[1]+=e[1]*t,this}distance(e){return E.distance(this,e)}dist(e){return 0}squaredDistance(e){return E.squaredDistance(this,e)}sqrDist(e){return 0}negate(){return this[0]*=-1,this[1]*=-1,this}invert(){return this[0]=1/this[0],this[1]=1/this[1],this}abs(){return this[0]=Math.abs(this[0]),this[1]=Math.abs(this[1]),this}dot(e){return this[0]*e[0]+this[1]*e[1]}normalize(){return E.normalize(this,this)}static get BYTE_LENGTH(){return 2*Float64Array.BYTES_PER_ELEMENT}static create(){return new E}static clone(e){return new E(e)}static fromValues(e,t){return new E(e,t)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e}static set(e,t,n){return e[0]=t,e[1]=n,e}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e}static subtract(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e}static sub(e,t,n){return e}static multiply(e,t,n){return e[0]=t[0]*n[0],e[1]=t[1]*n[1],e}static mul(e,t,n){return e}static divide(e,t,n){return e[0]=t[0]/n[0],e[1]=t[1]/n[1],e}static div(e,t,n){return e}static ceil(e,t){return e[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e}static floor(e,t){return e[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e}static min(e,t,n){return e[0]=Math.min(t[0],n[0]),e[1]=Math.min(t[1],n[1]),e}static max(e,t,n){return e[0]=Math.max(t[0],n[0]),e[1]=Math.max(t[1],n[1]),e}static round(e,t){return e[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e}static scale(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e}static scaleAndAdd(e,t,n,s){return e[0]=t[0]+n[0]*s,e[1]=t[1]+n[1]*s,e}static distance(e,t){return Math.hypot(t[0]-e[0],t[1]-e[1])}static dist(e,t){return 0}static squaredDistance(e,t){let n=t[0]-e[0],s=t[1]-e[1];return n*n+s*s}static sqrDist(e,t){return 0}static magnitude(e){let t=e[0],n=e[1];return Math.sqrt(t*t+n*n)}static mag(e){return 0}static length(e){return 0}static len(e){return 0}static squaredLength(e){let t=e[0],n=e[1];return t*t+n*n}static sqrLen(e,t){return 0}static negate(e,t){return e[0]=-t[0],e[1]=-t[1],e}static inverse(e,t){return e[0]=1/t[0],e[1]=1/t[1],e}static abs(e,t){return e[0]=Math.abs(t[0]),e[1]=Math.abs(t[1]),e}static normalize(e,t){let n=t[0],s=t[1],r=n*n+s*s;return r>0&&(r=1/Math.sqrt(r)),e[0]=t[0]*r,e[1]=t[1]*r,e}static dot(e,t){return e[0]*t[0]+e[1]*t[1]}static cross(e,t,n){let s=t[0]*n[1]-t[1]*n[0];return e[0]=e[1]=0,e[2]=s,e}static lerp(e,t,n,s){let r=t[0],a=t[1];return e[0]=r+s*(n[0]-r),e[1]=a+s*(n[1]-a),e}static transformMat2(e,t,n){let s=t[0],r=t[1];return e[0]=n[0]*s+n[2]*r,e[1]=n[1]*s+n[3]*r,e}static transformMat2d(e,t,n){let s=t[0],r=t[1];return e[0]=n[0]*s+n[2]*r+n[4],e[1]=n[1]*s+n[3]*r+n[5],e}static transformMat3(e,t,n){let s=t[0],r=t[1];return e[0]=n[0]*s+n[3]*r+n[6],e[1]=n[1]*s+n[4]*r+n[7],e}static transformMat4(e,t,n){let s=t[0],r=t[1];return e[0]=n[0]*s+n[4]*r+n[12],e[1]=n[1]*s+n[5]*r+n[13],e}static rotate(e,t,n,s){let r=t[0]-n[0],a=t[1]-n[1],i=Math.sin(s),c=Math.cos(s);return e[0]=r*c-a*i+n[0],e[1]=r*i+a*c+n[1],e}static angle(e,t){let n=e[0],s=e[1],r=t[0],a=t[1],i=Math.sqrt(n*n+s*s)*Math.sqrt(r*r+a*a),c=i&&(n*r+s*a)/i;return Math.acos(Math.min(Math.max(c,-1),1))}static zero(e){return e[0]=0,e[1]=0,e}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]}static equals(e,t){let n=e[0],s=e[1],r=t[0],a=t[1];return Math.abs(n-r)<=1e-6*Math.max(1,Math.abs(n),Math.abs(r))&&Math.abs(s-a)<=1e-6*Math.max(1,Math.abs(s),Math.abs(a))}static str(e){return`Vec2(${e.join(\", \")})`}};F.prototype.sub=F.prototype.subtract;F.prototype.mul=F.prototype.multiply;F.prototype.div=F.prototype.divide;F.prototype.dist=F.prototype.distance;F.prototype.sqrDist=F.prototype.squaredDistance;F.sub=F.subtract;F.mul=F.multiply;F.div=F.divide;F.dist=F.distance;F.sqrDist=F.squaredDistance;F.sqrLen=F.squaredLength;F.mag=F.magnitude;F.length=F.magnitude;F.len=F.magnitude;var me=!1;function _e(){if(me)return;let E=[\"xx\",\"xy\",\"yx\",\"yy\",\"xxx\",\"xxy\",\"xyx\",\"xyy\",\"yxx\",\"yxy\",\"yyx\",\"yyy\",\"xxxx\",\"xxxy\",\"xxyx\",\"xxyy\",\"xyxx\",\"xyxy\",\"xyyx\",\"xyyy\",\"yxxx\",\"yxxy\",\"yxyx\",\"yxyy\",\"yyxx\",\"yyxy\",\"yyyx\",\"yyyy\",\"rr\",\"rg\",\"gr\",\"gg\",\"rrr\",\"rrg\",\"rgr\",\"rgg\",\"grr\",\"grg\",\"ggr\",\"ggg\",\"rrrr\",\"rrrg\",\"rrgr\",\"rrgg\",\"rgrr\",\"rgrg\",\"rggr\",\"rggg\",\"grrr\",\"grrg\",\"grgr\",\"grgg\",\"ggrr\",\"ggrg\",\"gggr\",\"gggg\"],e=[\"xz\",\"yz\",\"zx\",\"zy\",\"zz\",\"xxz\",\"xyz\",\"xzx\",\"xzy\",\"xzz\",\"yxz\",\"yyz\",\"yzx\",\"yzy\",\"yzz\",\"zxx\",\"zxy\",\"zxz\",\"zyx\",\"zyy\",\"zyz\",\"zzx\",\"zzy\",\"zzz\",\"xxxz\",\"xxyz\",\"xxzx\",\"xxzy\",\"xxzz\",\"xyxz\",\"xyyz\",\"xyzx\",\"xyzy\",\"xyzz\",\"xzxx\",\"xzxy\",\"xzxz\",\"xzyx\",\"xzyy\",\"xzyz\",\"xzzx\",\"xzzy\",\"xzzz\",\"yxxz\",\"yxyz\",\"yxzx\",\"yxzy\",\"yxzz\",\"yyxz\",\"yyyz\",\"yyzx\",\"yyzy\",\"yyzz\",\"yzxx\",\"yzxy\",\"yzxz\",\"yzyx\",\"yzyy\",\"yzyz\",\"yzzx\",\"yzzy\",\"yzzz\",\"zxxx\",\"zxxy\",\"zxxz\",\"zxyx\",\"zxyy\",\"zxyz\",\"zxzx\",\"zxzy\",\"zxzz\",\"zyxx\",\"zyxy\",\"zyxz\",\"zyyx\",\"zyyy\",\"zyyz\",\"zyzx\",\"zyzy\",\"zyzz\",\"zzxx\",\"zzxy\",\"zzxz\",\"zzyx\",\"zzyy\",\"zzyz\",\"zzzx\",\"zzzy\",\"zzzz\",\"rb\",\"gb\",\"br\",\"bg\",\"bb\",\"rrb\",\"rgb\",\"rbr\",\"rbg\",\"rbb\",\"grb\",\"ggb\",\"gbr\",\"gbg\",\"gbb\",\"brr\",\"brg\",\"brb\",\"bgr\",\"bgg\",\"bgb\",\"bbr\",\"bbg\",\"bbb\",\"rrrb\",\"rrgb\",\"rrbr\",\"rrbg\",\"rrbb\",\"rgrb\",\"rggb\",\"rgbr\",\"rgbg\",\"rgbb\",\"rbrr\",\"rbrg\",\"rbrb\",\"rbgr\",\"rbgg\",\"rbgb\",\"rbbr\",\"rbbg\",\"rbbb\",\"grrb\",\"grgb\",\"grbr\",\"grbg\",\"grbb\",\"ggrb\",\"gggb\",\"ggbr\",\"ggbg\",\"ggbb\",\"gbrr\",\"gbrg\",\"gbrb\",\"gbgr\",\"gbgg\",\"gbgb\",\"gbbr\",\"gbbg\",\"gbbb\",\"brrr\",\"brrg\",\"brrb\",\"brgr\",\"brgg\",\"brgb\",\"brbr\",\"brbg\",\"brbb\",\"bgrr\",\"bgrg\",\"bgrb\",\"bggr\",\"bggg\",\"bggb\",\"bgbr\",\"bgbg\",\"bgbb\",\"bbrr\",\"bbrg\",\"bbrb\",\"bbgr\",\"bbgg\",\"bbgb\",\"bbbr\",\"bbbg\",\"bbbb\"],t=[\"xw\",\"yw\",\"zw\",\"wx\",\"wy\",\"wz\",\"ww\",\"xxw\",\"xyw\",\"xzw\",\"xwx\",\"xwy\",\"xwz\",\"xww\",\"yxw\",\"yyw\",\"yzw\",\"ywx\",\"ywy\",\"ywz\",\"yww\",\"zxw\",\"zyw\",\"zzw\",\"zwx\",\"zwy\",\"zwz\",\"zww\",\"wxx\",\"wxy\",\"wxz\",\"wxw\",\"wyx\",\"wyy\",\"wyz\",\"wyw\",\"wzx\",\"wzy\",\"wzz\",\"wzw\",\"wwx\",\"wwy\",\"wwz\",\"www\",\"xxxw\",\"xxyw\",\"xxzw\",\"xxwx\",\"xxwy\",\"xxwz\",\"xxww\",\"xyxw\",\"xyyw\",\"xyzw\",\"xywx\",\"xywy\",\"xywz\",\"xyww\",\"xzxw\",\"xzyw\",\"xzzw\",\"xzwx\",\"xzwy\",\"xzwz\",\"xzww\",\"xwxx\",\"xwxy\",\"xwxz\",\"xwxw\",\"xwyx\",\"xwyy\",\"xwyz\",\"xwyw\",\"xwzx\",\"xwzy\",\"xwzz\",\"xwzw\",\"xwwx\",\"xwwy\",\"xwwz\",\"xwww\",\"yxxw\",\"yxyw\",\"yxzw\",\"yxwx\",\"yxwy\",\"yxwz\",\"yxww\",\"yyxw\",\"yyyw\",\"yyzw\",\"yywx\",\"yywy\",\"yywz\",\"yyww\",\"yzxw\",\"yzyw\",\"yzzw\",\"yzwx\",\"yzwy\",\"yzwz\",\"yzww\",\"ywxx\",\"ywxy\",\"ywxz\",\"ywxw\",\"ywyx\",\"ywyy\",\"ywyz\",\"ywyw\",\"ywzx\",\"ywzy\",\"ywzz\",\"ywzw\",\"ywwx\",\"ywwy\",\"ywwz\",\"ywww\",\"zxxw\",\"zxyw\",\"zxzw\",\"zxwx\",\"zxwy\",\"zxwz\",\"zxww\",\"zyxw\",\"zyyw\",\"zyzw\",\"zywx\",\"zywy\",\"zywz\",\"zyww\",\"zzxw\",\"zzyw\",\"zzzw\",\"zzwx\",\"zzwy\",\"zzwz\",\"zzww\",\"zwxx\",\"zwxy\",\"zwxz\",\"zwxw\",\"zwyx\",\"zwyy\",\"zwyz\",\"zwyw\",\"zwzx\",\"zwzy\",\"zwzz\",\"zwzw\",\"zwwx\",\"zwwy\",\"zwwz\",\"zwww\",\"wxxx\",\"wxxy\",\"wxxz\",\"wxxw\",\"wxyx\",\"wxyy\",\"wxyz\",\"wxyw\",\"wxzx\",\"wxzy\",\"wxzz\",\"wxzw\",\"wxwx\",\"wxwy\",\"wxwz\",\"wxww\",\"wyxx\",\"wyxy\",\"wyxz\",\"wyxw\",\"wyyx\",\"wyyy\",\"wyyz\",\"wyyw\",\"wyzx\",\"wyzy\",\"wyzz\",\"wyzw\",\"wywx\",\"wywy\",\"wywz\",\"wyww\",\"wzxx\",\"wzxy\",\"wzxz\",\"wzxw\",\"wzyx\",\"wzyy\",\"wzyz\",\"wzyw\",\"wzzx\",\"wzzy\",\"wzzz\",\"wzzw\",\"wzwx\",\"wzwy\",\"wzwz\",\"wzww\",\"wwxx\",\"wwxy\",\"wwxz\",\"wwxw\",\"wwyx\",\"wwyy\",\"wwyz\",\"wwyw\",\"wwzx\",\"wwzy\",\"wwzz\",\"wwzw\",\"wwwx\",\"wwwy\",\"wwwz\",\"wwww\",\"ra\",\"ga\",\"ba\",\"ar\",\"ag\",\"ab\",\"aa\",\"rra\",\"rga\",\"rba\",\"rar\",\"rag\",\"rab\",\"raa\",\"gra\",\"gga\",\"gba\",\"gar\",\"gag\",\"gab\",\"gaa\",\"bra\",\"bga\",\"bba\",\"bar\",\"bag\",\"bab\",\"baa\",\"arr\",\"arg\",\"arb\",\"ara\",\"agr\",\"agg\",\"agb\",\"aga\",\"abr\",\"abg\",\"abb\",\"aba\",\"aar\",\"aag\",\"aab\",\"aaa\",\"rrra\",\"rrga\",\"rrba\",\"rrar\",\"rrag\",\"rrab\",\"rraa\",\"rgra\",\"rgga\",\"rgba\",\"rgar\",\"rgag\",\"rgab\",\"rgaa\",\"rbra\",\"rbga\",\"rbba\",\"rbar\",\"rbag\",\"rbab\",\"rbaa\",\"rarr\",\"rarg\",\"rarb\",\"rara\",\"ragr\",\"ragg\",\"ragb\",\"raga\",\"rabr\",\"rabg\",\"rabb\",\"raba\",\"raar\",\"raag\",\"raab\",\"raaa\",\"grra\",\"grga\",\"grba\",\"grar\",\"grag\",\"grab\",\"graa\",\"ggra\",\"ggga\",\"ggba\",\"ggar\",\"ggag\",\"ggab\",\"ggaa\",\"gbra\",\"gbga\",\"gbba\",\"gbar\",\"gbag\",\"gbab\",\"gbaa\",\"garr\",\"garg\",\"garb\",\"gara\",\"gagr\",\"gagg\",\"gagb\",\"gaga\",\"gabr\",\"gabg\",\"gabb\",\"gaba\",\"gaar\",\"gaag\",\"gaab\",\"gaaa\",\"brra\",\"brga\",\"brba\",\"brar\",\"brag\",\"brab\",\"braa\",\"bgra\",\"bgga\",\"bgba\",\"bgar\",\"bgag\",\"bgab\",\"bgaa\",\"bbra\",\"bbga\",\"bbba\",\"bbar\",\"bbag\",\"bbab\",\"bbaa\",\"barr\",\"barg\",\"barb\",\"bara\",\"bagr\",\"bagg\",\"bagb\",\"baga\",\"babr\",\"babg\",\"babb\",\"baba\",\"baar\",\"baag\",\"baab\",\"baaa\",\"arrr\",\"arrg\",\"arrb\",\"arra\",\"argr\",\"argg\",\"argb\",\"arga\",\"arbr\",\"arbg\",\"arbb\",\"arba\",\"arar\",\"arag\",\"arab\",\"araa\",\"agrr\",\"agrg\",\"agrb\",\"agra\",\"aggr\",\"aggg\",\"aggb\",\"agga\",\"agbr\",\"agbg\",\"agbb\",\"agba\",\"agar\",\"agag\",\"agab\",\"agaa\",\"abrr\",\"abrg\",\"abrb\",\"abra\",\"abgr\",\"abgg\",\"abgb\",\"abga\",\"abbr\",\"abbg\",\"abbb\",\"abba\",\"abar\",\"abag\",\"abab\",\"abaa\",\"aarr\",\"aarg\",\"aarb\",\"aara\",\"aagr\",\"aagg\",\"aagb\",\"aaga\",\"aabr\",\"aabg\",\"aabb\",\"aaba\",\"aaar\",\"aaag\",\"aaab\",\"aaaa\"],n={x:0,r:0,y:1,g:1,z:2,b:2,w:3,a:3};function s(r){switch(r.length){case 2:return function(){return new F(this[n[r[0]]],this[n[r[1]]])};case 3:return function(){return new q(this[n[r[0]]],this[n[r[1]]],this[n[r[2]]])};case 4:return function(){return new Q(this[n[r[0]]],this[n[r[1]]],this[n[r[2]]],this[n[r[3]]])}}throw new Error(\"Illegal swizzle length\")}for(let r of E){let a=s(r);Object.defineProperty(F.prototype,r,{get:a}),Object.defineProperty(q.prototype,r,{get:a}),Object.defineProperty(Q.prototype,r,{get:a})}for(let r of e){let a=s(r);Object.defineProperty(q.prototype,r,{get:a}),Object.defineProperty(Q.prototype,r,{get:a})}for(let r of t){let a=s(r);Object.defineProperty(Q.prototype,r,{get:a})}me=!0}var Re=Math.PI/180,ge=180/Math.PI;function tt(E){return E*ge}function nt(E){return E*Re}export{_e as EnableSwizzlesF64,u as Mat2,_ as Mat2d,J as Mat3,G as Mat4,B as Quat,K as Quat2,F as Vec2,q as Vec3,Q as Vec4,tt as toDegree,nt as toRadian};\n//# sourceMappingURL=gl-matrix-f64.min.js.map\n"],"names":["ee","C","_Float64Array","_this","_classCallCheck","_len","arguments","length","e","Array","_key","_callSuper","t","w","_assertThisInitialized","_inherits","_createClass","key","get","str","value","copy","set","identity","multiply","mul","transpose","invert","scale","rotate","Float64Array","BYTES_PER_ELEMENT","create","clone","fromValues","_len2","_key2","_construct","undefined","n","s","r","a","i","adjoint","determinant","add","subtract","sub","c","y","d","l","Math","sin","cos","fromRotation","fromScaling","frob","sqrt","multiplyScalar","multiplyScalarAndAdd","LDU","exactEquals","equals","abs","max","concat","join","_wrapNativeSuper","WeakMap","Z","u","prototype"],"mappings":"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}