// gl-matrix - v4.0.0-beta.4 - A high performance matrix and vector library.
// @author Brandon Jones
// @author Colin MacKenzie IV
// @license MIT (https://github.com/toji/gl-matrix/blob/master/LICENSE.md)
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.glMatrixF64 = {}));
})(this, (function (exports) { 'use strict';

  function _assertThisInitialized(e) {
    if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return e;
  }
  function _callSuper(t, o, e) {
    return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
  }
  function _classCallCheck(a, n) {
    if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
  }
  function _construct(t, e, r) {
    if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);
    var o = [null];
    o.push.apply(o, e);
    var p = new (t.bind.apply(t, o))();
    return r && _setPrototypeOf(p, r.prototype), p;
  }
  function _defineProperties(e, r) {
    for (var t = 0; t < r.length; t++) {
      var o = r[t];
      o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);
    }
  }
  function _createClass(e, r, t) {
    return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
      writable: false
    }), e;
  }
  function _get() {
    return _get = "undefined" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function (e, t, r) {
      var p = _superPropBase(e, t);
      if (p) {
        var n = Object.getOwnPropertyDescriptor(p, t);
        return n.get ? n.get.call(arguments.length < 3 ? e : r) : n.value;
      }
    }, _get.apply(null, arguments);
  }
  function _getPrototypeOf(t) {
    return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {
      return t.__proto__ || Object.getPrototypeOf(t);
    }, _getPrototypeOf(t);
  }
  function _inherits(t, e) {
    if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
    t.prototype = Object.create(e && e.prototype, {
      constructor: {
        value: t,
        writable: true,
        configurable: true
      }
    }), Object.defineProperty(t, "prototype", {
      writable: false
    }), e && _setPrototypeOf(t, e);
  }
  function _isNativeFunction(t) {
    try {
      return -1 !== Function.toString.call(t).indexOf("[native code]");
    } catch (n) {
      return "function" == typeof t;
    }
  }
  function _isNativeReflectConstruct() {
    try {
      var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    } catch (t) {}
    return (_isNativeReflectConstruct = function () {
      return !!t;
    })();
  }
  function _possibleConstructorReturn(t, e) {
    if (e && ("object" == typeof e || "function" == typeof e)) return e;
    if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
    return _assertThisInitialized(t);
  }
  function _setPrototypeOf(t, e) {
    return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {
      return t.__proto__ = e, t;
    }, _setPrototypeOf(t, e);
  }
  function _superPropBase(t, o) {
    for (; !{}.hasOwnProperty.call(t, o) && null !== (t = _getPrototypeOf(t)););
    return t;
  }
  function _superPropGet(t, o, e, r) {
    var p = _get(_getPrototypeOf(t.prototype ), o, e);
    return "function" == typeof p ? function (t) {
      return p.apply(e, t);
    } : p;
  }
  function _toPrimitive(t, r) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r);
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (String )(t);
  }
  function _toPropertyKey(t) {
    var i = _toPrimitive(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _wrapNativeSuper(t) {
    var r = "function" == typeof Map ? new Map() : void 0;
    return _wrapNativeSuper = function (t) {
      if (null === t || !_isNativeFunction(t)) return t;
      if ("function" != typeof t) throw new TypeError("Super expression must either be null or a function");
      if (void 0 !== r) {
        if (r.has(t)) return r.get(t);
        r.set(t, Wrapper);
      }
      function Wrapper() {
        return _construct(t, arguments, _getPrototypeOf(this).constructor);
      }
      return Wrapper.prototype = Object.create(t.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      }), _setPrototypeOf(Wrapper, t);
    }, _wrapNativeSuper(t);
  }

  // gl-matrix - v4.0.0-beta.4 - A high performance matrix and vector library.
  // @author Brandon Jones
  // @author Colin MacKenzie IV
  // @license MIT (https://github.com/toji/gl-matrix/blob/master/LICENSE.md)
  var me = function me(w) {
    throw TypeError(w);
  };
  var oe = function oe(w, e, t) {
    return e.has(w) || me("Cannot " + t);
  };
  var f = function f(w, e, t) {
      return oe(w, e, "read from private field"), t ? t.call(w) : e.get(w);
    },
    G = function G(w, e, t) {
      return e.has(w) ? me("Cannot add the same private member more than once") : e instanceof WeakSet ? e.add(w) : e.set(w, t);
    };
  var ee,
    $ = /*#__PURE__*/function (_Float64Array) {
      function $() {
        var _this;
        _classCallCheck(this, $);
        for (var _len = arguments.length, e = new Array(_len), _key = 0; _key < _len; _key++) {
          e[_key] = arguments[_key];
        }
        switch (e.length) {
          case 4:
            _this = _callSuper(this, $, [e]);
            break;
          case 2:
            _this = _callSuper(this, $, [e[0], e[1], 4]);
            break;
          case 1:
            var t = e[0];
            t === void 0 ? _this = _callSuper(this, $, [f($, ee)]) : typeof t == "number" ? _this = _callSuper(this, $, [[t, t, t, t]]) : _this = _callSuper(this, $, [t, 0, 4]);
            break;
          default:
            _this = _callSuper(this, $, [f($, ee)]);
            break;
        }
        return _assertThisInitialized(_this);
      }
      _inherits($, _Float64Array);
      return _createClass($, [{
        key: "str",
        get: function get() {
          return $.str(this);
        }
      }, {
        key: "copy",
        value: function copy(e) {
          return this.set(e), this;
        }
      }, {
        key: "identity",
        value: function identity() {
          return this.set(f($, ee)), this;
        }
      }, {
        key: "multiply",
        value: function multiply(e) {
          return $.multiply(this, this, e);
        }
      }, {
        key: "mul",
        value: function mul(e) {
          return this;
        }
      }, {
        key: "transpose",
        value: function transpose() {
          return $.transpose(this, this);
        }
      }, {
        key: "invert",
        value: function invert() {
          return $.invert(this, this);
        }
      }, {
        key: "scale",
        value: function scale(e) {
          return $.scale(this, this, e);
        }
      }, {
        key: "rotate",
        value: function rotate(e) {
          return $.rotate(this, this, e);
        }
      }], [{
        key: "BYTE_LENGTH",
        get: function get() {
          return 4 * Float64Array.BYTES_PER_ELEMENT;
        }
      }, {
        key: "create",
        value: function create() {
          return new $();
        }
      }, {
        key: "clone",
        value: function clone(e) {
          return new $(e);
        }
      }, {
        key: "copy",
        value: function copy(e, t) {
          return e[0] = t[0], e[1] = t[1], e[2] = t[2], e[3] = t[3], e;
        }
      }, {
        key: "fromValues",
        value: function fromValues() {
          for (var _len2 = arguments.length, e = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            e[_key2] = arguments[_key2];
          }
          return _construct($, e);
        }
      }, {
        key: "set",
        value: function set(e) {
          return e[0] = arguments.length <= 1 ? undefined : arguments[1], e[1] = arguments.length <= 2 ? undefined : arguments[2], e[2] = arguments.length <= 3 ? undefined : arguments[3], e[3] = arguments.length <= 4 ? undefined : arguments[4], e;
        }
      }, {
        key: "identity",
        value: function identity(e) {
          return e[0] = 1, e[1] = 0, e[2] = 0, e[3] = 1, e;
        }
      }, {
        key: "transpose",
        value: function transpose(e, t) {
          if (e === t) {
            var n = t[1];
            e[1] = t[2], e[2] = n;
          } else e[0] = t[0], e[1] = t[2], e[2] = t[1], e[3] = t[3];
          return e;
        }
      }, {
        key: "invert",
        value: function invert(e, t) {
          var n = t[0],
            s = t[1],
            r = t[2],
            i = t[3],
            a = n * i - r * s;
          return a ? (a = 1 / a, e[0] = i * a, e[1] = -s * a, e[2] = -r * a, e[3] = n * a, e) : null;
        }
      }, {
        key: "adjoint",
        value: function adjoint(e, t) {
          var n = t[0];
          return e[0] = t[3], e[1] = -t[1], e[2] = -t[2], e[3] = n, e;
        }
      }, {
        key: "determinant",
        value: function determinant(e) {
          return e[0] * e[3] - e[2] * e[1];
        }
      }, {
        key: "add",
        value: function add(e, t, n) {
          return e[0] = t[0] + n[0], e[1] = t[1] + n[1], e[2] = t[2] + n[2], e[3] = t[3] + n[3], e;
        }
      }, {
        key: "subtract",
        value: function subtract(e, t, n) {
          return e[0] = t[0] - n[0], e[1] = t[1] - n[1], e[2] = t[2] - n[2], e[3] = t[3] - n[3], e;
        }
      }, {
        key: "sub",
        value: function sub(e, t, n) {
          return e;
        }
      }, {
        key: "multiply",
        value: function multiply(e, t, n) {
          var s = t[0],
            r = t[1],
            i = t[2],
            a = t[3],
            c = n[0],
            d = n[1],
            l = n[2],
            L = n[3];
          return e[0] = s * c + i * d, e[1] = r * c + a * d, e[2] = s * l + i * L, e[3] = r * l + a * L, e;
        }
      }, {
        key: "mul",
        value: function mul(e, t, n) {
          return e;
        }
      }, {
        key: "rotate",
        value: function rotate(e, t, n) {
          var s = t[0],
            r = t[1],
            i = t[2],
            a = t[3],
            c = Math.sin(n),
            d = Math.cos(n);
          return e[0] = s * d + i * c, e[1] = r * d + a * c, e[2] = s * -c + i * d, e[3] = r * -c + a * d, e;
        }
      }, {
        key: "scale",
        value: function scale(e, t, n) {
          var s = t[0],
            r = t[1],
            i = t[2],
            a = t[3],
            c = n[0],
            d = n[1];
          return e[0] = s * c, e[1] = r * c, e[2] = i * d, e[3] = a * d, e;
        }
      }, {
        key: "fromRotation",
        value: function fromRotation(e, t) {
          var n = Math.sin(t),
            s = Math.cos(t);
          return e[0] = s, e[1] = n, e[2] = -n, e[3] = s, e;
        }
      }, {
        key: "fromScaling",
        value: function fromScaling(e, t) {
          return e[0] = t[0], e[1] = 0, e[2] = 0, e[3] = t[1], e;
        }
      }, {
        key: "frob",
        value: function frob(e) {
          return Math.sqrt(e[0] * e[0] + e[1] * e[1] + e[2] * e[2] + e[3] * e[3]);
        }
      }, {
        key: "multiplyScalar",
        value: function multiplyScalar(e, t, n) {
          return e[0] = t[0] * n, e[1] = t[1] * n, e[2] = t[2] * n, e[3] = t[3] * n, e;
        }
      }, {
        key: "multiplyScalarAndAdd",
        value: function multiplyScalarAndAdd(e, t, n, s) {
          return e[0] = t[0] + n[0] * s, e[1] = t[1] + n[1] * s, e[2] = t[2] + n[2] * s, e[3] = t[3] + n[3] * s, e;
        }
      }, {
        key: "LDU",
        value: function LDU(e, t, n, s) {
          return e[2] = s[2] / s[0], n[0] = s[0], n[1] = s[1], n[3] = s[3] - e[2] * n[1], [e, t, n];
        }
      }, {
        key: "exactEquals",
        value: function exactEquals(e, t) {
          return e[0] === t[0] && e[1] === t[1] && e[2] === t[2] && e[3] === t[3];
        }
      }, {
        key: "equals",
        value: function equals(e, t) {
          var n = e[0],
            s = e[1],
            r = e[2],
            i = e[3],
            a = t[0],
            c = t[1],
            d = t[2],
            l = t[3];
          return Math.abs(n - a) <= 1e-6 * Math.max(1, Math.abs(n), Math.abs(a)) && Math.abs(s - c) <= 1e-6 * Math.max(1, Math.abs(s), Math.abs(c)) && Math.abs(r - d) <= 1e-6 * Math.max(1, Math.abs(r), Math.abs(d)) && Math.abs(i - l) <= 1e-6 * Math.max(1, Math.abs(i), Math.abs(l));
        }
      }, {
        key: "str",
        value: function str(e) {
          return "Mat2(".concat(e.join(", "), ")");
        }
      }]);
    }(/*#__PURE__*/_wrapNativeSuper(Float64Array));
  ee = new WeakMap(), G($, ee, new Float64Array([1, 0, 0, 1]));
  var u = $;
  u.prototype.mul = u.prototype.multiply;
  u.mul = u.multiply;
  u.sub = u.subtract;
  var te,
    H = /*#__PURE__*/function (_Float64Array2) {
      function H() {
        var _this2;
        _classCallCheck(this, H);
        for (var _len3 = arguments.length, e = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          e[_key3] = arguments[_key3];
        }
        switch (e.length) {
          case 6:
            _this2 = _callSuper(this, H, [e]);
            break;
          case 2:
            _this2 = _callSuper(this, H, [e[0], e[1], 6]);
            break;
          case 1:
            var t = e[0];
            t === void 0 ? _this2 = _callSuper(this, H, [f(H, te)]) : typeof t == "number" ? _this2 = _callSuper(this, H, [[t, t, t, t, t, t]]) : _this2 = _callSuper(this, H, [t, 0, 6]);
            break;
          default:
            _this2 = _callSuper(this, H, [f(H, te)]);
            break;
        }
        return _assertThisInitialized(_this2);
      }
      _inherits(H, _Float64Array2);
      return _createClass(H, [{
        key: "str",
        get: function get() {
          return H.str(this);
        }
      }, {
        key: "copy",
        value: function copy(e) {
          return this.set(e), this;
        }
      }, {
        key: "identity",
        value: function identity() {
          return this.set(f(H, te)), this;
        }
      }, {
        key: "multiply",
        value: function multiply(e) {
          return H.multiply(this, this, e);
        }
      }, {
        key: "mul",
        value: function mul(e) {
          return this;
        }
      }, {
        key: "translate",
        value: function translate(e) {
          return H.translate(this, this, e);
        }
      }, {
        key: "rotate",
        value: function rotate(e) {
          return H.rotate(this, this, e);
        }
      }, {
        key: "scale",
        value: function scale(e) {
          return H.scale(this, this, e);
        }
      }], [{
        key: "BYTE_LENGTH",
        get: function get() {
          return 6 * Float64Array.BYTES_PER_ELEMENT;
        }
      }, {
        key: "create",
        value: function create() {
          return new H();
        }
      }, {
        key: "clone",
        value: function clone(e) {
          return new H(e);
        }
      }, {
        key: "copy",
        value: function copy(e, t) {
          return e[0] = t[0], e[1] = t[1], e[2] = t[2], e[3] = t[3], e[4] = t[4], e[5] = t[5], e;
        }
      }, {
        key: "fromValues",
        value: function fromValues() {
          for (var _len4 = arguments.length, e = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            e[_key4] = arguments[_key4];
          }
          return _construct(H, e);
        }
      }, {
        key: "set",
        value: function set(e) {
          return e[0] = arguments.length <= 1 ? undefined : arguments[1], e[1] = arguments.length <= 2 ? undefined : arguments[2], e[2] = arguments.length <= 3 ? undefined : arguments[3], e[3] = arguments.length <= 4 ? undefined : arguments[4], e[4] = arguments.length <= 5 ? undefined : arguments[5], e[5] = arguments.length <= 6 ? undefined : arguments[6], e;
        }
      }, {
        key: "identity",
        value: function identity(e) {
          return e[0] = 1, e[1] = 0, e[2] = 0, e[3] = 1, e[4] = 0, e[5] = 0, e;
        }
      }, {
        key: "invert",
        value: function invert(e, t) {
          var n = t[0],
            s = t[1],
            r = t[2],
            i = t[3],
            a = t[4],
            c = t[5],
            d = n * i - s * r;
          return d ? (d = 1 / d, e[0] = i * d, e[1] = -s * d, e[2] = -r * d, e[3] = n * d, e[4] = (r * c - i * a) * d, e[5] = (s * a - n * c) * d, e) : null;
        }
      }, {
        key: "determinant",
        value: function determinant(e) {
          return e[0] * e[3] - e[1] * e[2];
        }
      }, {
        key: "add",
        value: function add(e, t, n) {
          return e[0] = t[0] + n[0], e[1] = t[1] + n[1], e[2] = t[2] + n[2], e[3] = t[3] + n[3], e[4] = t[4] + n[4], e[5] = t[5] + n[5], e;
        }
      }, {
        key: "subtract",
        value: function subtract(e, t, n) {
          return e[0] = t[0] - n[0], e[1] = t[1] - n[1], e[2] = t[2] - n[2], e[3] = t[3] - n[3], e[4] = t[4] - n[4], e[5] = t[5] - n[5], e;
        }
      }, {
        key: "sub",
        value: function sub(e, t, n) {
          return e;
        }
      }, {
        key: "multiply",
        value: function multiply(e, t, n) {
          var s = t[0],
            r = t[1],
            i = t[2],
            a = t[3],
            c = t[4],
            d = t[5],
            l = n[0],
            L = n[1],
            h = n[2],
            k = n[3],
            y = n[4],
            M = n[5];
          return e[0] = s * l + i * L, e[1] = r * l + a * L, e[2] = s * h + i * k, e[3] = r * h + a * k, e[4] = s * y + i * M + c, e[5] = r * y + a * M + d, e;
        }
      }, {
        key: "mul",
        value: function mul(e, t, n) {
          return e;
        }
      }, {
        key: "translate",
        value: function translate(e, t, n) {
          var s = t[0],
            r = t[1],
            i = t[2],
            a = t[3],
            c = t[4],
            d = t[5],
            l = n[0],
            L = n[1];
          return e[0] = s, e[1] = r, e[2] = i, e[3] = a, e[4] = s * l + i * L + c, e[5] = r * l + a * L + d, e;
        }
      }, {
        key: "rotate",
        value: function rotate(e, t, n) {
          var s = t[0],
            r = t[1],
            i = t[2],
            a = t[3],
            c = t[4],
            d = t[5],
            l = Math.sin(n),
            L = Math.cos(n);
          return e[0] = s * L + i * l, e[1] = r * L + a * l, e[2] = s * -l + i * L, e[3] = r * -l + a * L, e[4] = c, e[5] = d, e;
        }
      }, {
        key: "scale",
        value: function scale(e, t, n) {
          var s = t[0],
            r = t[1],
            i = t[2],
            a = t[3],
            c = t[4],
            d = t[5],
            l = n[0],
            L = n[1];
          return e[0] = s * l, e[1] = r * l, e[2] = i * L, e[3] = a * L, e[4] = c, e[5] = d, e;
        }
      }, {
        key: "fromTranslation",
        value: function fromTranslation(e, t) {
          return e[0] = 1, e[1] = 0, e[2] = 0, e[3] = 1, e[4] = t[0], e[5] = t[1], e;
        }
      }, {
        key: "fromRotation",
        value: function fromRotation(e, t) {
          var n = Math.sin(t),
            s = Math.cos(t);
          return e[0] = s, e[1] = n, e[2] = -n, e[3] = s, e[4] = 0, e[5] = 0, e;
        }
      }, {
        key: "fromScaling",
        value: function fromScaling(e, t) {
          return e[0] = t[0], e[1] = 0, e[2] = 0, e[3] = t[1], e[4] = 0, e[5] = 0, e;
        }
      }, {
        key: "frob",
        value: function frob(e) {
          return Math.sqrt(e[0] * e[0] + e[1] * e[1] + e[2] * e[2] + e[3] * e[3] + e[4] * e[4] + e[5] * e[5] + 1);
        }
      }, {
        key: "multiplyScalar",
        value: function multiplyScalar(e, t, n) {
          return e[0] = t[0] * n, e[1] = t[1] * n, e[2] = t[2] * n, e[3] = t[3] * n, e[4] = t[4] * n, e[5] = t[5] * n, e;
        }
      }, {
        key: "multiplyScalarAndAdd",
        value: function multiplyScalarAndAdd(e, t, n, s) {
          return e[0] = t[0] + n[0] * s, e[1] = t[1] + n[1] * s, e[2] = t[2] + n[2] * s, e[3] = t[3] + n[3] * s, e[4] = t[4] + n[4] * s, e[5] = t[5] + n[5] * s, e;
        }
      }, {
        key: "exactEquals",
        value: function exactEquals(e, t) {
          return e[0] === t[0] && e[1] === t[1] && e[2] === t[2] && e[3] === t[3] && e[4] === t[4] && e[5] === t[5];
        }
      }, {
        key: "equals",
        value: function equals(e, t) {
          var n = e[0],
            s = e[1],
            r = e[2],
            i = e[3],
            a = e[4],
            c = e[5],
            d = t[0],
            l = t[1],
            L = t[2],
            h = t[3],
            k = t[4],
            y = t[5];
          return Math.abs(n - d) <= 1e-6 * Math.max(1, Math.abs(n), Math.abs(d)) && Math.abs(s - l) <= 1e-6 * Math.max(1, Math.abs(s), Math.abs(l)) && Math.abs(r - L) <= 1e-6 * Math.max(1, Math.abs(r), Math.abs(L)) && Math.abs(i - h) <= 1e-6 * Math.max(1, Math.abs(i), Math.abs(h)) && Math.abs(a - k) <= 1e-6 * Math.max(1, Math.abs(a), Math.abs(k)) && Math.abs(c - y) <= 1e-6 * Math.max(1, Math.abs(c), Math.abs(y));
        }
      }, {
        key: "str",
        value: function str(e) {
          return "Mat2d(".concat(e.join(", "), ")");
        }
      }]);
    }(/*#__PURE__*/_wrapNativeSuper(Float64Array));
  te = new WeakMap(), G(H, te, new Float64Array([1, 0, 0, 1, 0, 0]));
  var _ = H;
  _.mul = _.multiply;
  _.sub = _.subtract;
  var ne,
    X = /*#__PURE__*/function (_Float64Array3) {
      function X() {
        var _this3;
        _classCallCheck(this, X);
        for (var _len5 = arguments.length, e = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
          e[_key5] = arguments[_key5];
        }
        switch (e.length) {
          case 9:
            _this3 = _callSuper(this, X, [e]);
            break;
          case 2:
            _this3 = _callSuper(this, X, [e[0], e[1], 9]);
            break;
          case 1:
            var t = e[0];
            t === void 0 ? _this3 = _callSuper(this, X, [f(X, ne)]) : typeof t == "number" ? _this3 = _callSuper(this, X, [[t, t, t, t, t, t, t, t, t]]) : _this3 = _callSuper(this, X, [t, 0, 9]);
            break;
          default:
            _this3 = _callSuper(this, X, [f(X, ne)]);
            break;
        }
        return _assertThisInitialized(_this3);
      }
      _inherits(X, _Float64Array3);
      return _createClass(X, [{
        key: "str",
        get: function get() {
          return X.str(this);
        }
      }, {
        key: "copy",
        value: function copy(e) {
          return this.set(e), this;
        }
      }, {
        key: "identity",
        value: function identity() {
          return this.set(f(X, ne)), this;
        }
      }, {
        key: "multiply",
        value: function multiply(e) {
          return X.multiply(this, this, e);
        }
      }, {
        key: "mul",
        value: function mul(e) {
          return this;
        }
      }, {
        key: "transpose",
        value: function transpose() {
          return X.transpose(this, this);
        }
      }, {
        key: "invert",
        value: function invert() {
          return X.invert(this, this);
        }
      }, {
        key: "translate",
        value: function translate(e) {
          return X.translate(this, this, e);
        }
      }, {
        key: "rotate",
        value: function rotate(e) {
          return X.rotate(this, this, e);
        }
      }, {
        key: "scale",
        value: function scale(e) {
          return X.scale(this, this, e);
        }
      }], [{
        key: "BYTE_LENGTH",
        get: function get() {
          return 9 * Float64Array.BYTES_PER_ELEMENT;
        }
      }, {
        key: "create",
        value: function create() {
          return new X();
        }
      }, {
        key: "clone",
        value: function clone(e) {
          return new X(e);
        }
      }, {
        key: "copy",
        value: function copy(e, t) {
          return e[0] = t[0], e[1] = t[1], e[2] = t[2], e[3] = t[3], e[4] = t[4], e[5] = t[5], e[6] = t[6], e[7] = t[7], e[8] = t[8], e;
        }
      }, {
        key: "fromValues",
        value: function fromValues() {
          for (var _len6 = arguments.length, e = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
            e[_key6] = arguments[_key6];
          }
          return _construct(X, e);
        }
      }, {
        key: "set",
        value: function set(e) {
          return e[0] = arguments.length <= 1 ? undefined : arguments[1], e[1] = arguments.length <= 2 ? undefined : arguments[2], e[2] = arguments.length <= 3 ? undefined : arguments[3], e[3] = arguments.length <= 4 ? undefined : arguments[4], e[4] = arguments.length <= 5 ? undefined : arguments[5], e[5] = arguments.length <= 6 ? undefined : arguments[6], e[6] = arguments.length <= 7 ? undefined : arguments[7], e[7] = arguments.length <= 8 ? undefined : arguments[8], e[8] = arguments.length <= 9 ? undefined : arguments[9], e;
        }
      }, {
        key: "identity",
        value: function identity(e) {
          return e[0] = 1, e[1] = 0, e[2] = 0, e[3] = 0, e[4] = 1, e[5] = 0, e[6] = 0, e[7] = 0, e[8] = 1, e;
        }
      }, {
        key: "transpose",
        value: function transpose(e, t) {
          if (e === t) {
            var n = t[1],
              s = t[2],
              r = t[5];
            e[1] = t[3], e[2] = t[6], e[3] = n, e[5] = t[7], e[6] = s, e[7] = r;
          } else e[0] = t[0], e[1] = t[3], e[2] = t[6], e[3] = t[1], e[4] = t[4], e[5] = t[7], e[6] = t[2], e[7] = t[5], e[8] = t[8];
          return e;
        }
      }, {
        key: "invert",
        value: function invert(e, t) {
          var n = t[0],
            s = t[1],
            r = t[2],
            i = t[3],
            a = t[4],
            c = t[5],
            d = t[6],
            l = t[7],
            L = t[8],
            h = L * a - c * l,
            k = -L * i + c * d,
            y = l * i - a * d,
            M = n * h + s * k + r * y;
          return M ? (M = 1 / M, e[0] = h * M, e[1] = (-L * s + r * l) * M, e[2] = (c * s - r * a) * M, e[3] = k * M, e[4] = (L * n - r * d) * M, e[5] = (-c * n + r * i) * M, e[6] = y * M, e[7] = (-l * n + s * d) * M, e[8] = (a * n - s * i) * M, e) : null;
        }
      }, {
        key: "adjoint",
        value: function adjoint(e, t) {
          var n = t[0],
            s = t[1],
            r = t[2],
            i = t[3],
            a = t[4],
            c = t[5],
            d = t[6],
            l = t[7],
            L = t[8];
          return e[0] = a * L - c * l, e[1] = r * l - s * L, e[2] = s * c - r * a, e[3] = c * d - i * L, e[4] = n * L - r * d, e[5] = r * i - n * c, e[6] = i * l - a * d, e[7] = s * d - n * l, e[8] = n * a - s * i, e;
        }
      }, {
        key: "determinant",
        value: function determinant(e) {
          var t = e[0],
            n = e[1],
            s = e[2],
            r = e[3],
            i = e[4],
            a = e[5],
            c = e[6],
            d = e[7],
            l = e[8];
          return t * (l * i - a * d) + n * (-l * r + a * c) + s * (d * r - i * c);
        }
      }, {
        key: "add",
        value: function add(e, t, n) {
          return e[0] = t[0] + n[0], e[1] = t[1] + n[1], e[2] = t[2] + n[2], e[3] = t[3] + n[3], e[4] = t[4] + n[4], e[5] = t[5] + n[5], e[6] = t[6] + n[6], e[7] = t[7] + n[7], e[8] = t[8] + n[8], e;
        }
      }, {
        key: "subtract",
        value: function subtract(e, t, n) {
          return e[0] = t[0] - n[0], e[1] = t[1] - n[1], e[2] = t[2] - n[2], e[3] = t[3] - n[3], e[4] = t[4] - n[4], e[5] = t[5] - n[5], e[6] = t[6] - n[6], e[7] = t[7] - n[7], e[8] = t[8] - n[8], e;
        }
      }, {
        key: "sub",
        value: function sub(e, t, n) {
          return e;
        }
      }, {
        key: "multiply",
        value: function multiply(e, t, n) {
          var s = t[0],
            r = t[1],
            i = t[2],
            a = t[3],
            c = t[4],
            d = t[5],
            l = t[6],
            L = t[7],
            h = t[8],
            k = n[0],
            y = n[1],
            M = n[2];
          return e[0] = k * s + y * a + M * l, e[1] = k * r + y * c + M * L, e[2] = k * i + y * d + M * h, k = n[3], y = n[4], M = n[5], e[3] = k * s + y * a + M * l, e[4] = k * r + y * c + M * L, e[5] = k * i + y * d + M * h, k = n[6], y = n[7], M = n[8], e[6] = k * s + y * a + M * l, e[7] = k * r + y * c + M * L, e[8] = k * i + y * d + M * h, e;
        }
      }, {
        key: "mul",
        value: function mul(e, t, n) {
          return e;
        }
      }, {
        key: "translate",
        value: function translate(e, t, n) {
          var s = t[0],
            r = t[1],
            i = t[2],
            a = t[3],
            c = t[4],
            d = t[5],
            l = t[6],
            L = t[7],
            h = t[8],
            k = n[0],
            y = n[1];
          return e[0] = s, e[1] = r, e[2] = i, e[3] = a, e[4] = c, e[5] = d, e[6] = k * s + y * a + l, e[7] = k * r + y * c + L, e[8] = k * i + y * d + h, e;
        }
      }, {
        key: "rotate",
        value: function rotate(e, t, n) {
          var s = t[0],
            r = t[1],
            i = t[2],
            a = t[3],
            c = t[4],
            d = t[5],
            l = t[6],
            L = t[7],
            h = t[8],
            k = Math.sin(n),
            y = Math.cos(n);
          return e[0] = y * s + k * a, e[1] = y * r + k * c, e[2] = y * i + k * d, e[3] = y * a - k * s, e[4] = y * c - k * r, e[5] = y * d - k * i, e[6] = l, e[7] = L, e[8] = h, e;
        }
      }, {
        key: "scale",
        value: function scale(e, t, n) {
          var s = n[0],
            r = n[1];
          return e[0] = s * t[0], e[1] = s * t[1], e[2] = s * t[2], e[3] = r * t[3], e[4] = r * t[4], e[5] = r * t[5], e[6] = t[6], e[7] = t[7], e[8] = t[8], e;
        }
      }, {
        key: "fromTranslation",
        value: function fromTranslation(e, t) {
          return e[0] = 1, e[1] = 0, e[2] = 0, e[3] = 0, e[4] = 1, e[5] = 0, e[6] = t[0], e[7] = t[1], e[8] = 1, e;
        }
      }, {
        key: "fromRotation",
        value: function fromRotation(e, t) {
          var n = Math.sin(t),
            s = Math.cos(t);
          return e[0] = s, e[1] = n, e[2] = 0, e[3] = -n, e[4] = s, e[5] = 0, e[6] = 0, e[7] = 0, e[8] = 1, e;
        }
      }, {
        key: "fromScaling",
        value: function fromScaling(e, t) {
          return e[0] = t[0], e[1] = 0, e[2] = 0, e[3] = 0, e[4] = t[1], e[5] = 0, e[6] = 0, e[7] = 0, e[8] = 1, e;
        }
      }, {
        key: "fromMat2d",
        value: function fromMat2d(e, t) {
          return e[0] = t[0], e[1] = t[1], e[2] = 0, e[3] = t[2], e[4] = t[3], e[5] = 0, e[6] = t[4], e[7] = t[5], e[8] = 1, e;
        }
      }, {
        key: "fromQuat",
        value: function fromQuat(e, t) {
          var n = t[0],
            s = t[1],
            r = t[2],
            i = t[3],
            a = n + n,
            c = s + s,
            d = r + r,
            l = n * a,
            L = s * a,
            h = s * c,
            k = r * a,
            y = r * c,
            M = r * d,
            T = i * a,
            m = i * c,
            R = i * d;
          return e[0] = 1 - h - M, e[3] = L - R, e[6] = k + m, e[1] = L + R, e[4] = 1 - l - M, e[7] = y - T, e[2] = k - m, e[5] = y + T, e[8] = 1 - l - h, e;
        }
      }, {
        key: "fromMat4",
        value: function fromMat4(e, t) {
          return e[0] = t[0], e[1] = t[1], e[2] = t[2], e[3] = t[4], e[4] = t[5], e[5] = t[6], e[6] = t[8], e[7] = t[9], e[8] = t[10], e;
        }
      }, {
        key: "normalFromMat4",
        value: function normalFromMat4(e, t) {
          var n = t[0],
            s = t[1],
            r = t[2],
            i = t[4],
            a = t[5],
            c = t[6],
            d = t[8],
            l = t[9],
            L = t[10];
          return e[0] = a * L - c * l, e[1] = r * l - s * L, e[2] = s * c - r * a, e[3] = c * d - i * L, e[4] = n * L - r * d, e[5] = r * i - n * c, e[6] = i * l - a * d, e[7] = s * d - n * l, e[8] = n * a - s * i, e;
        }
      }, {
        key: "normalFromMat4Fast",
        value: function normalFromMat4Fast(e, t) {
          return e;
        }
      }, {
        key: "projection",
        value: function projection(e, t, n) {
          return e[0] = 2 / t, e[1] = 0, e[2] = 0, e[3] = 0, e[4] = -2 / n, e[5] = 0, e[6] = -1, e[7] = 1, e[8] = 1, e;
        }
      }, {
        key: "frob",
        value: function frob(e) {
          return Math.sqrt(e[0] * e[0] + e[1] * e[1] + e[2] * e[2] + e[3] * e[3] + e[4] * e[4] + e[5] * e[5] + e[6] * e[6] + e[7] * e[7] + e[8] * e[8]);
        }
      }, {
        key: "multiplyScalar",
        value: function multiplyScalar(e, t, n) {
          return e[0] = t[0] * n, e[1] = t[1] * n, e[2] = t[2] * n, e[3] = t[3] * n, e[4] = t[4] * n, e[5] = t[5] * n, e[6] = t[6] * n, e[7] = t[7] * n, e[8] = t[8] * n, e;
        }
      }, {
        key: "multiplyScalarAndAdd",
        value: function multiplyScalarAndAdd(e, t, n, s) {
          return e[0] = t[0] + n[0] * s, e[1] = t[1] + n[1] * s, e[2] = t[2] + n[2] * s, e[3] = t[3] + n[3] * s, e[4] = t[4] + n[4] * s, e[5] = t[5] + n[5] * s, e[6] = t[6] + n[6] * s, e[7] = t[7] + n[7] * s, e[8] = t[8] + n[8] * s, e;
        }
      }, {
        key: "exactEquals",
        value: function exactEquals(e, t) {
          return e[0] === t[0] && e[1] === t[1] && e[2] === t[2] && e[3] === t[3] && e[4] === t[4] && e[5] === t[5] && e[6] === t[6] && e[7] === t[7] && e[8] === t[8];
        }
      }, {
        key: "equals",
        value: function equals(e, t) {
          var n = e[0],
            s = e[1],
            r = e[2],
            i = e[3],
            a = e[4],
            c = e[5],
            d = e[6],
            l = e[7],
            L = e[8],
            h = t[0],
            k = t[1],
            y = t[2],
            M = t[3],
            T = t[4],
            m = t[5],
            R = t[6],
            x = t[7],
            o = t[8];
          return Math.abs(n - h) <= 1e-6 * Math.max(1, Math.abs(n), Math.abs(h)) && Math.abs(s - k) <= 1e-6 * Math.max(1, Math.abs(s), Math.abs(k)) && Math.abs(r - y) <= 1e-6 * Math.max(1, Math.abs(r), Math.abs(y)) && Math.abs(i - M) <= 1e-6 * Math.max(1, Math.abs(i), Math.abs(M)) && Math.abs(a - T) <= 1e-6 * Math.max(1, Math.abs(a), Math.abs(T)) && Math.abs(c - m) <= 1e-6 * Math.max(1, Math.abs(c), Math.abs(m)) && Math.abs(d - R) <= 1e-6 * Math.max(1, Math.abs(d), Math.abs(R)) && Math.abs(l - x) <= 1e-6 * Math.max(1, Math.abs(l), Math.abs(x)) && Math.abs(L - o) <= 1e-6 * Math.max(1, Math.abs(L), Math.abs(o));
        }
      }, {
        key: "str",
        value: function str(e) {
          return "Mat3(".concat(e.join(", "), ")");
        }
      }]);
    }(/*#__PURE__*/_wrapNativeSuper(Float64Array));
  ne = new WeakMap(), G(X, ne, new Float64Array([1, 0, 0, 0, 1, 0, 0, 0, 1]));
  var J = X;
  J.prototype.mul = J.prototype.multiply;
  J.mul = J.multiply;
  J.sub = J.subtract;
  J.normalFromMat4Fast = J.normalFromMat4;
  var se,
    C,
    A = /*#__PURE__*/function (_Float64Array4) {
      function A() {
        var _this4;
        _classCallCheck(this, A);
        for (var _len7 = arguments.length, e = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
          e[_key7] = arguments[_key7];
        }
        switch (e.length) {
          case 16:
            _this4 = _callSuper(this, A, [e]);
            break;
          case 2:
            _this4 = _callSuper(this, A, [e[0], e[1], 16]);
            break;
          case 1:
            var t = e[0];
            t === void 0 ? _this4 = _callSuper(this, A, [f(A, se)]) : typeof t == "number" ? _this4 = _callSuper(this, A, [[t, t, t, t, t, t, t, t, t, t, t, t, t, t, t, t]]) : _this4 = _callSuper(this, A, [t, 0, 16]);
            break;
          default:
            _this4 = _callSuper(this, A, [f(A, se)]);
            break;
        }
        return _assertThisInitialized(_this4);
      }
      _inherits(A, _Float64Array4);
      return _createClass(A, [{
        key: "str",
        get: function get() {
          return A.str(this);
        }
      }, {
        key: "copy",
        value: function copy(e) {
          return this.set(e), this;
        }
      }, {
        key: "identity",
        value: function identity() {
          return this.set(f(A, se)), this;
        }
      }, {
        key: "multiply",
        value: function multiply(e) {
          return A.multiply(this, this, e);
        }
      }, {
        key: "mul",
        value: function mul(e) {
          return this;
        }
      }, {
        key: "transpose",
        value: function transpose() {
          return A.transpose(this, this);
        }
      }, {
        key: "invert",
        value: function invert() {
          return A.invert(this, this);
        }
      }, {
        key: "translate",
        value: function translate(e) {
          return A.translate(this, this, e);
        }
      }, {
        key: "rotate",
        value: function rotate(e, t) {
          return A.rotate(this, this, e, t);
        }
      }, {
        key: "scale",
        value: function scale(e) {
          return A.scale(this, this, e);
        }
      }, {
        key: "rotateX",
        value: function rotateX(e) {
          return A.rotateX(this, this, e);
        }
      }, {
        key: "rotateY",
        value: function rotateY(e) {
          return A.rotateY(this, this, e);
        }
      }, {
        key: "rotateZ",
        value: function rotateZ(e) {
          return A.rotateZ(this, this, e);
        }
      }, {
        key: "perspectiveNO",
        value: function perspectiveNO(e, t, n, s) {
          return A.perspectiveNO(this, e, t, n, s);
        }
      }, {
        key: "perspectiveZO",
        value: function perspectiveZO(e, t, n, s) {
          return A.perspectiveZO(this, e, t, n, s);
        }
      }, {
        key: "orthoNO",
        value: function orthoNO(e, t, n, s, r, i) {
          return A.orthoNO(this, e, t, n, s, r, i);
        }
      }, {
        key: "orthoZO",
        value: function orthoZO(e, t, n, s, r, i) {
          return A.orthoZO(this, e, t, n, s, r, i);
        }
      }], [{
        key: "BYTE_LENGTH",
        get: function get() {
          return 16 * Float64Array.BYTES_PER_ELEMENT;
        }
      }, {
        key: "create",
        value: function create() {
          return new A();
        }
      }, {
        key: "clone",
        value: function clone(e) {
          return new A(e);
        }
      }, {
        key: "copy",
        value: function copy(e, t) {
          return e[0] = t[0], e[1] = t[1], e[2] = t[2], e[3] = t[3], e[4] = t[4], e[5] = t[5], e[6] = t[6], e[7] = t[7], e[8] = t[8], e[9] = t[9], e[10] = t[10], e[11] = t[11], e[12] = t[12], e[13] = t[13], e[14] = t[14], e[15] = t[15], e;
        }
      }, {
        key: "fromValues",
        value: function fromValues() {
          for (var _len8 = arguments.length, e = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
            e[_key8] = arguments[_key8];
          }
          return _construct(A, e);
        }
      }, {
        key: "set",
        value: function set(e) {
          return e[0] = arguments.length <= 1 ? undefined : arguments[1], e[1] = arguments.length <= 2 ? undefined : arguments[2], e[2] = arguments.length <= 3 ? undefined : arguments[3], e[3] = arguments.length <= 4 ? undefined : arguments[4], e[4] = arguments.length <= 5 ? undefined : arguments[5], e[5] = arguments.length <= 6 ? undefined : arguments[6], e[6] = arguments.length <= 7 ? undefined : arguments[7], e[7] = arguments.length <= 8 ? undefined : arguments[8], e[8] = arguments.length <= 9 ? undefined : arguments[9], e[9] = arguments.length <= 10 ? undefined : arguments[10], e[10] = arguments.length <= 11 ? undefined : arguments[11], e[11] = arguments.length <= 12 ? undefined : arguments[12], e[12] = arguments.length <= 13 ? undefined : arguments[13], e[13] = arguments.length <= 14 ? undefined : arguments[14], e[14] = arguments.length <= 15 ? undefined : arguments[15], e[15] = arguments.length <= 16 ? undefined : arguments[16], e;
        }
      }, {
        key: "identity",
        value: function identity(e) {
          return e[0] = 1, e[1] = 0, e[2] = 0, e[3] = 0, e[4] = 0, e[5] = 1, e[6] = 0, e[7] = 0, e[8] = 0, e[9] = 0, e[10] = 1, e[11] = 0, e[12] = 0, e[13] = 0, e[14] = 0, e[15] = 1, e;
        }
      }, {
        key: "transpose",
        value: function transpose(e, t) {
          if (e === t) {
            var n = t[1],
              s = t[2],
              r = t[3],
              i = t[6],
              a = t[7],
              c = t[11];
            e[1] = t[4], e[2] = t[8], e[3] = t[12], e[4] = n, e[6] = t[9], e[7] = t[13], e[8] = s, e[9] = i, e[11] = t[14], e[12] = r, e[13] = a, e[14] = c;
          } else e[0] = t[0], e[1] = t[4], e[2] = t[8], e[3] = t[12], e[4] = t[1], e[5] = t[5], e[6] = t[9], e[7] = t[13], e[8] = t[2], e[9] = t[6], e[10] = t[10], e[11] = t[14], e[12] = t[3], e[13] = t[7], e[14] = t[11], e[15] = t[15];
          return e;
        }
      }, {
        key: "invert",
        value: function invert(e, t) {
          var n = t[0],
            s = t[1],
            r = t[2],
            i = t[3],
            a = t[4],
            c = t[5],
            d = t[6],
            l = t[7],
            L = t[8],
            h = t[9],
            k = t[10],
            y = t[11],
            M = t[12],
            T = t[13],
            m = t[14],
            R = t[15],
            x = n * c - s * a,
            o = n * d - r * a,
            b = n * l - i * a,
            V = s * d - r * c,
            p = s * l - i * c,
            I = r * l - i * d,
            D = L * T - h * M,
            S = L * m - k * M,
            z = L * R - y * M,
            Y = h * m - k * T,
            P = h * R - y * T,
            O = k * R - y * m,
            N = x * O - o * P + b * Y + V * z - p * S + I * D;
          return N ? (N = 1 / N, e[0] = (c * O - d * P + l * Y) * N, e[1] = (r * P - s * O - i * Y) * N, e[2] = (T * I - m * p + R * V) * N, e[3] = (k * p - h * I - y * V) * N, e[4] = (d * z - a * O - l * S) * N, e[5] = (n * O - r * z + i * S) * N, e[6] = (m * b - M * I - R * o) * N, e[7] = (L * I - k * b + y * o) * N, e[8] = (a * P - c * z + l * D) * N, e[9] = (s * z - n * P - i * D) * N, e[10] = (M * p - T * b + R * x) * N, e[11] = (h * b - L * p - y * x) * N, e[12] = (c * S - a * Y - d * D) * N, e[13] = (n * Y - s * S + r * D) * N, e[14] = (T * o - M * V - m * x) * N, e[15] = (L * V - h * o + k * x) * N, e) : null;
        }
      }, {
        key: "adjoint",
        value: function adjoint(e, t) {
          var n = t[0],
            s = t[1],
            r = t[2],
            i = t[3],
            a = t[4],
            c = t[5],
            d = t[6],
            l = t[7],
            L = t[8],
            h = t[9],
            k = t[10],
            y = t[11],
            M = t[12],
            T = t[13],
            m = t[14],
            R = t[15],
            x = n * c - s * a,
            o = n * d - r * a,
            b = n * l - i * a,
            V = s * d - r * c,
            p = s * l - i * c,
            I = r * l - i * d,
            D = L * T - h * M,
            S = L * m - k * M,
            z = L * R - y * M,
            Y = h * m - k * T,
            P = h * R - y * T,
            O = k * R - y * m;
          return e[0] = c * O - d * P + l * Y, e[1] = r * P - s * O - i * Y, e[2] = T * I - m * p + R * V, e[3] = k * p - h * I - y * V, e[4] = d * z - a * O - l * S, e[5] = n * O - r * z + i * S, e[6] = m * b - M * I - R * o, e[7] = L * I - k * b + y * o, e[8] = a * P - c * z + l * D, e[9] = s * z - n * P - i * D, e[10] = M * p - T * b + R * x, e[11] = h * b - L * p - y * x, e[12] = c * S - a * Y - d * D, e[13] = n * Y - s * S + r * D, e[14] = T * o - M * V - m * x, e[15] = L * V - h * o + k * x, e;
        }
      }, {
        key: "determinant",
        value: function determinant(e) {
          var t = e[0],
            n = e[1],
            s = e[2],
            r = e[3],
            i = e[4],
            a = e[5],
            c = e[6],
            d = e[7],
            l = e[8],
            L = e[9],
            h = e[10],
            k = e[11],
            y = e[12],
            M = e[13],
            T = e[14],
            m = e[15],
            R = t * a - n * i,
            x = t * c - s * i,
            o = n * c - s * a,
            b = l * M - L * y,
            V = l * T - h * y,
            p = L * T - h * M,
            I = t * p - n * V + s * b,
            D = i * p - a * V + c * b,
            S = l * o - L * x + h * R,
            z = y * o - M * x + T * R;
          return d * I - r * D + m * S - k * z;
        }
      }, {
        key: "multiply",
        value: function multiply(e, t, n) {
          var s = t[0],
            r = t[1],
            i = t[2],
            a = t[3],
            c = t[4],
            d = t[5],
            l = t[6],
            L = t[7],
            h = t[8],
            k = t[9],
            y = t[10],
            M = t[11],
            T = t[12],
            m = t[13],
            R = t[14],
            x = t[15],
            o = n[0],
            b = n[1],
            V = n[2],
            p = n[3];
          return e[0] = o * s + b * c + V * h + p * T, e[1] = o * r + b * d + V * k + p * m, e[2] = o * i + b * l + V * y + p * R, e[3] = o * a + b * L + V * M + p * x, o = n[4], b = n[5], V = n[6], p = n[7], e[4] = o * s + b * c + V * h + p * T, e[5] = o * r + b * d + V * k + p * m, e[6] = o * i + b * l + V * y + p * R, e[7] = o * a + b * L + V * M + p * x, o = n[8], b = n[9], V = n[10], p = n[11], e[8] = o * s + b * c + V * h + p * T, e[9] = o * r + b * d + V * k + p * m, e[10] = o * i + b * l + V * y + p * R, e[11] = o * a + b * L + V * M + p * x, o = n[12], b = n[13], V = n[14], p = n[15], e[12] = o * s + b * c + V * h + p * T, e[13] = o * r + b * d + V * k + p * m, e[14] = o * i + b * l + V * y + p * R, e[15] = o * a + b * L + V * M + p * x, e;
        }
      }, {
        key: "mul",
        value: function mul(e, t, n) {
          return e;
        }
      }, {
        key: "translate",
        value: function translate(e, t, n) {
          var s = n[0],
            r = n[1],
            i = n[2];
          if (t === e) e[12] = t[0] * s + t[4] * r + t[8] * i + t[12], e[13] = t[1] * s + t[5] * r + t[9] * i + t[13], e[14] = t[2] * s + t[6] * r + t[10] * i + t[14], e[15] = t[3] * s + t[7] * r + t[11] * i + t[15];else {
            var a = t[0],
              c = t[1],
              d = t[2],
              l = t[3],
              L = t[4],
              h = t[5],
              k = t[6],
              y = t[7],
              M = t[8],
              T = t[9],
              m = t[10],
              R = t[11];
            e[0] = a, e[1] = c, e[2] = d, e[3] = l, e[4] = L, e[5] = h, e[6] = k, e[7] = y, e[8] = M, e[9] = T, e[10] = m, e[11] = R, e[12] = a * s + L * r + M * i + t[12], e[13] = c * s + h * r + T * i + t[13], e[14] = d * s + k * r + m * i + t[14], e[15] = l * s + y * r + R * i + t[15];
          }
          return e;
        }
      }, {
        key: "scale",
        value: function scale(e, t, n) {
          var s = n[0],
            r = n[1],
            i = n[2];
          return e[0] = t[0] * s, e[1] = t[1] * s, e[2] = t[2] * s, e[3] = t[3] * s, e[4] = t[4] * r, e[5] = t[5] * r, e[6] = t[6] * r, e[7] = t[7] * r, e[8] = t[8] * i, e[9] = t[9] * i, e[10] = t[10] * i, e[11] = t[11] * i, e[12] = t[12], e[13] = t[13], e[14] = t[14], e[15] = t[15], e;
        }
      }, {
        key: "rotate",
        value: function rotate(e, t, n, s) {
          var r = s[0],
            i = s[1],
            a = s[2],
            c = Math.sqrt(r * r + i * i + a * a);
          if (c < 1e-6) return null;
          c = 1 / c, r *= c, i *= c, a *= c;
          var d = Math.sin(n),
            l = Math.cos(n),
            L = 1 - l,
            h = t[0],
            k = t[1],
            y = t[2],
            M = t[3],
            T = t[4],
            m = t[5],
            R = t[6],
            x = t[7],
            o = t[8],
            b = t[9],
            V = t[10],
            p = t[11],
            I = r * r * L + l,
            D = i * r * L + a * d,
            S = a * r * L - i * d,
            z = r * i * L - a * d,
            Y = i * i * L + l,
            P = a * i * L + r * d,
            O = r * a * L + i * d,
            N = i * a * L - r * d,
            v = a * a * L + l;
          return e[0] = h * I + T * D + o * S, e[1] = k * I + m * D + b * S, e[2] = y * I + R * D + V * S, e[3] = M * I + x * D + p * S, e[4] = h * z + T * Y + o * P, e[5] = k * z + m * Y + b * P, e[6] = y * z + R * Y + V * P, e[7] = M * z + x * Y + p * P, e[8] = h * O + T * N + o * v, e[9] = k * O + m * N + b * v, e[10] = y * O + R * N + V * v, e[11] = M * O + x * N + p * v, t !== e && (e[12] = t[12], e[13] = t[13], e[14] = t[14], e[15] = t[15]), e;
        }
      }, {
        key: "rotateX",
        value: function rotateX(e, t, n) {
          var s = Math.sin(n),
            r = Math.cos(n),
            i = t[4],
            a = t[5],
            c = t[6],
            d = t[7],
            l = t[8],
            L = t[9],
            h = t[10],
            k = t[11];
          return t !== e && (e[0] = t[0], e[1] = t[1], e[2] = t[2], e[3] = t[3], e[12] = t[12], e[13] = t[13], e[14] = t[14], e[15] = t[15]), e[4] = i * r + l * s, e[5] = a * r + L * s, e[6] = c * r + h * s, e[7] = d * r + k * s, e[8] = l * r - i * s, e[9] = L * r - a * s, e[10] = h * r - c * s, e[11] = k * r - d * s, e;
        }
      }, {
        key: "rotateY",
        value: function rotateY(e, t, n) {
          var s = Math.sin(n),
            r = Math.cos(n),
            i = t[0],
            a = t[1],
            c = t[2],
            d = t[3],
            l = t[8],
            L = t[9],
            h = t[10],
            k = t[11];
          return t !== e && (e[4] = t[4], e[5] = t[5], e[6] = t[6], e[7] = t[7], e[12] = t[12], e[13] = t[13], e[14] = t[14], e[15] = t[15]), e[0] = i * r - l * s, e[1] = a * r - L * s, e[2] = c * r - h * s, e[3] = d * r - k * s, e[8] = i * s + l * r, e[9] = a * s + L * r, e[10] = c * s + h * r, e[11] = d * s + k * r, e;
        }
      }, {
        key: "rotateZ",
        value: function rotateZ(e, t, n) {
          var s = Math.sin(n),
            r = Math.cos(n),
            i = t[0],
            a = t[1],
            c = t[2],
            d = t[3],
            l = t[4],
            L = t[5],
            h = t[6],
            k = t[7];
          return t !== e && (e[8] = t[8], e[9] = t[9], e[10] = t[10], e[11] = t[11], e[12] = t[12], e[13] = t[13], e[14] = t[14], e[15] = t[15]), e[0] = i * r + l * s, e[1] = a * r + L * s, e[2] = c * r + h * s, e[3] = d * r + k * s, e[4] = l * r - i * s, e[5] = L * r - a * s, e[6] = h * r - c * s, e[7] = k * r - d * s, e;
        }
      }, {
        key: "fromTranslation",
        value: function fromTranslation(e, t) {
          return e[0] = 1, e[1] = 0, e[2] = 0, e[3] = 0, e[4] = 0, e[5] = 1, e[6] = 0, e[7] = 0, e[8] = 0, e[9] = 0, e[10] = 1, e[11] = 0, e[12] = t[0], e[13] = t[1], e[14] = t[2], e[15] = 1, e;
        }
      }, {
        key: "fromScaling",
        value: function fromScaling(e, t) {
          return e[0] = t[0], e[1] = 0, e[2] = 0, e[3] = 0, e[4] = 0, e[5] = t[1], e[6] = 0, e[7] = 0, e[8] = 0, e[9] = 0, e[10] = t[2], e[11] = 0, e[12] = 0, e[13] = 0, e[14] = 0, e[15] = 1, e;
        }
      }, {
        key: "fromRotation",
        value: function fromRotation(e, t, n) {
          var s = n[0],
            r = n[1],
            i = n[2],
            a = Math.sqrt(s * s + r * r + i * i);
          if (a < 1e-6) return null;
          a = 1 / a, s *= a, r *= a, i *= a;
          var c = Math.sin(t),
            d = Math.cos(t),
            l = 1 - d;
          return e[0] = s * s * l + d, e[1] = r * s * l + i * c, e[2] = i * s * l - r * c, e[3] = 0, e[4] = s * r * l - i * c, e[5] = r * r * l + d, e[6] = i * r * l + s * c, e[7] = 0, e[8] = s * i * l + r * c, e[9] = r * i * l - s * c, e[10] = i * i * l + d, e[11] = 0, e[12] = 0, e[13] = 0, e[14] = 0, e[15] = 1, e;
        }
      }, {
        key: "fromXRotation",
        value: function fromXRotation(e, t) {
          var n = Math.sin(t),
            s = Math.cos(t);
          return e[0] = 1, e[1] = 0, e[2] = 0, e[3] = 0, e[4] = 0, e[5] = s, e[6] = n, e[7] = 0, e[8] = 0, e[9] = -n, e[10] = s, e[11] = 0, e[12] = 0, e[13] = 0, e[14] = 0, e[15] = 1, e;
        }
      }, {
        key: "fromYRotation",
        value: function fromYRotation(e, t) {
          var n = Math.sin(t),
            s = Math.cos(t);
          return e[0] = s, e[1] = 0, e[2] = -n, e[3] = 0, e[4] = 0, e[5] = 1, e[6] = 0, e[7] = 0, e[8] = n, e[9] = 0, e[10] = s, e[11] = 0, e[12] = 0, e[13] = 0, e[14] = 0, e[15] = 1, e;
        }
      }, {
        key: "fromZRotation",
        value: function fromZRotation(e, t) {
          var n = Math.sin(t),
            s = Math.cos(t);
          return e[0] = s, e[1] = n, e[2] = 0, e[3] = 0, e[4] = -n, e[5] = s, e[6] = 0, e[7] = 0, e[8] = 0, e[9] = 0, e[10] = 1, e[11] = 0, e[12] = 0, e[13] = 0, e[14] = 0, e[15] = 1, e;
        }
      }, {
        key: "fromRotationTranslation",
        value: function fromRotationTranslation(e, t, n) {
          var s = t[0],
            r = t[1],
            i = t[2],
            a = t[3],
            c = s + s,
            d = r + r,
            l = i + i,
            L = s * c,
            h = s * d,
            k = s * l,
            y = r * d,
            M = r * l,
            T = i * l,
            m = a * c,
            R = a * d,
            x = a * l;
          return e[0] = 1 - (y + T), e[1] = h + x, e[2] = k - R, e[3] = 0, e[4] = h - x, e[5] = 1 - (L + T), e[6] = M + m, e[7] = 0, e[8] = k + R, e[9] = M - m, e[10] = 1 - (L + y), e[11] = 0, e[12] = n[0], e[13] = n[1], e[14] = n[2], e[15] = 1, e;
        }
      }, {
        key: "fromQuat2",
        value: function fromQuat2(e, t) {
          var n = -t[0],
            s = -t[1],
            r = -t[2],
            i = t[3],
            a = t[4],
            c = t[5],
            d = t[6],
            l = t[7],
            L = n * n + s * s + r * r + i * i;
          return L > 0 ? (f(A, C)[0] = (a * i + l * n + c * r - d * s) * 2 / L, f(A, C)[1] = (c * i + l * s + d * n - a * r) * 2 / L, f(A, C)[2] = (d * i + l * r + a * s - c * n) * 2 / L) : (f(A, C)[0] = (a * i + l * n + c * r - d * s) * 2, f(A, C)[1] = (c * i + l * s + d * n - a * r) * 2, f(A, C)[2] = (d * i + l * r + a * s - c * n) * 2), A.fromRotationTranslation(e, t, f(A, C)), e;
        }
      }, {
        key: "normalFromMat4",
        value: function normalFromMat4(e, t) {
          var n = t[0],
            s = t[1],
            r = t[2],
            i = t[4],
            a = t[5],
            c = t[6],
            d = t[8],
            l = t[9],
            L = t[10];
          return e[0] = a * L - c * l, e[1] = r * l - s * L, e[2] = s * c - r * a, e[3] = 0, e[4] = c * d - i * L, e[5] = n * L - r * d, e[6] = r * i - n * c, e[7] = 0, e[8] = i * l - a * d, e[9] = s * d - n * l, e[10] = n * a - s * i, e[11] = 0, e[12] = 0, e[13] = 0, e[14] = 0, e[15] = 1, e;
        }
      }, {
        key: "normalFromMat4Fast",
        value: function normalFromMat4Fast(e, t) {
          return e;
        }
      }, {
        key: "getTranslation",
        value: function getTranslation(e, t) {
          return e[0] = t[12], e[1] = t[13], e[2] = t[14], e;
        }
      }, {
        key: "getScaling",
        value: function getScaling(e, t) {
          var n = t[0],
            s = t[1],
            r = t[2],
            i = t[4],
            a = t[5],
            c = t[6],
            d = t[8],
            l = t[9],
            L = t[10];
          return e[0] = Math.sqrt(n * n + s * s + r * r), e[1] = Math.sqrt(i * i + a * a + c * c), e[2] = Math.sqrt(d * d + l * l + L * L), e;
        }
      }, {
        key: "getRotation",
        value: function getRotation(e, t) {
          A.getScaling(f(A, C), t);
          var n = 1 / f(A, C)[0],
            s = 1 / f(A, C)[1],
            r = 1 / f(A, C)[2],
            i = t[0] * n,
            a = t[1] * s,
            c = t[2] * r,
            d = t[4] * n,
            l = t[5] * s,
            L = t[6] * r,
            h = t[8] * n,
            k = t[9] * s,
            y = t[10] * r,
            M = i + l + y,
            T = 0;
          return M > 0 ? (T = Math.sqrt(M + 1) * 2, e[3] = .25 * T, e[0] = (L - k) / T, e[1] = (h - c) / T, e[2] = (a - d) / T) : i > l && i > y ? (T = Math.sqrt(1 + i - l - y) * 2, e[3] = (L - k) / T, e[0] = .25 * T, e[1] = (a + d) / T, e[2] = (h + c) / T) : l > y ? (T = Math.sqrt(1 + l - i - y) * 2, e[3] = (h - c) / T, e[0] = (a + d) / T, e[1] = .25 * T, e[2] = (L + k) / T) : (T = Math.sqrt(1 + y - i - l) * 2, e[3] = (a - d) / T, e[0] = (h + c) / T, e[1] = (L + k) / T, e[2] = .25 * T), e;
        }
      }, {
        key: "decompose",
        value: function decompose(e, t, n, s) {
          t[0] = s[12], t[1] = s[13], t[2] = s[14];
          var r = s[0],
            i = s[1],
            a = s[2],
            c = s[4],
            d = s[5],
            l = s[6],
            L = s[8],
            h = s[9],
            k = s[10];
          n[0] = Math.sqrt(r * r + i * i + a * a), n[1] = Math.sqrt(c * c + d * d + l * l), n[2] = Math.sqrt(L * L + h * h + k * k);
          var y = 1 / n[0],
            M = 1 / n[1],
            T = 1 / n[2],
            m = r * y,
            R = i * M,
            x = a * T,
            o = c * y,
            b = d * M,
            V = l * T,
            p = L * y,
            I = h * M,
            D = k * T,
            S = m + b + D,
            z = 0;
          return S > 0 ? (z = Math.sqrt(S + 1) * 2, e[3] = .25 * z, e[0] = (V - I) / z, e[1] = (p - x) / z, e[2] = (R - o) / z) : m > b && m > D ? (z = Math.sqrt(1 + m - b - D) * 2, e[3] = (V - I) / z, e[0] = .25 * z, e[1] = (R + o) / z, e[2] = (p + x) / z) : b > D ? (z = Math.sqrt(1 + b - m - D) * 2, e[3] = (p - x) / z, e[0] = (R + o) / z, e[1] = .25 * z, e[2] = (V + I) / z) : (z = Math.sqrt(1 + D - m - b) * 2, e[3] = (R - o) / z, e[0] = (p + x) / z, e[1] = (V + I) / z, e[2] = .25 * z), e;
        }
      }, {
        key: "fromRotationTranslationScale",
        value: function fromRotationTranslationScale(e, t, n, s) {
          var r = t[0],
            i = t[1],
            a = t[2],
            c = t[3],
            d = r + r,
            l = i + i,
            L = a + a,
            h = r * d,
            k = r * l,
            y = r * L,
            M = i * l,
            T = i * L,
            m = a * L,
            R = c * d,
            x = c * l,
            o = c * L,
            b = s[0],
            V = s[1],
            p = s[2];
          return e[0] = (1 - (M + m)) * b, e[1] = (k + o) * b, e[2] = (y - x) * b, e[3] = 0, e[4] = (k - o) * V, e[5] = (1 - (h + m)) * V, e[6] = (T + R) * V, e[7] = 0, e[8] = (y + x) * p, e[9] = (T - R) * p, e[10] = (1 - (h + M)) * p, e[11] = 0, e[12] = n[0], e[13] = n[1], e[14] = n[2], e[15] = 1, e;
        }
      }, {
        key: "fromRotationTranslationScaleOrigin",
        value: function fromRotationTranslationScaleOrigin(e, t, n, s, r) {
          var i = t[0],
            a = t[1],
            c = t[2],
            d = t[3],
            l = i + i,
            L = a + a,
            h = c + c,
            k = i * l,
            y = i * L,
            M = i * h,
            T = a * L,
            m = a * h,
            R = c * h,
            x = d * l,
            o = d * L,
            b = d * h,
            V = s[0],
            p = s[1],
            I = s[2],
            D = r[0],
            S = r[1],
            z = r[2],
            Y = (1 - (T + R)) * V,
            P = (y + b) * V,
            O = (M - o) * V,
            N = (y - b) * p,
            v = (1 - (k + R)) * p,
            re = (m + x) * p,
            ie = (M + o) * I,
            Me = (m - x) * I,
            Te = (1 - (k + T)) * I;
          return e[0] = Y, e[1] = P, e[2] = O, e[3] = 0, e[4] = N, e[5] = v, e[6] = re, e[7] = 0, e[8] = ie, e[9] = Me, e[10] = Te, e[11] = 0, e[12] = n[0] + D - (Y * D + N * S + ie * z), e[13] = n[1] + S - (P * D + v * S + Me * z), e[14] = n[2] + z - (O * D + re * S + Te * z), e[15] = 1, e;
        }
      }, {
        key: "fromQuat",
        value: function fromQuat(e, t) {
          var n = t[0],
            s = t[1],
            r = t[2],
            i = t[3],
            a = n + n,
            c = s + s,
            d = r + r,
            l = n * a,
            L = s * a,
            h = s * c,
            k = r * a,
            y = r * c,
            M = r * d,
            T = i * a,
            m = i * c,
            R = i * d;
          return e[0] = 1 - h - M, e[1] = L + R, e[2] = k - m, e[3] = 0, e[4] = L - R, e[5] = 1 - l - M, e[6] = y + T, e[7] = 0, e[8] = k + m, e[9] = y - T, e[10] = 1 - l - h, e[11] = 0, e[12] = 0, e[13] = 0, e[14] = 0, e[15] = 1, e;
        }
      }, {
        key: "frustumNO",
        value: function frustumNO(e, t, n, s, r, i) {
          var a = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 1 / 0;
          var c = 1 / (n - t),
            d = 1 / (r - s);
          if (e[0] = i * 2 * c, e[1] = 0, e[2] = 0, e[3] = 0, e[4] = 0, e[5] = i * 2 * d, e[6] = 0, e[7] = 0, e[8] = (n + t) * c, e[9] = (r + s) * d, e[11] = -1, e[12] = 0, e[13] = 0, e[15] = 0, a != null && a !== 1 / 0) {
            var l = 1 / (i - a);
            e[10] = (a + i) * l, e[14] = 2 * a * i * l;
          } else e[10] = -1, e[14] = -2 * i;
          return e;
        }
      }, {
        key: "frustum",
        value: function frustum(e, t, n, s, r, i) {
          return e;
        }
      }, {
        key: "frustumZO",
        value: function frustumZO(e, t, n, s, r, i) {
          var a = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 1 / 0;
          var c = 1 / (n - t),
            d = 1 / (r - s);
          if (e[0] = i * 2 * c, e[1] = 0, e[2] = 0, e[3] = 0, e[4] = 0, e[5] = i * 2 * d, e[6] = 0, e[7] = 0, e[8] = (n + t) * c, e[9] = (r + s) * d, e[11] = -1, e[12] = 0, e[13] = 0, e[15] = 0, a != null && a !== 1 / 0) {
            var l = 1 / (i - a);
            e[10] = a * l, e[14] = a * i * l;
          } else e[10] = -1, e[14] = -i;
          return e;
        }
      }, {
        key: "perspectiveNO",
        value: function perspectiveNO(e, t, n, s) {
          var r = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1 / 0;
          var i = 1 / Math.tan(t / 2);
          if (e[0] = i / n, e[1] = 0, e[2] = 0, e[3] = 0, e[4] = 0, e[5] = i, e[6] = 0, e[7] = 0, e[8] = 0, e[9] = 0, e[11] = -1, e[12] = 0, e[13] = 0, e[15] = 0, r != null && r !== 1 / 0) {
            var a = 1 / (s - r);
            e[10] = (r + s) * a, e[14] = 2 * r * s * a;
          } else e[10] = -1, e[14] = -2 * s;
          return e;
        }
      }, {
        key: "perspective",
        value: function perspective(e, t, n, s) {
          return e;
        }
      }, {
        key: "perspectiveZO",
        value: function perspectiveZO(e, t, n, s) {
          var r = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1 / 0;
          var i = 1 / Math.tan(t / 2);
          if (e[0] = i / n, e[1] = 0, e[2] = 0, e[3] = 0, e[4] = 0, e[5] = i, e[6] = 0, e[7] = 0, e[8] = 0, e[9] = 0, e[11] = -1, e[12] = 0, e[13] = 0, e[15] = 0, r != null && r !== 1 / 0) {
            var a = 1 / (s - r);
            e[10] = r * a, e[14] = r * s * a;
          } else e[10] = -1, e[14] = -s;
          return e;
        }
      }, {
        key: "perspectiveFromFieldOfView",
        value: function perspectiveFromFieldOfView(e, t, n, s) {
          var r = Math.tan(t.upDegrees * Math.PI / 180),
            i = Math.tan(t.downDegrees * Math.PI / 180),
            a = Math.tan(t.leftDegrees * Math.PI / 180),
            c = Math.tan(t.rightDegrees * Math.PI / 180),
            d = 2 / (a + c),
            l = 2 / (r + i);
          return e[0] = d, e[1] = 0, e[2] = 0, e[3] = 0, e[4] = 0, e[5] = l, e[6] = 0, e[7] = 0, e[8] = -((a - c) * d * .5), e[9] = (r - i) * l * .5, e[10] = s / (n - s), e[11] = -1, e[12] = 0, e[13] = 0, e[14] = s * n / (n - s), e[15] = 0, e;
        }
      }, {
        key: "orthoNO",
        value: function orthoNO(e, t, n, s, r, i, a) {
          var c = 1 / (t - n),
            d = 1 / (s - r),
            l = 1 / (i - a);
          return e[0] = -2 * c, e[1] = 0, e[2] = 0, e[3] = 0, e[4] = 0, e[5] = -2 * d, e[6] = 0, e[7] = 0, e[8] = 0, e[9] = 0, e[10] = 2 * l, e[11] = 0, e[12] = (t + n) * c, e[13] = (r + s) * d, e[14] = (a + i) * l, e[15] = 1, e;
        }
      }, {
        key: "ortho",
        value: function ortho(e, t, n, s, r, i, a) {
          return e;
        }
      }, {
        key: "orthoZO",
        value: function orthoZO(e, t, n, s, r, i, a) {
          var c = 1 / (t - n),
            d = 1 / (s - r),
            l = 1 / (i - a);
          return e[0] = -2 * c, e[1] = 0, e[2] = 0, e[3] = 0, e[4] = 0, e[5] = -2 * d, e[6] = 0, e[7] = 0, e[8] = 0, e[9] = 0, e[10] = l, e[11] = 0, e[12] = (t + n) * c, e[13] = (r + s) * d, e[14] = i * l, e[15] = 1, e;
        }
      }, {
        key: "lookAt",
        value: function lookAt(e, t, n, s) {
          var r = t[0],
            i = t[1],
            a = t[2],
            c = s[0],
            d = s[1],
            l = s[2],
            L = n[0],
            h = n[1],
            k = n[2];
          if (Math.abs(r - L) < 1e-6 && Math.abs(i - h) < 1e-6 && Math.abs(a - k) < 1e-6) return A.identity(e);
          var y = r - L,
            M = i - h,
            T = a - k,
            m = 1 / Math.sqrt(y * y + M * M + T * T);
          y *= m, M *= m, T *= m;
          var R = d * T - l * M,
            x = l * y - c * T,
            o = c * M - d * y;
          m = Math.sqrt(R * R + x * x + o * o), m ? (m = 1 / m, R *= m, x *= m, o *= m) : (R = 0, x = 0, o = 0);
          var b = M * o - T * x,
            V = T * R - y * o,
            p = y * x - M * R;
          return m = Math.sqrt(b * b + V * V + p * p), m ? (m = 1 / m, b *= m, V *= m, p *= m) : (b = 0, V = 0, p = 0), e[0] = R, e[1] = b, e[2] = y, e[3] = 0, e[4] = x, e[5] = V, e[6] = M, e[7] = 0, e[8] = o, e[9] = p, e[10] = T, e[11] = 0, e[12] = -(R * r + x * i + o * a), e[13] = -(b * r + V * i + p * a), e[14] = -(y * r + M * i + T * a), e[15] = 1, e;
        }
      }, {
        key: "targetTo",
        value: function targetTo(e, t, n, s) {
          var r = t[0],
            i = t[1],
            a = t[2],
            c = s[0],
            d = s[1],
            l = s[2],
            L = r - n[0],
            h = i - n[1],
            k = a - n[2],
            y = L * L + h * h + k * k;
          y > 0 && (y = 1 / Math.sqrt(y), L *= y, h *= y, k *= y);
          var M = d * k - l * h,
            T = l * L - c * k,
            m = c * h - d * L;
          return y = M * M + T * T + m * m, y > 0 && (y = 1 / Math.sqrt(y), M *= y, T *= y, m *= y), e[0] = M, e[1] = T, e[2] = m, e[3] = 0, e[4] = h * m - k * T, e[5] = k * M - L * m, e[6] = L * T - h * M, e[7] = 0, e[8] = L, e[9] = h, e[10] = k, e[11] = 0, e[12] = r, e[13] = i, e[14] = a, e[15] = 1, e;
        }
      }, {
        key: "frob",
        value: function frob(e) {
          return Math.sqrt(e[0] * e[0] + e[1] * e[1] + e[2] * e[2] + e[3] * e[3] + e[4] * e[4] + e[5] * e[5] + e[6] * e[6] + e[7] * e[7] + e[8] * e[8] + e[9] * e[9] + e[10] * e[10] + e[11] * e[11] + e[12] * e[12] + e[13] * e[13] + e[14] * e[14] + e[15] * e[15]);
        }
      }, {
        key: "add",
        value: function add(e, t, n) {
          return e[0] = t[0] + n[0], e[1] = t[1] + n[1], e[2] = t[2] + n[2], e[3] = t[3] + n[3], e[4] = t[4] + n[4], e[5] = t[5] + n[5], e[6] = t[6] + n[6], e[7] = t[7] + n[7], e[8] = t[8] + n[8], e[9] = t[9] + n[9], e[10] = t[10] + n[10], e[11] = t[11] + n[11], e[12] = t[12] + n[12], e[13] = t[13] + n[13], e[14] = t[14] + n[14], e[15] = t[15] + n[15], e;
        }
      }, {
        key: "subtract",
        value: function subtract(e, t, n) {
          return e[0] = t[0] - n[0], e[1] = t[1] - n[1], e[2] = t[2] - n[2], e[3] = t[3] - n[3], e[4] = t[4] - n[4], e[5] = t[5] - n[5], e[6] = t[6] - n[6], e[7] = t[7] - n[7], e[8] = t[8] - n[8], e[9] = t[9] - n[9], e[10] = t[10] - n[10], e[11] = t[11] - n[11], e[12] = t[12] - n[12], e[13] = t[13] - n[13], e[14] = t[14] - n[14], e[15] = t[15] - n[15], e;
        }
      }, {
        key: "sub",
        value: function sub(e, t, n) {
          return e;
        }
      }, {
        key: "multiplyScalar",
        value: function multiplyScalar(e, t, n) {
          return e[0] = t[0] * n, e[1] = t[1] * n, e[2] = t[2] * n, e[3] = t[3] * n, e[4] = t[4] * n, e[5] = t[5] * n, e[6] = t[6] * n, e[7] = t[7] * n, e[8] = t[8] * n, e[9] = t[9] * n, e[10] = t[10] * n, e[11] = t[11] * n, e[12] = t[12] * n, e[13] = t[13] * n, e[14] = t[14] * n, e[15] = t[15] * n, e;
        }
      }, {
        key: "multiplyScalarAndAdd",
        value: function multiplyScalarAndAdd(e, t, n, s) {
          return e[0] = t[0] + n[0] * s, e[1] = t[1] + n[1] * s, e[2] = t[2] + n[2] * s, e[3] = t[3] + n[3] * s, e[4] = t[4] + n[4] * s, e[5] = t[5] + n[5] * s, e[6] = t[6] + n[6] * s, e[7] = t[7] + n[7] * s, e[8] = t[8] + n[8] * s, e[9] = t[9] + n[9] * s, e[10] = t[10] + n[10] * s, e[11] = t[11] + n[11] * s, e[12] = t[12] + n[12] * s, e[13] = t[13] + n[13] * s, e[14] = t[14] + n[14] * s, e[15] = t[15] + n[15] * s, e;
        }
      }, {
        key: "exactEquals",
        value: function exactEquals(e, t) {
          return e[0] === t[0] && e[1] === t[1] && e[2] === t[2] && e[3] === t[3] && e[4] === t[4] && e[5] === t[5] && e[6] === t[6] && e[7] === t[7] && e[8] === t[8] && e[9] === t[9] && e[10] === t[10] && e[11] === t[11] && e[12] === t[12] && e[13] === t[13] && e[14] === t[14] && e[15] === t[15];
        }
      }, {
        key: "equals",
        value: function equals(e, t) {
          var n = e[0],
            s = e[1],
            r = e[2],
            i = e[3],
            a = e[4],
            c = e[5],
            d = e[6],
            l = e[7],
            L = e[8],
            h = e[9],
            k = e[10],
            y = e[11],
            M = e[12],
            T = e[13],
            m = e[14],
            R = e[15],
            x = t[0],
            o = t[1],
            b = t[2],
            V = t[3],
            p = t[4],
            I = t[5],
            D = t[6],
            S = t[7],
            z = t[8],
            Y = t[9],
            P = t[10],
            O = t[11],
            N = t[12],
            v = t[13],
            re = t[14],
            ie = t[15];
          return Math.abs(n - x) <= 1e-6 * Math.max(1, Math.abs(n), Math.abs(x)) && Math.abs(s - o) <= 1e-6 * Math.max(1, Math.abs(s), Math.abs(o)) && Math.abs(r - b) <= 1e-6 * Math.max(1, Math.abs(r), Math.abs(b)) && Math.abs(i - V) <= 1e-6 * Math.max(1, Math.abs(i), Math.abs(V)) && Math.abs(a - p) <= 1e-6 * Math.max(1, Math.abs(a), Math.abs(p)) && Math.abs(c - I) <= 1e-6 * Math.max(1, Math.abs(c), Math.abs(I)) && Math.abs(d - D) <= 1e-6 * Math.max(1, Math.abs(d), Math.abs(D)) && Math.abs(l - S) <= 1e-6 * Math.max(1, Math.abs(l), Math.abs(S)) && Math.abs(L - z) <= 1e-6 * Math.max(1, Math.abs(L), Math.abs(z)) && Math.abs(h - Y) <= 1e-6 * Math.max(1, Math.abs(h), Math.abs(Y)) && Math.abs(k - P) <= 1e-6 * Math.max(1, Math.abs(k), Math.abs(P)) && Math.abs(y - O) <= 1e-6 * Math.max(1, Math.abs(y), Math.abs(O)) && Math.abs(M - N) <= 1e-6 * Math.max(1, Math.abs(M), Math.abs(N)) && Math.abs(T - v) <= 1e-6 * Math.max(1, Math.abs(T), Math.abs(v)) && Math.abs(m - re) <= 1e-6 * Math.max(1, Math.abs(m), Math.abs(re)) && Math.abs(R - ie) <= 1e-6 * Math.max(1, Math.abs(R), Math.abs(ie));
        }
      }, {
        key: "str",
        value: function str(e) {
          return "Mat4(".concat(e.join(", "), ")");
        }
      }]);
    }(/*#__PURE__*/_wrapNativeSuper(Float64Array));
  se = new WeakMap(), C = new WeakMap(), G(A, se, new Float64Array([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1])), G(A, C, new Float64Array(3));
  var j = A;
  j.prototype.mul = j.prototype.multiply;
  j.sub = j.subtract;
  j.mul = j.multiply;
  j.frustum = j.frustumNO;
  j.perspective = j.perspectiveNO;
  j.ortho = j.orthoNO;
  j.normalFromMat4Fast = j.normalFromMat4;
  var E = /*#__PURE__*/function (_Float64Array5) {
    function w() {
      var _this5;
      _classCallCheck(this, w);
      for (var _len9 = arguments.length, e = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
        e[_key9] = arguments[_key9];
      }
      switch (e.length) {
        case 3:
          _this5 = _callSuper(this, w, [e]);
          break;
        case 2:
          _this5 = _callSuper(this, w, [e[0], e[1], 3]);
          break;
        case 1:
          {
            var t = e[0];
            t === void 0 ? _this5 = _callSuper(this, w, [3]) : typeof t == "number" ? _this5 = _callSuper(this, w, [[t, t, t]]) : _this5 = _callSuper(this, w, [t, 0, 3]);
            break;
          }
        default:
          _this5 = _callSuper(this, w, [3]);
          break;
      }
      return _assertThisInitialized(_this5);
    }
    _inherits(w, _Float64Array5);
    return _createClass(w, [{
      key: "x",
      get: function get() {
        return this[0];
      },
      set: function set(e) {
        this[0] = e;
      }
    }, {
      key: "y",
      get: function get() {
        return this[1];
      },
      set: function set(e) {
        this[1] = e;
      }
    }, {
      key: "z",
      get: function get() {
        return this[2];
      },
      set: function set(e) {
        this[2] = e;
      }
    }, {
      key: "r",
      get: function get() {
        return this[0];
      },
      set: function set(e) {
        this[0] = e;
      }
    }, {
      key: "g",
      get: function get() {
        return this[1];
      },
      set: function set(e) {
        this[1] = e;
      }
    }, {
      key: "b",
      get: function get() {
        return this[2];
      },
      set: function set(e) {
        this[2] = e;
      }
    }, {
      key: "magnitude",
      get: function get() {
        var e = this[0],
          t = this[1],
          n = this[2];
        return Math.sqrt(e * e + t * t + n * n);
      }
    }, {
      key: "mag",
      get: function get() {
        return this.magnitude;
      }
    }, {
      key: "squaredMagnitude",
      get: function get() {
        var e = this[0],
          t = this[1],
          n = this[2];
        return e * e + t * t + n * n;
      }
    }, {
      key: "sqrMag",
      get: function get() {
        return this.squaredMagnitude;
      }
    }, {
      key: "str",
      get: function get() {
        return w.str(this);
      }
    }, {
      key: "copy",
      value: function copy(e) {
        return this.set(e), this;
      }
    }, {
      key: "add",
      value: function add(e) {
        return this[0] += e[0], this[1] += e[1], this[2] += e[2], this;
      }
    }, {
      key: "subtract",
      value: function subtract(e) {
        return this[0] -= e[0], this[1] -= e[1], this[2] -= e[2], this;
      }
    }, {
      key: "sub",
      value: function sub(e) {
        return this;
      }
    }, {
      key: "multiply",
      value: function multiply(e) {
        return this[0] *= e[0], this[1] *= e[1], this[2] *= e[2], this;
      }
    }, {
      key: "mul",
      value: function mul(e) {
        return this;
      }
    }, {
      key: "divide",
      value: function divide(e) {
        return this[0] /= e[0], this[1] /= e[1], this[2] /= e[2], this;
      }
    }, {
      key: "div",
      value: function div(e) {
        return this;
      }
    }, {
      key: "scale",
      value: function scale(e) {
        return this[0] *= e, this[1] *= e, this[2] *= e, this;
      }
    }, {
      key: "scaleAndAdd",
      value: function scaleAndAdd(e, t) {
        return this[0] += e[0] * t, this[1] += e[1] * t, this[2] += e[2] * t, this;
      }
    }, {
      key: "distance",
      value: function distance(e) {
        return w.distance(this, e);
      }
    }, {
      key: "dist",
      value: function dist(e) {
        return 0;
      }
    }, {
      key: "squaredDistance",
      value: function squaredDistance(e) {
        return w.squaredDistance(this, e);
      }
    }, {
      key: "sqrDist",
      value: function sqrDist(e) {
        return 0;
      }
    }, {
      key: "negate",
      value: function negate() {
        return this[0] *= -1, this[1] *= -1, this[2] *= -1, this;
      }
    }, {
      key: "invert",
      value: function invert() {
        return this[0] = 1 / this[0], this[1] = 1 / this[1], this[2] = 1 / this[2], this;
      }
    }, {
      key: "abs",
      value: function abs() {
        return this[0] = Math.abs(this[0]), this[1] = Math.abs(this[1]), this[2] = Math.abs(this[2]), this;
      }
    }, {
      key: "dot",
      value: function dot(e) {
        return this[0] * e[0] + this[1] * e[1] + this[2] * e[2];
      }
    }, {
      key: "normalize",
      value: function normalize() {
        return w.normalize(this, this);
      }
    }], [{
      key: "BYTE_LENGTH",
      get: function get() {
        return 3 * Float64Array.BYTES_PER_ELEMENT;
      }
    }, {
      key: "create",
      value: function create() {
        return new w();
      }
    }, {
      key: "clone",
      value: function clone(e) {
        return new w(e);
      }
    }, {
      key: "magnitude",
      value: function magnitude(e) {
        var t = e[0],
          n = e[1],
          s = e[2];
        return Math.sqrt(t * t + n * n + s * s);
      }
    }, {
      key: "mag",
      value: function mag(e) {
        return 0;
      }
    }, {
      key: "length",
      value: function length(e) {
        return 0;
      }
    }, {
      key: "len",
      value: function len(e) {
        return 0;
      }
    }, {
      key: "fromValues",
      value: function fromValues(e, t, n) {
        return new w(e, t, n);
      }
    }, {
      key: "copy",
      value: function copy(e, t) {
        return e[0] = t[0], e[1] = t[1], e[2] = t[2], e;
      }
    }, {
      key: "set",
      value: function set(e, t, n, s) {
        return e[0] = t, e[1] = n, e[2] = s, e;
      }
    }, {
      key: "add",
      value: function add(e, t, n) {
        return e[0] = t[0] + n[0], e[1] = t[1] + n[1], e[2] = t[2] + n[2], e;
      }
    }, {
      key: "subtract",
      value: function subtract(e, t, n) {
        return e[0] = t[0] - n[0], e[1] = t[1] - n[1], e[2] = t[2] - n[2], e;
      }
    }, {
      key: "sub",
      value: function sub(e, t, n) {
        return e;
      }
    }, {
      key: "multiply",
      value: function multiply(e, t, n) {
        return e[0] = t[0] * n[0], e[1] = t[1] * n[1], e[2] = t[2] * n[2], e;
      }
    }, {
      key: "mul",
      value: function mul(e, t, n) {
        return e;
      }
    }, {
      key: "divide",
      value: function divide(e, t, n) {
        return e[0] = t[0] / n[0], e[1] = t[1] / n[1], e[2] = t[2] / n[2], e;
      }
    }, {
      key: "div",
      value: function div(e, t, n) {
        return e;
      }
    }, {
      key: "ceil",
      value: function ceil(e, t) {
        return e[0] = Math.ceil(t[0]), e[1] = Math.ceil(t[1]), e[2] = Math.ceil(t[2]), e;
      }
    }, {
      key: "floor",
      value: function floor(e, t) {
        return e[0] = Math.floor(t[0]), e[1] = Math.floor(t[1]), e[2] = Math.floor(t[2]), e;
      }
    }, {
      key: "min",
      value: function min(e, t, n) {
        return e[0] = Math.min(t[0], n[0]), e[1] = Math.min(t[1], n[1]), e[2] = Math.min(t[2], n[2]), e;
      }
    }, {
      key: "max",
      value: function max(e, t, n) {
        return e[0] = Math.max(t[0], n[0]), e[1] = Math.max(t[1], n[1]), e[2] = Math.max(t[2], n[2]), e;
      }
    }, {
      key: "scale",
      value: function scale(e, t, n) {
        return e[0] = t[0] * n, e[1] = t[1] * n, e[2] = t[2] * n, e;
      }
    }, {
      key: "scaleAndAdd",
      value: function scaleAndAdd(e, t, n, s) {
        return e[0] = t[0] + n[0] * s, e[1] = t[1] + n[1] * s, e[2] = t[2] + n[2] * s, e;
      }
    }, {
      key: "distance",
      value: function distance(e, t) {
        var n = t[0] - e[0],
          s = t[1] - e[1],
          r = t[2] - e[2];
        return Math.sqrt(n * n + s * s + r * r);
      }
    }, {
      key: "dist",
      value: function dist(e, t) {
        return 0;
      }
    }, {
      key: "squaredDistance",
      value: function squaredDistance(e, t) {
        var n = t[0] - e[0],
          s = t[1] - e[1],
          r = t[2] - e[2];
        return n * n + s * s + r * r;
      }
    }, {
      key: "sqrDist",
      value: function sqrDist(e, t) {
        return 0;
      }
    }, {
      key: "squaredLength",
      value: function squaredLength(e) {
        var t = e[0],
          n = e[1],
          s = e[2];
        return t * t + n * n + s * s;
      }
    }, {
      key: "sqrLen",
      value: function sqrLen(e, t) {
        return 0;
      }
    }, {
      key: "negate",
      value: function negate(e, t) {
        return e[0] = -t[0], e[1] = -t[1], e[2] = -t[2], e;
      }
    }, {
      key: "inverse",
      value: function inverse(e, t) {
        return e[0] = 1 / t[0], e[1] = 1 / t[1], e[2] = 1 / t[2], e;
      }
    }, {
      key: "abs",
      value: function abs(e, t) {
        return e[0] = Math.abs(t[0]), e[1] = Math.abs(t[1]), e[2] = Math.abs(t[2]), e;
      }
    }, {
      key: "normalize",
      value: function normalize(e, t) {
        var n = t[0],
          s = t[1],
          r = t[2],
          i = n * n + s * s + r * r;
        return i > 0 && (i = 1 / Math.sqrt(i)), e[0] = t[0] * i, e[1] = t[1] * i, e[2] = t[2] * i, e;
      }
    }, {
      key: "dot",
      value: function dot(e, t) {
        return e[0] * t[0] + e[1] * t[1] + e[2] * t[2];
      }
    }, {
      key: "cross",
      value: function cross(e, t, n) {
        var s = t[0],
          r = t[1],
          i = t[2],
          a = n[0],
          c = n[1],
          d = n[2];
        return e[0] = r * d - i * c, e[1] = i * a - s * d, e[2] = s * c - r * a, e;
      }
    }, {
      key: "lerp",
      value: function lerp(e, t, n, s) {
        var r = t[0],
          i = t[1],
          a = t[2];
        return e[0] = r + s * (n[0] - r), e[1] = i + s * (n[1] - i), e[2] = a + s * (n[2] - a), e;
      }
    }, {
      key: "slerp",
      value: function slerp(e, t, n, s) {
        var r = Math.acos(Math.min(Math.max(w.dot(t, n), -1), 1)),
          i = Math.sin(r),
          a = Math.sin((1 - s) * r) / i,
          c = Math.sin(s * r) / i;
        return e[0] = a * t[0] + c * n[0], e[1] = a * t[1] + c * n[1], e[2] = a * t[2] + c * n[2], e;
      }
    }, {
      key: "hermite",
      value: function hermite(e, t, n, s, r, i) {
        var a = i * i,
          c = a * (2 * i - 3) + 1,
          d = a * (i - 2) + i,
          l = a * (i - 1),
          L = a * (3 - 2 * i);
        return e[0] = t[0] * c + n[0] * d + s[0] * l + r[0] * L, e[1] = t[1] * c + n[1] * d + s[1] * l + r[1] * L, e[2] = t[2] * c + n[2] * d + s[2] * l + r[2] * L, e;
      }
    }, {
      key: "bezier",
      value: function bezier(e, t, n, s, r, i) {
        var a = 1 - i,
          c = a * a,
          d = i * i,
          l = c * a,
          L = 3 * i * c,
          h = 3 * d * a,
          k = d * i;
        return e[0] = t[0] * l + n[0] * L + s[0] * h + r[0] * k, e[1] = t[1] * l + n[1] * L + s[1] * h + r[1] * k, e[2] = t[2] * l + n[2] * L + s[2] * h + r[2] * k, e;
      }
    }, {
      key: "transformMat4",
      value: function transformMat4(e, t, n) {
        var s = t[0],
          r = t[1],
          i = t[2],
          a = n[3] * s + n[7] * r + n[11] * i + n[15] || 1;
        return e[0] = (n[0] * s + n[4] * r + n[8] * i + n[12]) / a, e[1] = (n[1] * s + n[5] * r + n[9] * i + n[13]) / a, e[2] = (n[2] * s + n[6] * r + n[10] * i + n[14]) / a, e;
      }
    }, {
      key: "transformMat3",
      value: function transformMat3(e, t, n) {
        var s = t[0],
          r = t[1],
          i = t[2];
        return e[0] = s * n[0] + r * n[3] + i * n[6], e[1] = s * n[1] + r * n[4] + i * n[7], e[2] = s * n[2] + r * n[5] + i * n[8], e;
      }
    }, {
      key: "transformQuat",
      value: function transformQuat(e, t, n) {
        var s = n[0],
          r = n[1],
          i = n[2],
          a = n[3] * 2,
          c = t[0],
          d = t[1],
          l = t[2],
          L = r * l - i * d,
          h = i * c - s * l,
          k = s * d - r * c,
          y = (r * k - i * h) * 2,
          M = (i * L - s * k) * 2,
          T = (s * h - r * L) * 2;
        return e[0] = c + L * a + y, e[1] = d + h * a + M, e[2] = l + k * a + T, e;
      }
    }, {
      key: "rotateX",
      value: function rotateX(e, t, n, s) {
        var r = n[1],
          i = n[2],
          a = t[1] - r,
          c = t[2] - i;
        return e[0] = t[0], e[1] = a * Math.cos(s) - c * Math.sin(s) + r, e[2] = a * Math.sin(s) + c * Math.cos(s) + i, e;
      }
    }, {
      key: "rotateY",
      value: function rotateY(e, t, n, s) {
        var r = n[0],
          i = n[2],
          a = t[0] - r,
          c = t[2] - i;
        return e[0] = c * Math.sin(s) + a * Math.cos(s) + r, e[1] = t[1], e[2] = c * Math.cos(s) - a * Math.sin(s) + i, e;
      }
    }, {
      key: "rotateZ",
      value: function rotateZ(e, t, n, s) {
        var r = n[0],
          i = n[1],
          a = t[0] - r,
          c = t[1] - i;
        return e[0] = a * Math.cos(s) - c * Math.sin(s) + r, e[1] = a * Math.sin(s) + c * Math.cos(s) + i, e[2] = n[2], e;
      }
    }, {
      key: "angle",
      value: function angle(e, t) {
        var n = e[0],
          s = e[1],
          r = e[2],
          i = t[0],
          a = t[1],
          c = t[2],
          d = Math.sqrt((n * n + s * s + r * r) * (i * i + a * a + c * c)),
          l = d && w.dot(e, t) / d;
        return Math.acos(Math.min(Math.max(l, -1), 1));
      }
    }, {
      key: "zero",
      value: function zero(e) {
        return e[0] = 0, e[1] = 0, e[2] = 0, e;
      }
    }, {
      key: "str",
      value: function str(e) {
        return "Vec3(".concat(e.join(", "), ")");
      }
    }, {
      key: "exactEquals",
      value: function exactEquals(e, t) {
        return e[0] === t[0] && e[1] === t[1] && e[2] === t[2];
      }
    }, {
      key: "equals",
      value: function equals(e, t) {
        var n = e[0],
          s = e[1],
          r = e[2],
          i = t[0],
          a = t[1],
          c = t[2];
        return Math.abs(n - i) <= 1e-6 * Math.max(1, Math.abs(n), Math.abs(i)) && Math.abs(s - a) <= 1e-6 * Math.max(1, Math.abs(s), Math.abs(a)) && Math.abs(r - c) <= 1e-6 * Math.max(1, Math.abs(r), Math.abs(c));
      }
    }]);
  }(/*#__PURE__*/_wrapNativeSuper(Float64Array));
  E.prototype.sub = E.prototype.subtract;
  E.prototype.mul = E.prototype.multiply;
  E.prototype.div = E.prototype.divide;
  E.prototype.dist = E.prototype.distance;
  E.prototype.sqrDist = E.prototype.squaredDistance;
  E.sub = E.subtract;
  E.mul = E.multiply;
  E.div = E.divide;
  E.dist = E.distance;
  E.sqrDist = E.squaredDistance;
  E.sqrLen = E.squaredLength;
  E.mag = E.magnitude;
  E.length = E.magnitude;
  E.len = E.magnitude;
  var q = /*#__PURE__*/function (_Float64Array6) {
    function w() {
      var _this6;
      _classCallCheck(this, w);
      for (var _len0 = arguments.length, e = new Array(_len0), _key0 = 0; _key0 < _len0; _key0++) {
        e[_key0] = arguments[_key0];
      }
      switch (e.length) {
        case 4:
          _this6 = _callSuper(this, w, [e]);
          break;
        case 2:
          _this6 = _callSuper(this, w, [e[0], e[1], 4]);
          break;
        case 1:
          {
            var t = e[0];
            t === void 0 ? _this6 = _callSuper(this, w, [4]) : typeof t == "number" ? _this6 = _callSuper(this, w, [[t, t, t, t]]) : _this6 = _callSuper(this, w, [t, 0, 4]);
            break;
          }
        default:
          _this6 = _callSuper(this, w, [4]);
          break;
      }
      return _assertThisInitialized(_this6);
    }
    _inherits(w, _Float64Array6);
    return _createClass(w, [{
      key: "x",
      get: function get() {
        return this[0];
      },
      set: function set(e) {
        this[0] = e;
      }
    }, {
      key: "y",
      get: function get() {
        return this[1];
      },
      set: function set(e) {
        this[1] = e;
      }
    }, {
      key: "z",
      get: function get() {
        return this[2];
      },
      set: function set(e) {
        this[2] = e;
      }
    }, {
      key: "w",
      get: function get() {
        return this[3];
      },
      set: function set(e) {
        this[3] = e;
      }
    }, {
      key: "r",
      get: function get() {
        return this[0];
      },
      set: function set(e) {
        this[0] = e;
      }
    }, {
      key: "g",
      get: function get() {
        return this[1];
      },
      set: function set(e) {
        this[1] = e;
      }
    }, {
      key: "b",
      get: function get() {
        return this[2];
      },
      set: function set(e) {
        this[2] = e;
      }
    }, {
      key: "a",
      get: function get() {
        return this[3];
      },
      set: function set(e) {
        this[3] = e;
      }
    }, {
      key: "magnitude",
      get: function get() {
        var e = this[0],
          t = this[1],
          n = this[2],
          s = this[3];
        return Math.sqrt(e * e + t * t + n * n + s * s);
      }
    }, {
      key: "mag",
      get: function get() {
        return this.magnitude;
      }
    }, {
      key: "str",
      get: function get() {
        return w.str(this);
      }
    }, {
      key: "copy",
      value: function copy(e) {
        return _superPropGet(w, "set", this)([e]), this;
      }
    }, {
      key: "add",
      value: function add(e) {
        return this[0] += e[0], this[1] += e[1], this[2] += e[2], this[3] += e[3], this;
      }
    }, {
      key: "subtract",
      value: function subtract(e) {
        return this[0] -= e[0], this[1] -= e[1], this[2] -= e[2], this[3] -= e[3], this;
      }
    }, {
      key: "sub",
      value: function sub(e) {
        return this;
      }
    }, {
      key: "multiply",
      value: function multiply(e) {
        return this[0] *= e[0], this[1] *= e[1], this[2] *= e[2], this[3] *= e[3], this;
      }
    }, {
      key: "mul",
      value: function mul(e) {
        return this;
      }
    }, {
      key: "divide",
      value: function divide(e) {
        return this[0] /= e[0], this[1] /= e[1], this[2] /= e[2], this[3] /= e[3], this;
      }
    }, {
      key: "div",
      value: function div(e) {
        return this;
      }
    }, {
      key: "scale",
      value: function scale(e) {
        return this[0] *= e, this[1] *= e, this[2] *= e, this[3] *= e, this;
      }
    }, {
      key: "scaleAndAdd",
      value: function scaleAndAdd(e, t) {
        return this[0] += e[0] * t, this[1] += e[1] * t, this[2] += e[2] * t, this[3] += e[3] * t, this;
      }
    }, {
      key: "distance",
      value: function distance(e) {
        return w.distance(this, e);
      }
    }, {
      key: "dist",
      value: function dist(e) {
        return 0;
      }
    }, {
      key: "squaredDistance",
      value: function squaredDistance(e) {
        return w.squaredDistance(this, e);
      }
    }, {
      key: "sqrDist",
      value: function sqrDist(e) {
        return 0;
      }
    }, {
      key: "negate",
      value: function negate() {
        return this[0] *= -1, this[1] *= -1, this[2] *= -1, this[3] *= -1, this;
      }
    }, {
      key: "invert",
      value: function invert() {
        return this[0] = 1 / this[0], this[1] = 1 / this[1], this[2] = 1 / this[2], this[3] = 1 / this[3], this;
      }
    }, {
      key: "abs",
      value: function abs() {
        return this[0] = Math.abs(this[0]), this[1] = Math.abs(this[1]), this[2] = Math.abs(this[2]), this[3] = Math.abs(this[3]), this;
      }
    }, {
      key: "dot",
      value: function dot(e) {
        return this[0] * e[0] + this[1] * e[1] + this[2] * e[2] + this[3] * e[3];
      }
    }, {
      key: "normalize",
      value: function normalize() {
        return w.normalize(this, this);
      }
    }], [{
      key: "BYTE_LENGTH",
      get: function get() {
        return 4 * Float64Array.BYTES_PER_ELEMENT;
      }
    }, {
      key: "create",
      value: function create() {
        return new w();
      }
    }, {
      key: "clone",
      value: function clone(e) {
        return new w(e);
      }
    }, {
      key: "fromValues",
      value: function fromValues(e, t, n, s) {
        return new w(e, t, n, s);
      }
    }, {
      key: "copy",
      value: function copy(e, t) {
        return e[0] = t[0], e[1] = t[1], e[2] = t[2], e[3] = t[3], e;
      }
    }, {
      key: "set",
      value: function set(e, t, n, s, r) {
        return e[0] = t, e[1] = n, e[2] = s, e[3] = r, e;
      }
    }, {
      key: "add",
      value: function add(e, t, n) {
        return e[0] = t[0] + n[0], e[1] = t[1] + n[1], e[2] = t[2] + n[2], e[3] = t[3] + n[3], e;
      }
    }, {
      key: "subtract",
      value: function subtract(e, t, n) {
        return e[0] = t[0] - n[0], e[1] = t[1] - n[1], e[2] = t[2] - n[2], e[3] = t[3] - n[3], e;
      }
    }, {
      key: "sub",
      value: function sub(e, t, n) {
        return e;
      }
    }, {
      key: "multiply",
      value: function multiply(e, t, n) {
        return e[0] = t[0] * n[0], e[1] = t[1] * n[1], e[2] = t[2] * n[2], e[3] = t[3] * n[3], e;
      }
    }, {
      key: "mul",
      value: function mul(e, t, n) {
        return e;
      }
    }, {
      key: "divide",
      value: function divide(e, t, n) {
        return e[0] = t[0] / n[0], e[1] = t[1] / n[1], e[2] = t[2] / n[2], e[3] = t[3] / n[3], e;
      }
    }, {
      key: "div",
      value: function div(e, t, n) {
        return e;
      }
    }, {
      key: "ceil",
      value: function ceil(e, t) {
        return e[0] = Math.ceil(t[0]), e[1] = Math.ceil(t[1]), e[2] = Math.ceil(t[2]), e[3] = Math.ceil(t[3]), e;
      }
    }, {
      key: "floor",
      value: function floor(e, t) {
        return e[0] = Math.floor(t[0]), e[1] = Math.floor(t[1]), e[2] = Math.floor(t[2]), e[3] = Math.floor(t[3]), e;
      }
    }, {
      key: "min",
      value: function min(e, t, n) {
        return e[0] = Math.min(t[0], n[0]), e[1] = Math.min(t[1], n[1]), e[2] = Math.min(t[2], n[2]), e[3] = Math.min(t[3], n[3]), e;
      }
    }, {
      key: "max",
      value: function max(e, t, n) {
        return e[0] = Math.max(t[0], n[0]), e[1] = Math.max(t[1], n[1]), e[2] = Math.max(t[2], n[2]), e[3] = Math.max(t[3], n[3]), e;
      }
    }, {
      key: "round",
      value: function round(e, t) {
        return e[0] = Math.round(t[0]), e[1] = Math.round(t[1]), e[2] = Math.round(t[2]), e[3] = Math.round(t[3]), e;
      }
    }, {
      key: "scale",
      value: function scale(e, t, n) {
        return e[0] = t[0] * n, e[1] = t[1] * n, e[2] = t[2] * n, e[3] = t[3] * n, e;
      }
    }, {
      key: "scaleAndAdd",
      value: function scaleAndAdd(e, t, n, s) {
        return e[0] = t[0] + n[0] * s, e[1] = t[1] + n[1] * s, e[2] = t[2] + n[2] * s, e[3] = t[3] + n[3] * s, e;
      }
    }, {
      key: "distance",
      value: function distance(e, t) {
        var n = t[0] - e[0],
          s = t[1] - e[1],
          r = t[2] - e[2],
          i = t[3] - e[3];
        return Math.hypot(n, s, r, i);
      }
    }, {
      key: "dist",
      value: function dist(e, t) {
        return 0;
      }
    }, {
      key: "squaredDistance",
      value: function squaredDistance(e, t) {
        var n = t[0] - e[0],
          s = t[1] - e[1],
          r = t[2] - e[2],
          i = t[3] - e[3];
        return n * n + s * s + r * r + i * i;
      }
    }, {
      key: "sqrDist",
      value: function sqrDist(e, t) {
        return 0;
      }
    }, {
      key: "magnitude",
      value: function magnitude(e) {
        var t = e[0],
          n = e[1],
          s = e[2],
          r = e[3];
        return Math.sqrt(t * t + n * n + s * s + r * r);
      }
    }, {
      key: "mag",
      value: function mag(e) {
        return 0;
      }
    }, {
      key: "length",
      value: function length(e) {
        return 0;
      }
    }, {
      key: "len",
      value: function len(e) {
        return 0;
      }
    }, {
      key: "squaredLength",
      value: function squaredLength(e) {
        var t = e[0],
          n = e[1],
          s = e[2],
          r = e[3];
        return t * t + n * n + s * s + r * r;
      }
    }, {
      key: "sqrLen",
      value: function sqrLen(e) {
        return 0;
      }
    }, {
      key: "negate",
      value: function negate(e, t) {
        return e[0] = -t[0], e[1] = -t[1], e[2] = -t[2], e[3] = -t[3], e;
      }
    }, {
      key: "inverse",
      value: function inverse(e, t) {
        return e[0] = 1 / t[0], e[1] = 1 / t[1], e[2] = 1 / t[2], e[3] = 1 / t[3], e;
      }
    }, {
      key: "abs",
      value: function abs(e, t) {
        return e[0] = Math.abs(t[0]), e[1] = Math.abs(t[1]), e[2] = Math.abs(t[2]), e[3] = Math.abs(t[3]), e;
      }
    }, {
      key: "normalize",
      value: function normalize(e, t) {
        var n = t[0],
          s = t[1],
          r = t[2],
          i = t[3],
          a = n * n + s * s + r * r + i * i;
        return a > 0 && (a = 1 / Math.sqrt(a)), e[0] = n * a, e[1] = s * a, e[2] = r * a, e[3] = i * a, e;
      }
    }, {
      key: "dot",
      value: function dot(e, t) {
        return e[0] * t[0] + e[1] * t[1] + e[2] * t[2] + e[3] * t[3];
      }
    }, {
      key: "cross",
      value: function cross(e, t, n, s) {
        var r = n[0] * s[1] - n[1] * s[0],
          i = n[0] * s[2] - n[2] * s[0],
          a = n[0] * s[3] - n[3] * s[0],
          c = n[1] * s[2] - n[2] * s[1],
          d = n[1] * s[3] - n[3] * s[1],
          l = n[2] * s[3] - n[3] * s[2],
          L = t[0],
          h = t[1],
          k = t[2],
          y = t[3];
        return e[0] = h * l - k * d + y * c, e[1] = -(L * l) + k * a - y * i, e[2] = L * d - h * a + y * r, e[3] = -(L * c) + h * i - k * r, e;
      }
    }, {
      key: "lerp",
      value: function lerp(e, t, n, s) {
        var r = t[0],
          i = t[1],
          a = t[2],
          c = t[3];
        return e[0] = r + s * (n[0] - r), e[1] = i + s * (n[1] - i), e[2] = a + s * (n[2] - a), e[3] = c + s * (n[3] - c), e;
      }
    }, {
      key: "transformMat4",
      value: function transformMat4(e, t, n) {
        var s = t[0],
          r = t[1],
          i = t[2],
          a = t[3];
        return e[0] = n[0] * s + n[4] * r + n[8] * i + n[12] * a, e[1] = n[1] * s + n[5] * r + n[9] * i + n[13] * a, e[2] = n[2] * s + n[6] * r + n[10] * i + n[14] * a, e[3] = n[3] * s + n[7] * r + n[11] * i + n[15] * a, e;
      }
    }, {
      key: "transformQuat",
      value: function transformQuat(e, t, n) {
        var s = t[0],
          r = t[1],
          i = t[2],
          a = n[0],
          c = n[1],
          d = n[2],
          l = n[3],
          L = l * s + c * i - d * r,
          h = l * r + d * s - a * i,
          k = l * i + a * r - c * s,
          y = -a * s - c * r - d * i;
        return e[0] = L * l + y * -a + h * -d - k * -c, e[1] = h * l + y * -c + k * -a - L * -d, e[2] = k * l + y * -d + L * -c - h * -a, e[3] = t[3], e;
      }
    }, {
      key: "zero",
      value: function zero(e) {
        return e[0] = 0, e[1] = 0, e[2] = 0, e[3] = 0, e;
      }
    }, {
      key: "str",
      value: function str(e) {
        return "Vec4(".concat(e.join(", "), ")");
      }
    }, {
      key: "exactEquals",
      value: function exactEquals(e, t) {
        return e[0] === t[0] && e[1] === t[1] && e[2] === t[2] && e[3] === t[3];
      }
    }, {
      key: "equals",
      value: function equals(e, t) {
        var n = e[0],
          s = e[1],
          r = e[2],
          i = e[3],
          a = t[0],
          c = t[1],
          d = t[2],
          l = t[3];
        return Math.abs(n - a) <= 1e-6 * Math.max(1, Math.abs(n), Math.abs(a)) && Math.abs(s - c) <= 1e-6 * Math.max(1, Math.abs(s), Math.abs(c)) && Math.abs(r - d) <= 1e-6 * Math.max(1, Math.abs(r), Math.abs(d)) && Math.abs(i - l) <= 1e-6 * Math.max(1, Math.abs(i), Math.abs(l));
      }
    }]);
  }(/*#__PURE__*/_wrapNativeSuper(Float64Array));
  q.prototype.sub = q.prototype.subtract;
  q.prototype.mul = q.prototype.multiply;
  q.prototype.div = q.prototype.divide;
  q.prototype.dist = q.prototype.distance;
  q.prototype.sqrDist = q.prototype.squaredDistance;
  q.sub = q.subtract;
  q.mul = q.multiply;
  q.div = q.divide;
  q.dist = q.distance;
  q.sqrDist = q.squaredDistance;
  q.sqrLen = q.squaredLength;
  q.mag = q.magnitude;
  q.length = q.magnitude;
  q.len = q.magnitude;
  var ke = new Float64Array([0, 0, 0, 1]),
    Le,
    ae,
    ce,
    U,
    W,
    he,
    ye,
    Q = /*#__PURE__*/function (_Float64Array7) {
      function Q() {
        var _this7;
        _classCallCheck(this, Q);
        for (var _len1 = arguments.length, e = new Array(_len1), _key1 = 0; _key1 < _len1; _key1++) {
          e[_key1] = arguments[_key1];
        }
        switch (e.length) {
          case 4:
            _this7 = _callSuper(this, Q, [e]);
            break;
          case 2:
            _this7 = _callSuper(this, Q, [e[0], e[1], 4]);
            break;
          case 1:
            {
              var t = e[0];
              t === void 0 ? _this7 = _callSuper(this, Q, [ke]) : typeof t == "number" ? _this7 = _callSuper(this, Q, [[t, t, t, t]]) : _this7 = _callSuper(this, Q, [t, 0, 4]);
              break;
            }
          default:
            _this7 = _callSuper(this, Q, [ke]);
            break;
        }
        return _assertThisInitialized(_this7);
      }
      _inherits(Q, _Float64Array7);
      return _createClass(Q, [{
        key: "x",
        get: function get() {
          return this[0];
        },
        set: function set(e) {
          this[0] = e;
        }
      }, {
        key: "y",
        get: function get() {
          return this[1];
        },
        set: function set(e) {
          this[1] = e;
        }
      }, {
        key: "z",
        get: function get() {
          return this[2];
        },
        set: function set(e) {
          this[2] = e;
        }
      }, {
        key: "w",
        get: function get() {
          return this[3];
        },
        set: function set(e) {
          this[3] = e;
        }
      }, {
        key: "magnitude",
        get: function get() {
          var e = this[0],
            t = this[1],
            n = this[2],
            s = this[3];
          return Math.sqrt(e * e + t * t + n * n + s * s);
        }
      }, {
        key: "mag",
        get: function get() {
          return this.magnitude;
        }
      }, {
        key: "str",
        get: function get() {
          return Q.str(this);
        }
      }, {
        key: "copy",
        value: function copy(e) {
          return _superPropGet(Q, "set", this)([e]), this;
        }
      }, {
        key: "identity",
        value: function identity() {
          return this.set(ke), this;
        }
      }, {
        key: "multiply",
        value: function multiply(e) {
          return Q.multiply(this, this, e);
        }
      }, {
        key: "mul",
        value: function mul(e) {
          return this;
        }
      }, {
        key: "rotateX",
        value: function rotateX(e) {
          return Q.rotateX(this, this, e);
        }
      }, {
        key: "rotateY",
        value: function rotateY(e) {
          return Q.rotateY(this, this, e);
        }
      }, {
        key: "rotateZ",
        value: function rotateZ(e) {
          return Q.rotateZ(this, this, e);
        }
      }, {
        key: "invert",
        value: function invert() {
          return Q.invert(this, this);
        }
      }, {
        key: "scale",
        value: function scale(e) {
          return this[0] *= e, this[1] *= e, this[2] *= e, this[3] *= e, this;
        }
      }, {
        key: "dot",
        value: function dot(e) {
          return Q.dot(this, e);
        }
      }], [{
        key: "BYTE_LENGTH",
        get: function get() {
          return 4 * Float64Array.BYTES_PER_ELEMENT;
        }
      }, {
        key: "create",
        value: function create() {
          return new Q();
        }
      }, {
        key: "identity",
        value: function identity(e) {
          return e[0] = 0, e[1] = 0, e[2] = 0, e[3] = 1, e;
        }
      }, {
        key: "setAxisAngle",
        value: function setAxisAngle(e, t, n) {
          n *= .5;
          var s = Math.sin(n);
          return e[0] = s * t[0], e[1] = s * t[1], e[2] = s * t[2], e[3] = Math.cos(n), e;
        }
      }, {
        key: "getAxisAngle",
        value: function getAxisAngle(e, t) {
          var n = Math.acos(t[3]) * 2,
            s = Math.sin(n / 2);
          return s > 1e-6 ? (e[0] = t[0] / s, e[1] = t[1] / s, e[2] = t[2] / s) : (e[0] = 1, e[1] = 0, e[2] = 0), n;
        }
      }, {
        key: "getAngle",
        value: function getAngle(e, t) {
          var n = Q.dot(e, t);
          return Math.acos(2 * n * n - 1);
        }
      }, {
        key: "multiply",
        value: function multiply(e, t, n) {
          var s = t[0],
            r = t[1],
            i = t[2],
            a = t[3],
            c = n[0],
            d = n[1],
            l = n[2],
            L = n[3];
          return e[0] = s * L + a * c + r * l - i * d, e[1] = r * L + a * d + i * c - s * l, e[2] = i * L + a * l + s * d - r * c, e[3] = a * L - s * c - r * d - i * l, e;
        }
      }, {
        key: "rotateX",
        value: function rotateX(e, t, n) {
          n *= .5;
          var s = t[0],
            r = t[1],
            i = t[2],
            a = t[3],
            c = Math.sin(n),
            d = Math.cos(n);
          return e[0] = s * d + a * c, e[1] = r * d + i * c, e[2] = i * d - r * c, e[3] = a * d - s * c, e;
        }
      }, {
        key: "rotateY",
        value: function rotateY(e, t, n) {
          n *= .5;
          var s = t[0],
            r = t[1],
            i = t[2],
            a = t[3],
            c = Math.sin(n),
            d = Math.cos(n);
          return e[0] = s * d - i * c, e[1] = r * d + a * c, e[2] = i * d + s * c, e[3] = a * d - r * c, e;
        }
      }, {
        key: "rotateZ",
        value: function rotateZ(e, t, n) {
          n *= .5;
          var s = t[0],
            r = t[1],
            i = t[2],
            a = t[3],
            c = Math.sin(n),
            d = Math.cos(n);
          return e[0] = s * d + r * c, e[1] = r * d - s * c, e[2] = i * d + a * c, e[3] = a * d - i * c, e;
        }
      }, {
        key: "calculateW",
        value: function calculateW(e, t) {
          var n = t[0],
            s = t[1],
            r = t[2];
          return e[0] = n, e[1] = s, e[2] = r, e[3] = Math.sqrt(Math.abs(1 - n * n - s * s - r * r)), e;
        }
      }, {
        key: "exp",
        value: function exp(e, t) {
          var n = t[0],
            s = t[1],
            r = t[2],
            i = t[3],
            a = Math.sqrt(n * n + s * s + r * r),
            c = Math.exp(i),
            d = a > 0 ? c * Math.sin(a) / a : 0;
          return e[0] = n * d, e[1] = s * d, e[2] = r * d, e[3] = c * Math.cos(a), e;
        }
      }, {
        key: "ln",
        value: function ln(e, t) {
          var n = t[0],
            s = t[1],
            r = t[2],
            i = t[3],
            a = Math.sqrt(n * n + s * s + r * r),
            c = a > 0 ? Math.atan2(a, i) / a : 0;
          return e[0] = n * c, e[1] = s * c, e[2] = r * c, e[3] = .5 * Math.log(n * n + s * s + r * r + i * i), e;
        }
      }, {
        key: "pow",
        value: function pow(e, t, n) {
          return Q.ln(e, t), Q.scale(e, e, n), Q.exp(e, e), e;
        }
      }, {
        key: "slerp",
        value: function slerp(e, t, n, s) {
          var r = t[0],
            i = t[1],
            a = t[2],
            c = t[3],
            d = n[0],
            l = n[1],
            L = n[2],
            h = n[3],
            k,
            y,
            M = r * d + i * l + a * L + c * h;
          if (M < 0 && (M = -M, d = -d, l = -l, L = -L, h = -h), 1 - M > 1e-6) {
            var T = Math.acos(M),
              m = Math.sin(T);
            k = Math.sin((1 - s) * T) / m, y = Math.sin(s * T) / m;
          } else k = 1 - s, y = s;
          return e[0] = k * r + y * d, e[1] = k * i + y * l, e[2] = k * a + y * L, e[3] = k * c + y * h, e;
        }
      }, {
        key: "invert",
        value: function invert(e, t) {
          var n = t[0],
            s = t[1],
            r = t[2],
            i = t[3],
            a = n * n + s * s + r * r + i * i,
            c = a ? 1 / a : 0;
          return e[0] = -n * c, e[1] = -s * c, e[2] = -r * c, e[3] = i * c, e;
        }
      }, {
        key: "conjugate",
        value: function conjugate(e, t) {
          return e[0] = -t[0], e[1] = -t[1], e[2] = -t[2], e[3] = t[3], e;
        }
      }, {
        key: "fromMat3",
        value: function fromMat3(e, t) {
          var n = t[0] + t[4] + t[8],
            s;
          if (n > 0) s = Math.sqrt(n + 1), e[3] = .5 * s, s = .5 / s, e[0] = (t[5] - t[7]) * s, e[1] = (t[6] - t[2]) * s, e[2] = (t[1] - t[3]) * s;else {
            var r = 0;
            t[4] > t[0] && (r = 1), t[8] > t[r * 3 + r] && (r = 2);
            var i = (r + 1) % 3,
              a = (r + 2) % 3;
            s = Math.sqrt(t[r * 3 + r] - t[i * 3 + i] - t[a * 3 + a] + 1), e[r] = .5 * s, s = .5 / s, e[3] = (t[i * 3 + a] - t[a * 3 + i]) * s, e[i] = (t[i * 3 + r] + t[r * 3 + i]) * s, e[a] = (t[a * 3 + r] + t[r * 3 + a]) * s;
          }
          return e;
        }
      }, {
        key: "fromEuler",
        value: function fromEuler(e, t, n, s) {
          var r = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : f(Q, Le);
          var i = .5 * Math.PI / 180;
          t *= i, n *= i, s *= i;
          var a = Math.sin(t),
            c = Math.cos(t),
            d = Math.sin(n),
            l = Math.cos(n),
            L = Math.sin(s),
            h = Math.cos(s);
          switch (r) {
            case "xyz":
              e[0] = a * l * h + c * d * L, e[1] = c * d * h - a * l * L, e[2] = c * l * L + a * d * h, e[3] = c * l * h - a * d * L;
              break;
            case "xzy":
              e[0] = a * l * h - c * d * L, e[1] = c * d * h - a * l * L, e[2] = c * l * L + a * d * h, e[3] = c * l * h + a * d * L;
              break;
            case "yxz":
              e[0] = a * l * h + c * d * L, e[1] = c * d * h - a * l * L, e[2] = c * l * L - a * d * h, e[3] = c * l * h + a * d * L;
              break;
            case "yzx":
              e[0] = a * l * h + c * d * L, e[1] = c * d * h + a * l * L, e[2] = c * l * L - a * d * h, e[3] = c * l * h - a * d * L;
              break;
            case "zxy":
              e[0] = a * l * h - c * d * L, e[1] = c * d * h + a * l * L, e[2] = c * l * L + a * d * h, e[3] = c * l * h - a * d * L;
              break;
            case "zyx":
              e[0] = a * l * h - c * d * L, e[1] = c * d * h + a * l * L, e[2] = c * l * L - a * d * h, e[3] = c * l * h + a * d * L;
              break;
            default:
              throw new Error("Unknown angle order ".concat(r));
          }
          return e;
        }
      }, {
        key: "str",
        value: function str(e) {
          return "Quat(".concat(e.join(", "), ")");
        }
      }, {
        key: "clone",
        value: function clone(e) {
          return new Q(e);
        }
      }, {
        key: "fromValues",
        value: function fromValues(e, t, n, s) {
          return new Q(e, t, n, s);
        }
      }, {
        key: "copy",
        value: function copy(e, t) {
          return e[0] = t[0], e[1] = t[1], e[2] = t[2], e[3] = t[3], e;
        }
      }, {
        key: "set",
        value: function set(e, t, n, s, r) {
          return e;
        }
      }, {
        key: "add",
        value: function add(e, t, n) {
          return e;
        }
      }, {
        key: "mul",
        value: function mul(e, t, n) {
          return e;
        }
      }, {
        key: "scale",
        value: function scale(e, t, n) {
          return e[0] = t[0] * n, e[1] = t[1] * n, e[2] = t[2] * n, e[3] = t[3] * n, e;
        }
      }, {
        key: "dot",
        value: function dot(e, t) {
          return e[0] * t[0] + e[1] * t[1] + e[2] * t[2] + e[3] * t[3];
        }
      }, {
        key: "lerp",
        value: function lerp(e, t, n, s) {
          return e;
        }
      }, {
        key: "magnitude",
        value: function magnitude(e) {
          return 0;
        }
      }, {
        key: "mag",
        value: function mag(e) {
          return 0;
        }
      }, {
        key: "length",
        value: function length(e) {
          return 0;
        }
      }, {
        key: "len",
        value: function len(e) {
          return 0;
        }
      }, {
        key: "squaredLength",
        value: function squaredLength(e) {
          return 0;
        }
      }, {
        key: "sqrLen",
        value: function sqrLen(e) {
          return 0;
        }
      }, {
        key: "normalize",
        value: function normalize(e, t) {
          return e;
        }
      }, {
        key: "exactEquals",
        value: function exactEquals(e, t) {
          return false;
        }
      }, {
        key: "equals",
        value: function equals(e, t) {
          return false;
        }
      }, {
        key: "rotationTo",
        value: function rotationTo(e, t, n) {
          var s = E.dot(t, n);
          return s < -0.999999 ? (E.cross(f(Q, W), f(Q, he), t), E.mag(f(Q, W)) < 1e-6 && E.cross(f(Q, W), f(Q, ye), t), E.normalize(f(Q, W), f(Q, W)), Q.setAxisAngle(e, f(Q, W), Math.PI), e) : s > .999999 ? (e[0] = 0, e[1] = 0, e[2] = 0, e[3] = 1, e) : (E.cross(f(Q, W), t, n), e[0] = f(Q, W)[0], e[1] = f(Q, W)[1], e[2] = f(Q, W)[2], e[3] = 1 + s, Q.normalize(e, e));
        }
      }, {
        key: "sqlerp",
        value: function sqlerp(e, t, n, s, r, i) {
          return Q.slerp(f(Q, ae), t, r, i), Q.slerp(f(Q, ce), n, s, i), Q.slerp(e, f(Q, ae), f(Q, ce), 2 * i * (1 - i)), e;
        }
      }, {
        key: "setAxes",
        value: function setAxes(e, t, n, s) {
          return f(Q, U)[0] = n[0], f(Q, U)[3] = n[1], f(Q, U)[6] = n[2], f(Q, U)[1] = s[0], f(Q, U)[4] = s[1], f(Q, U)[7] = s[2], f(Q, U)[2] = -t[0], f(Q, U)[5] = -t[1], f(Q, U)[8] = -t[2], Q.normalize(e, Q.fromMat3(e, f(Q, U)));
        }
      }]);
    }(/*#__PURE__*/_wrapNativeSuper(Float64Array));
  Le = new WeakMap(), ae = new WeakMap(), ce = new WeakMap(), U = new WeakMap(), W = new WeakMap(), he = new WeakMap(), ye = new WeakMap(), G(Q, Le, "zyx"), G(Q, ae, new Float64Array(4)), G(Q, ce, new Float64Array(4)), G(Q, U, new Float64Array(9)), G(Q, W, new Float64Array(3)), G(Q, he, new Float64Array([1, 0, 0])), G(Q, ye, new Float64Array([0, 1, 0]));
  var F = Q;
  F.set = q.set;
  F.add = q.add;
  F.lerp = q.lerp;
  F.normalize = q.normalize;
  F.squaredLength = q.squaredLength;
  F.sqrLen = q.squaredLength;
  F.exactEquals = q.exactEquals;
  F.equals = q.equals;
  F.magnitude = q.magnitude;
  F.prototype.mul = F.prototype.multiply;
  F.mul = F.multiply;
  F.mag = F.magnitude;
  F.length = F.magnitude;
  F.len = F.magnitude;
  var Re = new Float64Array([0, 0, 0, 1, 0, 0, 0, 0]),
    de,
    le,
    Z = /*#__PURE__*/function (_Float64Array8) {
      function Z() {
        var _this8;
        _classCallCheck(this, Z);
        for (var _len10 = arguments.length, e = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
          e[_key10] = arguments[_key10];
        }
        switch (e.length) {
          case 8:
            _this8 = _callSuper(this, Z, [e]);
            break;
          case 2:
            _this8 = _callSuper(this, Z, [e[0], e[1], 8]);
            break;
          case 1:
            {
              var t = e[0];
              t === void 0 ? _this8 = _callSuper(this, Z, [Re]) : typeof t == "number" ? _this8 = _callSuper(this, Z, [[t, t, t, t, t, t, t, t]]) : _this8 = _callSuper(this, Z, [t, 0, 8]);
              break;
            }
          default:
            _this8 = _callSuper(this, Z, [Re]);
            break;
        }
        return _assertThisInitialized(_this8);
      }
      _inherits(Z, _Float64Array8);
      return _createClass(Z, [{
        key: "str",
        get: function get() {
          return Z.str(this);
        }
      }, {
        key: "copy",
        value: function copy(e) {
          return _superPropGet(Z, "set", this)([e]), this;
        }
      }], [{
        key: "BYTE_LENGTH",
        get: function get() {
          return 8 * Float64Array.BYTES_PER_ELEMENT;
        }
      }, {
        key: "create",
        value: function create() {
          return new Z();
        }
      }, {
        key: "clone",
        value: function clone(e) {
          return new Z(e);
        }
      }, {
        key: "fromValues",
        value: function fromValues(e, t, n, s, r, i, a, c) {
          return new Z(e, t, n, s, r, i, a, c);
        }
      }, {
        key: "fromRotationTranslationValues",
        value: function fromRotationTranslationValues(e, t, n, s, r, i, a) {
          var c = r * .5,
            d = i * .5,
            l = a * .5;
          return new Z(e, t, n, s, c * s + d * n - l * t, d * s + l * e - c * n, l * s + c * t - d * e, -c * e - d * t - l * n);
        }
      }, {
        key: "fromRotationTranslation",
        value: function fromRotationTranslation(e, t, n) {
          var s = n[0] * .5,
            r = n[1] * .5,
            i = n[2] * .5,
            a = t[0],
            c = t[1],
            d = t[2],
            l = t[3];
          return e[0] = a, e[1] = c, e[2] = d, e[3] = l, e[4] = s * l + r * d - i * c, e[5] = r * l + i * a - s * d, e[6] = i * l + s * c - r * a, e[7] = -s * a - r * c - i * d, e;
        }
      }, {
        key: "fromTranslation",
        value: function fromTranslation(e, t) {
          return e[0] = 0, e[1] = 0, e[2] = 0, e[3] = 1, e[4] = t[0] * .5, e[5] = t[1] * .5, e[6] = t[2] * .5, e[7] = 0, e;
        }
      }, {
        key: "fromRotation",
        value: function fromRotation(e, t) {
          return e[0] = t[0], e[1] = t[1], e[2] = t[2], e[3] = t[3], e[4] = 0, e[5] = 0, e[6] = 0, e[7] = 0, e;
        }
      }, {
        key: "fromMat4",
        value: function fromMat4(e, t) {
          return j.getRotation(f(Z, de), t), j.getTranslation(f(Z, le), t), Z.fromRotationTranslation(e, f(Z, de), f(Z, le));
        }
      }, {
        key: "copy",
        value: function copy(e, t) {
          return e[0] = t[0], e[1] = t[1], e[2] = t[2], e[3] = t[3], e[4] = t[4], e[5] = t[5], e[6] = t[6], e[7] = t[7], e;
        }
      }, {
        key: "identity",
        value: function identity(e) {
          return e[0] = 0, e[1] = 0, e[2] = 0, e[3] = 1, e[4] = 0, e[5] = 0, e[6] = 0, e[7] = 0, e;
        }
      }, {
        key: "set",
        value: function set(e, t, n, s, r, i, a, c, d) {
          return e[0] = t, e[1] = n, e[2] = s, e[3] = r, e[4] = i, e[5] = a, e[6] = c, e[7] = d, e;
        }
      }, {
        key: "getReal",
        value: function getReal(e, t) {
          return e[0] = t[0], e[1] = t[1], e[2] = t[2], e[3] = t[3], e;
        }
      }, {
        key: "getDual",
        value: function getDual(e, t) {
          return e[0] = t[4], e[1] = t[5], e[2] = t[6], e[3] = t[7], e;
        }
      }, {
        key: "setReal",
        value: function setReal(e, t) {
          return e[0] = t[0], e[1] = t[1], e[2] = t[2], e[3] = t[3], e;
        }
      }, {
        key: "setDual",
        value: function setDual(e, t) {
          return e[4] = t[0], e[5] = t[1], e[6] = t[2], e[7] = t[3], e;
        }
      }, {
        key: "getTranslation",
        value: function getTranslation(e, t) {
          var n = t[4],
            s = t[5],
            r = t[6],
            i = t[7],
            a = -t[0],
            c = -t[1],
            d = -t[2],
            l = t[3];
          return e[0] = (n * l + i * a + s * d - r * c) * 2, e[1] = (s * l + i * c + r * a - n * d) * 2, e[2] = (r * l + i * d + n * c - s * a) * 2, e;
        }
      }, {
        key: "translate",
        value: function translate(e, t, n) {
          var s = t[0],
            r = t[1],
            i = t[2],
            a = t[3],
            c = n[0] * .5,
            d = n[1] * .5,
            l = n[2] * .5,
            L = t[4],
            h = t[5],
            k = t[6],
            y = t[7];
          return e[0] = s, e[1] = r, e[2] = i, e[3] = a, e[4] = a * c + r * l - i * d + L, e[5] = a * d + i * c - s * l + h, e[6] = a * l + s * d - r * c + k, e[7] = -s * c - r * d - i * l + y, e;
        }
      }, {
        key: "rotateX",
        value: function rotateX(e, t, n) {
          var s = -t[0],
            r = -t[1],
            i = -t[2],
            a = t[3],
            c = t[4],
            d = t[5],
            l = t[6],
            L = t[7],
            h = c * a + L * s + d * i - l * r,
            k = d * a + L * r + l * s - c * i,
            y = l * a + L * i + c * r - d * s,
            M = L * a - c * s - d * r - l * i;
          return F.rotateX(e, t, n), s = e[0], r = e[1], i = e[2], a = e[3], e[4] = h * a + M * s + k * i - y * r, e[5] = k * a + M * r + y * s - h * i, e[6] = y * a + M * i + h * r - k * s, e[7] = M * a - h * s - k * r - y * i, e;
        }
      }, {
        key: "rotateY",
        value: function rotateY(e, t, n) {
          var s = -t[0],
            r = -t[1],
            i = -t[2],
            a = t[3],
            c = t[4],
            d = t[5],
            l = t[6],
            L = t[7],
            h = c * a + L * s + d * i - l * r,
            k = d * a + L * r + l * s - c * i,
            y = l * a + L * i + c * r - d * s,
            M = L * a - c * s - d * r - l * i;
          return F.rotateY(e, t, n), s = e[0], r = e[1], i = e[2], a = e[3], e[4] = h * a + M * s + k * i - y * r, e[5] = k * a + M * r + y * s - h * i, e[6] = y * a + M * i + h * r - k * s, e[7] = M * a - h * s - k * r - y * i, e;
        }
      }, {
        key: "rotateZ",
        value: function rotateZ(e, t, n) {
          var s = -t[0],
            r = -t[1],
            i = -t[2],
            a = t[3],
            c = t[4],
            d = t[5],
            l = t[6],
            L = t[7],
            h = c * a + L * s + d * i - l * r,
            k = d * a + L * r + l * s - c * i,
            y = l * a + L * i + c * r - d * s,
            M = L * a - c * s - d * r - l * i;
          return F.rotateZ(e, t, n), s = e[0], r = e[1], i = e[2], a = e[3], e[4] = h * a + M * s + k * i - y * r, e[5] = k * a + M * r + y * s - h * i, e[6] = y * a + M * i + h * r - k * s, e[7] = M * a - h * s - k * r - y * i, e;
        }
      }, {
        key: "rotateByQuatAppend",
        value: function rotateByQuatAppend(e, t, n) {
          var s = n[0],
            r = n[1],
            i = n[2],
            a = n[3],
            c = t[0],
            d = t[1],
            l = t[2],
            L = t[3];
          return e[0] = c * a + L * s + d * i - l * r, e[1] = d * a + L * r + l * s - c * i, e[2] = l * a + L * i + c * r - d * s, e[3] = L * a - c * s - d * r - l * i, c = t[4], d = t[5], l = t[6], L = t[7], e[4] = c * a + L * s + d * i - l * r, e[5] = d * a + L * r + l * s - c * i, e[6] = l * a + L * i + c * r - d * s, e[7] = L * a - c * s - d * r - l * i, e;
        }
      }, {
        key: "rotateByQuatPrepend",
        value: function rotateByQuatPrepend(e, t, n) {
          var s = t[0],
            r = t[1],
            i = t[2],
            a = t[3],
            c = n[0],
            d = n[1],
            l = n[2],
            L = n[3];
          return e[0] = s * L + a * c + r * l - i * d, e[1] = r * L + a * d + i * c - s * l, e[2] = i * L + a * l + s * d - r * c, e[3] = a * L - s * c - r * d - i * l, c = n[4], d = n[5], l = n[6], L = n[7], e[4] = s * L + a * c + r * l - i * d, e[5] = r * L + a * d + i * c - s * l, e[6] = i * L + a * l + s * d - r * c, e[7] = a * L - s * c - r * d - i * l, e;
        }
      }, {
        key: "rotateAroundAxis",
        value: function rotateAroundAxis(e, t, n, s) {
          if (Math.abs(s) < 1e-6) return Z.copy(e, t);
          var r = Math.sqrt(n[0] * n[0] + n[1] * n[1] + n[2] * n[2]);
          s *= .5;
          var i = Math.sin(s),
            a = i * n[0] / r,
            c = i * n[1] / r,
            d = i * n[2] / r,
            l = Math.cos(s),
            L = t[0],
            h = t[1],
            k = t[2],
            y = t[3];
          e[0] = L * l + y * a + h * d - k * c, e[1] = h * l + y * c + k * a - L * d, e[2] = k * l + y * d + L * c - h * a, e[3] = y * l - L * a - h * c - k * d;
          var M = t[4],
            T = t[5],
            m = t[6],
            R = t[7];
          return e[4] = M * l + R * a + T * d - m * c, e[5] = T * l + R * c + m * a - M * d, e[6] = m * l + R * d + M * c - T * a, e[7] = R * l - M * a - T * c - m * d, e;
        }
      }, {
        key: "add",
        value: function add(e, t, n) {
          return e[0] = t[0] + n[0], e[1] = t[1] + n[1], e[2] = t[2] + n[2], e[3] = t[3] + n[3], e[4] = t[4] + n[4], e[5] = t[5] + n[5], e[6] = t[6] + n[6], e[7] = t[7] + n[7], e;
        }
      }, {
        key: "multiply",
        value: function multiply(e, t, n) {
          var s = t[0],
            r = t[1],
            i = t[2],
            a = t[3],
            c = n[4],
            d = n[5],
            l = n[6],
            L = n[7],
            h = t[4],
            k = t[5],
            y = t[6],
            M = t[7],
            T = n[0],
            m = n[1],
            R = n[2],
            x = n[3];
          return e[0] = s * x + a * T + r * R - i * m, e[1] = r * x + a * m + i * T - s * R, e[2] = i * x + a * R + s * m - r * T, e[3] = a * x - s * T - r * m - i * R, e[4] = s * L + a * c + r * l - i * d + h * x + M * T + k * R - y * m, e[5] = r * L + a * d + i * c - s * l + k * x + M * m + y * T - h * R, e[6] = i * L + a * l + s * d - r * c + y * x + M * R + h * m - k * T, e[7] = a * L - s * c - r * d - i * l + M * x - h * T - k * m - y * R, e;
        }
      }, {
        key: "mul",
        value: function mul(e, t, n) {
          return e;
        }
      }, {
        key: "scale",
        value: function scale(e, t, n) {
          return e[0] = t[0] * n, e[1] = t[1] * n, e[2] = t[2] * n, e[3] = t[3] * n, e[4] = t[4] * n, e[5] = t[5] * n, e[6] = t[6] * n, e[7] = t[7] * n, e;
        }
      }, {
        key: "dot",
        value: function dot(e, t) {
          return 0;
        }
      }, {
        key: "lerp",
        value: function lerp(e, t, n, s) {
          var r = 1 - s;
          return Z.dot(t, n) < 0 && (s = -s), e[0] = t[0] * r + n[0] * s, e[1] = t[1] * r + n[1] * s, e[2] = t[2] * r + n[2] * s, e[3] = t[3] * r + n[3] * s, e[4] = t[4] * r + n[4] * s, e[5] = t[5] * r + n[5] * s, e[6] = t[6] * r + n[6] * s, e[7] = t[7] * r + n[7] * s, e;
        }
      }, {
        key: "invert",
        value: function invert(e, t) {
          var n = Z.squaredLength(t);
          return e[0] = -t[0] / n, e[1] = -t[1] / n, e[2] = -t[2] / n, e[3] = t[3] / n, e[4] = -t[4] / n, e[5] = -t[5] / n, e[6] = -t[6] / n, e[7] = t[7] / n, e;
        }
      }, {
        key: "conjugate",
        value: function conjugate(e, t) {
          return e[0] = -t[0], e[1] = -t[1], e[2] = -t[2], e[3] = t[3], e[4] = -t[4], e[5] = -t[5], e[6] = -t[6], e[7] = t[7], e;
        }
      }, {
        key: "magnitude",
        value: function magnitude(e) {
          return 0;
        }
      }, {
        key: "mag",
        value: function mag(e) {
          return 0;
        }
      }, {
        key: "length",
        value: function length(e) {
          return 0;
        }
      }, {
        key: "len",
        value: function len(e) {
          return 0;
        }
      }, {
        key: "squaredLength",
        value: function squaredLength(e) {
          return 0;
        }
      }, {
        key: "sqrLen",
        value: function sqrLen(e) {
          return 0;
        }
      }, {
        key: "normalize",
        value: function normalize(e, t) {
          var n = Z.squaredLength(t);
          if (n > 0) {
            n = Math.sqrt(n);
            var s = t[0] / n,
              r = t[1] / n,
              i = t[2] / n,
              a = t[3] / n,
              c = t[4],
              d = t[5],
              l = t[6],
              L = t[7],
              h = s * c + r * d + i * l + a * L;
            e[0] = s, e[1] = r, e[2] = i, e[3] = a, e[4] = (c - s * h) / n, e[5] = (d - r * h) / n, e[6] = (l - i * h) / n, e[7] = (L - a * h) / n;
          }
          return e;
        }
      }, {
        key: "str",
        value: function str(e) {
          return "Quat2(".concat(e.join(", "), ")");
        }
      }, {
        key: "exactEquals",
        value: function exactEquals(e, t) {
          return e[0] === t[0] && e[1] === t[1] && e[2] === t[2] && e[3] === t[3] && e[4] === t[4] && e[5] === t[5] && e[6] === t[6] && e[7] === t[7];
        }
      }, {
        key: "equals",
        value: function equals(e, t) {
          var n = e[0],
            s = e[1],
            r = e[2],
            i = e[3],
            a = e[4],
            c = e[5],
            d = e[6],
            l = e[7],
            L = t[0],
            h = t[1],
            k = t[2],
            y = t[3],
            M = t[4],
            T = t[5],
            m = t[6],
            R = t[7];
          return Math.abs(n - L) <= 1e-6 * Math.max(1, Math.abs(n), Math.abs(L)) && Math.abs(s - h) <= 1e-6 * Math.max(1, Math.abs(s), Math.abs(h)) && Math.abs(r - k) <= 1e-6 * Math.max(1, Math.abs(r), Math.abs(k)) && Math.abs(i - y) <= 1e-6 * Math.max(1, Math.abs(i), Math.abs(y)) && Math.abs(a - M) <= 1e-6 * Math.max(1, Math.abs(a), Math.abs(M)) && Math.abs(c - T) <= 1e-6 * Math.max(1, Math.abs(c), Math.abs(T)) && Math.abs(d - m) <= 1e-6 * Math.max(1, Math.abs(d), Math.abs(m)) && Math.abs(l - R) <= 1e-6 * Math.max(1, Math.abs(l), Math.abs(R));
        }
      }]);
    }(/*#__PURE__*/_wrapNativeSuper(Float64Array));
  de = new WeakMap(), le = new WeakMap(), G(Z, de, new Float64Array(4)), G(Z, le, new Float64Array(3));
  var K = Z;
  K.dot = F.dot;
  K.squaredLength = F.squaredLength;
  K.sqrLen = F.squaredLength;
  K.mag = F.magnitude;
  K.length = F.magnitude;
  K.len = F.magnitude;
  K.mul = K.multiply;
  var B = /*#__PURE__*/function (_Float64Array9) {
    function w() {
      var _this9;
      _classCallCheck(this, w);
      switch (arguments.length) {
        case 2:
          {
            var t = arguments.length <= 0 ? undefined : arguments[0];
            typeof t == "number" ? _this9 = _callSuper(this, w, [[t, arguments.length <= 1 ? undefined : arguments[1]]]) : _this9 = _callSuper(this, w, [t, arguments.length <= 1 ? undefined : arguments[1], 2]);
            break;
          }
        case 1:
          {
            var _t = arguments.length <= 0 ? undefined : arguments[0];
            _t === void 0 ? _this9 = _callSuper(this, w, [2]) : typeof _t == "number" ? _this9 = _callSuper(this, w, [[_t, _t]]) : _this9 = _callSuper(this, w, [_t, 0, 2]);
            break;
          }
        default:
          _this9 = _callSuper(this, w, [2]);
          break;
      }
      return _assertThisInitialized(_this9);
    }
    _inherits(w, _Float64Array9);
    return _createClass(w, [{
      key: "x",
      get: function get() {
        return this[0];
      },
      set: function set(e) {
        this[0] = e;
      }
    }, {
      key: "y",
      get: function get() {
        return this[1];
      },
      set: function set(e) {
        this[1] = e;
      }
    }, {
      key: "r",
      get: function get() {
        return this[0];
      },
      set: function set(e) {
        this[0] = e;
      }
    }, {
      key: "g",
      get: function get() {
        return this[1];
      },
      set: function set(e) {
        this[1] = e;
      }
    }, {
      key: "magnitude",
      get: function get() {
        return Math.hypot(this[0], this[1]);
      }
    }, {
      key: "mag",
      get: function get() {
        return this.magnitude;
      }
    }, {
      key: "squaredMagnitude",
      get: function get() {
        var e = this[0],
          t = this[1];
        return e * e + t * t;
      }
    }, {
      key: "sqrMag",
      get: function get() {
        return this.squaredMagnitude;
      }
    }, {
      key: "str",
      get: function get() {
        return w.str(this);
      }
    }, {
      key: "copy",
      value: function copy(e) {
        return this.set(e), this;
      }
    }, {
      key: "add",
      value: function add(e) {
        return this[0] += e[0], this[1] += e[1], this;
      }
    }, {
      key: "subtract",
      value: function subtract(e) {
        return this[0] -= e[0], this[1] -= e[1], this;
      }
    }, {
      key: "sub",
      value: function sub(e) {
        return this;
      }
    }, {
      key: "multiply",
      value: function multiply(e) {
        return this[0] *= e[0], this[1] *= e[1], this;
      }
    }, {
      key: "mul",
      value: function mul(e) {
        return this;
      }
    }, {
      key: "divide",
      value: function divide(e) {
        return this[0] /= e[0], this[1] /= e[1], this;
      }
    }, {
      key: "div",
      value: function div(e) {
        return this;
      }
    }, {
      key: "scale",
      value: function scale(e) {
        return this[0] *= e, this[1] *= e, this;
      }
    }, {
      key: "scaleAndAdd",
      value: function scaleAndAdd(e, t) {
        return this[0] += e[0] * t, this[1] += e[1] * t, this;
      }
    }, {
      key: "distance",
      value: function distance(e) {
        return w.distance(this, e);
      }
    }, {
      key: "dist",
      value: function dist(e) {
        return 0;
      }
    }, {
      key: "squaredDistance",
      value: function squaredDistance(e) {
        return w.squaredDistance(this, e);
      }
    }, {
      key: "sqrDist",
      value: function sqrDist(e) {
        return 0;
      }
    }, {
      key: "negate",
      value: function negate() {
        return this[0] *= -1, this[1] *= -1, this;
      }
    }, {
      key: "invert",
      value: function invert() {
        return this[0] = 1 / this[0], this[1] = 1 / this[1], this;
      }
    }, {
      key: "abs",
      value: function abs() {
        return this[0] = Math.abs(this[0]), this[1] = Math.abs(this[1]), this;
      }
    }, {
      key: "dot",
      value: function dot(e) {
        return this[0] * e[0] + this[1] * e[1];
      }
    }, {
      key: "normalize",
      value: function normalize() {
        return w.normalize(this, this);
      }
    }], [{
      key: "BYTE_LENGTH",
      get: function get() {
        return 2 * Float64Array.BYTES_PER_ELEMENT;
      }
    }, {
      key: "create",
      value: function create() {
        return new w();
      }
    }, {
      key: "clone",
      value: function clone(e) {
        return new w(e);
      }
    }, {
      key: "fromValues",
      value: function fromValues(e, t) {
        return new w(e, t);
      }
    }, {
      key: "copy",
      value: function copy(e, t) {
        return e[0] = t[0], e[1] = t[1], e;
      }
    }, {
      key: "set",
      value: function set(e, t, n) {
        return e[0] = t, e[1] = n, e;
      }
    }, {
      key: "add",
      value: function add(e, t, n) {
        return e[0] = t[0] + n[0], e[1] = t[1] + n[1], e;
      }
    }, {
      key: "subtract",
      value: function subtract(e, t, n) {
        return e[0] = t[0] - n[0], e[1] = t[1] - n[1], e;
      }
    }, {
      key: "sub",
      value: function sub(e, t, n) {
        return e;
      }
    }, {
      key: "multiply",
      value: function multiply(e, t, n) {
        return e[0] = t[0] * n[0], e[1] = t[1] * n[1], e;
      }
    }, {
      key: "mul",
      value: function mul(e, t, n) {
        return e;
      }
    }, {
      key: "divide",
      value: function divide(e, t, n) {
        return e[0] = t[0] / n[0], e[1] = t[1] / n[1], e;
      }
    }, {
      key: "div",
      value: function div(e, t, n) {
        return e;
      }
    }, {
      key: "ceil",
      value: function ceil(e, t) {
        return e[0] = Math.ceil(t[0]), e[1] = Math.ceil(t[1]), e;
      }
    }, {
      key: "floor",
      value: function floor(e, t) {
        return e[0] = Math.floor(t[0]), e[1] = Math.floor(t[1]), e;
      }
    }, {
      key: "min",
      value: function min(e, t, n) {
        return e[0] = Math.min(t[0], n[0]), e[1] = Math.min(t[1], n[1]), e;
      }
    }, {
      key: "max",
      value: function max(e, t, n) {
        return e[0] = Math.max(t[0], n[0]), e[1] = Math.max(t[1], n[1]), e;
      }
    }, {
      key: "round",
      value: function round(e, t) {
        return e[0] = Math.round(t[0]), e[1] = Math.round(t[1]), e;
      }
    }, {
      key: "scale",
      value: function scale(e, t, n) {
        return e[0] = t[0] * n, e[1] = t[1] * n, e;
      }
    }, {
      key: "scaleAndAdd",
      value: function scaleAndAdd(e, t, n, s) {
        return e[0] = t[0] + n[0] * s, e[1] = t[1] + n[1] * s, e;
      }
    }, {
      key: "distance",
      value: function distance(e, t) {
        return Math.hypot(t[0] - e[0], t[1] - e[1]);
      }
    }, {
      key: "dist",
      value: function dist(e, t) {
        return 0;
      }
    }, {
      key: "squaredDistance",
      value: function squaredDistance(e, t) {
        var n = t[0] - e[0],
          s = t[1] - e[1];
        return n * n + s * s;
      }
    }, {
      key: "sqrDist",
      value: function sqrDist(e, t) {
        return 0;
      }
    }, {
      key: "magnitude",
      value: function magnitude(e) {
        var t = e[0],
          n = e[1];
        return Math.sqrt(t * t + n * n);
      }
    }, {
      key: "mag",
      value: function mag(e) {
        return 0;
      }
    }, {
      key: "length",
      value: function length(e) {
        return 0;
      }
    }, {
      key: "len",
      value: function len(e) {
        return 0;
      }
    }, {
      key: "squaredLength",
      value: function squaredLength(e) {
        var t = e[0],
          n = e[1];
        return t * t + n * n;
      }
    }, {
      key: "sqrLen",
      value: function sqrLen(e, t) {
        return 0;
      }
    }, {
      key: "negate",
      value: function negate(e, t) {
        return e[0] = -t[0], e[1] = -t[1], e;
      }
    }, {
      key: "inverse",
      value: function inverse(e, t) {
        return e[0] = 1 / t[0], e[1] = 1 / t[1], e;
      }
    }, {
      key: "abs",
      value: function abs(e, t) {
        return e[0] = Math.abs(t[0]), e[1] = Math.abs(t[1]), e;
      }
    }, {
      key: "normalize",
      value: function normalize(e, t) {
        var n = t[0],
          s = t[1],
          r = n * n + s * s;
        return r > 0 && (r = 1 / Math.sqrt(r)), e[0] = t[0] * r, e[1] = t[1] * r, e;
      }
    }, {
      key: "dot",
      value: function dot(e, t) {
        return e[0] * t[0] + e[1] * t[1];
      }
    }, {
      key: "cross",
      value: function cross(e, t, n) {
        var s = t[0] * n[1] - t[1] * n[0];
        return e[0] = e[1] = 0, e[2] = s, e;
      }
    }, {
      key: "lerp",
      value: function lerp(e, t, n, s) {
        var r = t[0],
          i = t[1];
        return e[0] = r + s * (n[0] - r), e[1] = i + s * (n[1] - i), e;
      }
    }, {
      key: "transformMat2",
      value: function transformMat2(e, t, n) {
        var s = t[0],
          r = t[1];
        return e[0] = n[0] * s + n[2] * r, e[1] = n[1] * s + n[3] * r, e;
      }
    }, {
      key: "transformMat2d",
      value: function transformMat2d(e, t, n) {
        var s = t[0],
          r = t[1];
        return e[0] = n[0] * s + n[2] * r + n[4], e[1] = n[1] * s + n[3] * r + n[5], e;
      }
    }, {
      key: "transformMat3",
      value: function transformMat3(e, t, n) {
        var s = t[0],
          r = t[1];
        return e[0] = n[0] * s + n[3] * r + n[6], e[1] = n[1] * s + n[4] * r + n[7], e;
      }
    }, {
      key: "transformMat4",
      value: function transformMat4(e, t, n) {
        var s = t[0],
          r = t[1];
        return e[0] = n[0] * s + n[4] * r + n[12], e[1] = n[1] * s + n[5] * r + n[13], e;
      }
    }, {
      key: "rotate",
      value: function rotate(e, t, n, s) {
        var r = t[0] - n[0],
          i = t[1] - n[1],
          a = Math.sin(s),
          c = Math.cos(s);
        return e[0] = r * c - i * a + n[0], e[1] = r * a + i * c + n[1], e;
      }
    }, {
      key: "angle",
      value: function angle(e, t) {
        var n = e[0],
          s = e[1],
          r = t[0],
          i = t[1],
          a = Math.sqrt(n * n + s * s) * Math.sqrt(r * r + i * i),
          c = a && (n * r + s * i) / a;
        return Math.acos(Math.min(Math.max(c, -1), 1));
      }
    }, {
      key: "zero",
      value: function zero(e) {
        return e[0] = 0, e[1] = 0, e;
      }
    }, {
      key: "exactEquals",
      value: function exactEquals(e, t) {
        return e[0] === t[0] && e[1] === t[1];
      }
    }, {
      key: "equals",
      value: function equals(e, t) {
        var n = e[0],
          s = e[1],
          r = t[0],
          i = t[1];
        return Math.abs(n - r) <= 1e-6 * Math.max(1, Math.abs(n), Math.abs(r)) && Math.abs(s - i) <= 1e-6 * Math.max(1, Math.abs(s), Math.abs(i));
      }
    }, {
      key: "str",
      value: function str(e) {
        return "Vec2(".concat(e.join(", "), ")");
      }
    }]);
  }(/*#__PURE__*/_wrapNativeSuper(Float64Array));
  B.prototype.sub = B.prototype.subtract;
  B.prototype.mul = B.prototype.multiply;
  B.prototype.div = B.prototype.divide;
  B.prototype.dist = B.prototype.distance;
  B.prototype.sqrDist = B.prototype.squaredDistance;
  B.sub = B.subtract;
  B.mul = B.multiply;
  B.div = B.divide;
  B.dist = B.distance;
  B.sqrDist = B.squaredDistance;
  B.sqrLen = B.squaredLength;
  B.mag = B.magnitude;
  B.length = B.magnitude;
  B.len = B.magnitude;
  var be = Math.PI / 180,
    xe = 180 / Math.PI;
  function ve(w) {
    return w * xe;
  }
  function ue(w) {
    return w * be;
  }

  exports.Mat2 = u;
  exports.Mat2d = _;
  exports.Mat3 = J;
  exports.Mat4 = j;
  exports.Quat = F;
  exports.Quat2 = K;
  exports.Vec2 = B;
  exports.Vec3 = E;
  exports.Vec4 = q;
  exports.toDegree = ve;
  exports.toRadian = ue;

}));
//# sourceMappingURL=gl-matrix-f64.min.js.map
