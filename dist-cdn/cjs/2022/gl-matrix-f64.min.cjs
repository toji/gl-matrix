// gl-matrix - v4.0.0-beta.3 - A high performance matrix and vector library.
// @author Brandon Jones
// @author Colin MacKenzie IV
// @license MIT (https://github.com/toji/gl-matrix/blob/master/LICENSE.md)
var $=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var _=Object.prototype.hasOwnProperty;var ee=(h,e)=>{for(var t in e)$(h,t,{get:e[t],enumerable:!0})},te=(h,e,t,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let s of u(e))!_.call(h,s)&&s!==t&&$(h,s,{get:()=>e[s],enumerable:!(n=v(e,s))||n.enumerable});return h};var ne=h=>te($({},"__esModule",{value:!0}),h);var ye={};ee(ye,{EnableSwizzlesF64:()=>se,Mat2:()=>G,Mat2d:()=>j,Mat3:()=>O,Mat4:()=>P,Quat:()=>q,Quat2:()=>Y,Vec2:()=>E,Vec3:()=>Q,Vec4:()=>p,toDegree:()=>ie,toRadian:()=>ce});module.exports=ne(ye);var G=class h extends Float64Array{static#e=new Float64Array([1,0,0,1]);constructor(...e){switch(e.length){case 4:super(e);break;case 2:super(e[0],e[1],4);break;case 1:let t=e[0];t===void 0?super(h.#e):typeof t=="number"?super([t,t,t,t]):super(t,0,4);break;default:super(h.#e);break}}get str(){return h.str(this)}copy(e){return this.set(e),this}identity(){return this.set(h.#e),this}multiply(e){return h.multiply(this,this,e)}mul(e){return this}transpose(){return h.transpose(this,this)}invert(){return h.invert(this,this)}scale(e){return h.scale(this,this,e)}rotate(e){return h.rotate(this,this,e)}static get BYTE_LENGTH(){return 4*Float64Array.BYTES_PER_ELEMENT}static create(){return new h}static clone(e){return new h(e)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}static fromValues(...e){return new h(...e)}static set(e,...t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}static identity(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e}static transpose(e,t){if(e===t){let n=t[1];e[1]=t[2],e[2]=n}else e[0]=t[0],e[1]=t[2],e[2]=t[1],e[3]=t[3];return e}static invert(e,t){let n=t[0],s=t[1],r=t[2],a=t[3],i=n*a-r*s;return i?(i=1/i,e[0]=a*i,e[1]=-s*i,e[2]=-r*i,e[3]=n*i,e):null}static adjoint(e,t){let n=t[0];return e[0]=t[3],e[1]=-t[1],e[2]=-t[2],e[3]=n,e}static determinant(e){return e[0]*e[3]-e[2]*e[1]}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e}static subtract(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e}static sub(e,t,n){return e}static multiply(e,t,n){let s=t[0],r=t[1],a=t[2],i=t[3],c=n[0],y=n[1],d=n[2],l=n[3];return e[0]=s*c+a*y,e[1]=r*c+i*y,e[2]=s*d+a*l,e[3]=r*d+i*l,e}static mul(e,t,n){return e}static rotate(e,t,n){let s=t[0],r=t[1],a=t[2],i=t[3],c=Math.sin(n),y=Math.cos(n);return e[0]=s*y+a*c,e[1]=r*y+i*c,e[2]=s*-c+a*y,e[3]=r*-c+i*y,e}static scale(e,t,n){let s=t[0],r=t[1],a=t[2],i=t[3],c=n[0],y=n[1];return e[0]=s*c,e[1]=r*c,e[2]=a*y,e[3]=i*y,e}static fromRotation(e,t){let n=Math.sin(t),s=Math.cos(t);return e[0]=s,e[1]=n,e[2]=-n,e[3]=s,e}static fromScaling(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=t[1],e}static frob(e){return Math.sqrt(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]+e[3]*e[3])}static multiplyScalar(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e}static multiplyScalarAndAdd(e,t,n,s){return e[0]=t[0]+n[0]*s,e[1]=t[1]+n[1]*s,e[2]=t[2]+n[2]*s,e[3]=t[3]+n[3]*s,e}static LDU(e,t,n,s){return e[2]=s[2]/s[0],n[0]=s[0],n[1]=s[1],n[3]=s[3]-e[2]*n[1],[e,t,n]}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]}static equals(e,t){let n=e[0],s=e[1],r=e[2],a=e[3],i=t[0],c=t[1],y=t[2],d=t[3];return Math.abs(n-i)<=1e-6*Math.max(1,Math.abs(n),Math.abs(i))&&Math.abs(s-c)<=1e-6*Math.max(1,Math.abs(s),Math.abs(c))&&Math.abs(r-y)<=1e-6*Math.max(1,Math.abs(r),Math.abs(y))&&Math.abs(a-d)<=1e-6*Math.max(1,Math.abs(a),Math.abs(d))}static str(e){return`Mat2(${e.join(", ")})`}};G.prototype.mul=G.prototype.multiply;G.mul=G.multiply;G.sub=G.subtract;var j=class h extends Float64Array{static#e=new Float64Array([1,0,0,1,0,0]);constructor(...e){switch(e.length){case 6:super(e);break;case 2:super(e[0],e[1],6);break;case 1:let t=e[0];t===void 0?super(h.#e):typeof t=="number"?super([t,t,t,t,t,t]):super(t,0,6);break;default:super(h.#e);break}}get str(){return h.str(this)}copy(e){return this.set(e),this}identity(){return this.set(h.#e),this}multiply(e){return h.multiply(this,this,e)}mul(e){return this}translate(e){return h.translate(this,this,e)}rotate(e){return h.rotate(this,this,e)}scale(e){return h.scale(this,this,e)}static get BYTE_LENGTH(){return 6*Float64Array.BYTES_PER_ELEMENT}static create(){return new h}static clone(e){return new h(e)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e}static fromValues(...e){return new h(...e)}static set(e,...t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e}static identity(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e[4]=0,e[5]=0,e}static invert(e,t){let n=t[0],s=t[1],r=t[2],a=t[3],i=t[4],c=t[5],y=n*a-s*r;return y?(y=1/y,e[0]=a*y,e[1]=-s*y,e[2]=-r*y,e[3]=n*y,e[4]=(r*c-a*i)*y,e[5]=(s*i-n*c)*y,e):null}static determinant(e){return e[0]*e[3]-e[1]*e[2]}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e[4]=t[4]+n[4],e[5]=t[5]+n[5],e}static subtract(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e[4]=t[4]-n[4],e[5]=t[5]-n[5],e}static sub(e,t,n){return e}static multiply(e,t,n){let s=t[0],r=t[1],a=t[2],i=t[3],c=t[4],y=t[5],d=n[0],l=n[1],L=n[2],b=n[3],k=n[4],x=n[5];return e[0]=s*d+a*l,e[1]=r*d+i*l,e[2]=s*L+a*b,e[3]=r*L+i*b,e[4]=s*k+a*x+c,e[5]=r*k+i*x+y,e}static mul(e,t,n){return e}static translate(e,t,n){let s=t[0],r=t[1],a=t[2],i=t[3],c=t[4],y=t[5],d=n[0],l=n[1];return e[0]=s,e[1]=r,e[2]=a,e[3]=i,e[4]=s*d+a*l+c,e[5]=r*d+i*l+y,e}static rotate(e,t,n){let s=t[0],r=t[1],a=t[2],i=t[3],c=t[4],y=t[5],d=Math.sin(n),l=Math.cos(n);return e[0]=s*l+a*d,e[1]=r*l+i*d,e[2]=s*-d+a*l,e[3]=r*-d+i*l,e[4]=c,e[5]=y,e}static scale(e,t,n){let s=t[0],r=t[1],a=t[2],i=t[3],c=t[4],y=t[5],d=n[0],l=n[1];return e[0]=s*d,e[1]=r*d,e[2]=a*l,e[3]=i*l,e[4]=c,e[5]=y,e}static fromTranslation(e,t){return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e[4]=t[0],e[5]=t[1],e}static fromRotation(e,t){let n=Math.sin(t),s=Math.cos(t);return e[0]=s,e[1]=n,e[2]=-n,e[3]=s,e[4]=0,e[5]=0,e}static fromScaling(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=t[1],e[4]=0,e[5]=0,e}static frob(e){return Math.sqrt(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]+e[3]*e[3]+e[4]*e[4]+e[5]*e[5]+1)}static multiplyScalar(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*n,e[5]=t[5]*n,e}static multiplyScalarAndAdd(e,t,n,s){return e[0]=t[0]+n[0]*s,e[1]=t[1]+n[1]*s,e[2]=t[2]+n[2]*s,e[3]=t[3]+n[3]*s,e[4]=t[4]+n[4]*s,e[5]=t[5]+n[5]*s,e}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]}static equals(e,t){let n=e[0],s=e[1],r=e[2],a=e[3],i=e[4],c=e[5],y=t[0],d=t[1],l=t[2],L=t[3],b=t[4],k=t[5];return Math.abs(n-y)<=1e-6*Math.max(1,Math.abs(n),Math.abs(y))&&Math.abs(s-d)<=1e-6*Math.max(1,Math.abs(s),Math.abs(d))&&Math.abs(r-l)<=1e-6*Math.max(1,Math.abs(r),Math.abs(l))&&Math.abs(a-L)<=1e-6*Math.max(1,Math.abs(a),Math.abs(L))&&Math.abs(i-b)<=1e-6*Math.max(1,Math.abs(i),Math.abs(b))&&Math.abs(c-k)<=1e-6*Math.max(1,Math.abs(c),Math.abs(k))}static str(e){return`Mat2d(${e.join(", ")})`}};j.mul=j.multiply;j.sub=j.subtract;var O=class h extends Float64Array{static#e=new Float64Array([1,0,0,0,1,0,0,0,1]);constructor(...e){switch(e.length){case 9:super(e);break;case 2:super(e[0],e[1],9);break;case 1:let t=e[0];t===void 0?super(h.#e):typeof t=="number"?super([t,t,t,t,t,t,t,t,t]):super(t,0,9);break;default:super(h.#e);break}}get str(){return h.str(this)}copy(e){return this.set(e),this}identity(){return this.set(h.#e),this}multiply(e){return h.multiply(this,this,e)}mul(e){return this}transpose(){return h.transpose(this,this)}invert(){return h.invert(this,this)}translate(e){return h.translate(this,this,e)}rotate(e){return h.rotate(this,this,e)}scale(e){return h.scale(this,this,e)}static get BYTE_LENGTH(){return 9*Float64Array.BYTES_PER_ELEMENT}static create(){return new h}static clone(e){return new h(e)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}static fromValues(...e){return new h(...e)}static set(e,...t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}static identity(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}static transpose(e,t){if(e===t){let n=t[1],s=t[2],r=t[5];e[1]=t[3],e[2]=t[6],e[3]=n,e[5]=t[7],e[6]=s,e[7]=r}else e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8];return e}static invert(e,t){let n=t[0],s=t[1],r=t[2],a=t[3],i=t[4],c=t[5],y=t[6],d=t[7],l=t[8],L=l*i-c*d,b=-l*a+c*y,k=d*a-i*y,x=n*L+s*b+r*k;return x?(x=1/x,e[0]=L*x,e[1]=(-l*s+r*d)*x,e[2]=(c*s-r*i)*x,e[3]=b*x,e[4]=(l*n-r*y)*x,e[5]=(-c*n+r*a)*x,e[6]=k*x,e[7]=(-d*n+s*y)*x,e[8]=(i*n-s*a)*x,e):null}static adjoint(e,t){let n=t[0],s=t[1],r=t[2],a=t[3],i=t[4],c=t[5],y=t[6],d=t[7],l=t[8];return e[0]=i*l-c*d,e[1]=r*d-s*l,e[2]=s*c-r*i,e[3]=c*y-a*l,e[4]=n*l-r*y,e[5]=r*a-n*c,e[6]=a*d-i*y,e[7]=s*y-n*d,e[8]=n*i-s*a,e}static determinant(e){let t=e[0],n=e[1],s=e[2],r=e[3],a=e[4],i=e[5],c=e[6],y=e[7],d=e[8];return t*(d*a-i*y)+n*(-d*r+i*c)+s*(y*r-a*c)}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e[4]=t[4]+n[4],e[5]=t[5]+n[5],e[6]=t[6]+n[6],e[7]=t[7]+n[7],e[8]=t[8]+n[8],e}static subtract(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e[4]=t[4]-n[4],e[5]=t[5]-n[5],e[6]=t[6]-n[6],e[7]=t[7]-n[7],e[8]=t[8]-n[8],e}static sub(e,t,n){return e}static multiply(e,t,n){let s=t[0],r=t[1],a=t[2],i=t[3],c=t[4],y=t[5],d=t[6],l=t[7],L=t[8],b=n[0],k=n[1],x=n[2];return e[0]=b*s+k*i+x*d,e[1]=b*r+k*c+x*l,e[2]=b*a+k*y+x*L,b=n[3],k=n[4],x=n[5],e[3]=b*s+k*i+x*d,e[4]=b*r+k*c+x*l,e[5]=b*a+k*y+x*L,b=n[6],k=n[7],x=n[8],e[6]=b*s+k*i+x*d,e[7]=b*r+k*c+x*l,e[8]=b*a+k*y+x*L,e}static mul(e,t,n){return e}static translate(e,t,n){let s=t[0],r=t[1],a=t[2],i=t[3],c=t[4],y=t[5],d=t[6],l=t[7],L=t[8],b=n[0],k=n[1];return e[0]=s,e[1]=r,e[2]=a,e[3]=i,e[4]=c,e[5]=y,e[6]=b*s+k*i+d,e[7]=b*r+k*c+l,e[8]=b*a+k*y+L,e}static rotate(e,t,n){let s=t[0],r=t[1],a=t[2],i=t[3],c=t[4],y=t[5],d=t[6],l=t[7],L=t[8],b=Math.sin(n),k=Math.cos(n);return e[0]=k*s+b*i,e[1]=k*r+b*c,e[2]=k*a+b*y,e[3]=k*i-b*s,e[4]=k*c-b*r,e[5]=k*y-b*a,e[6]=d,e[7]=l,e[8]=L,e}static scale(e,t,n){let s=n[0],r=n[1];return e[0]=s*t[0],e[1]=s*t[1],e[2]=s*t[2],e[3]=r*t[3],e[4]=r*t[4],e[5]=r*t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}static fromTranslation(e,t){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=t[0],e[7]=t[1],e[8]=1,e}static fromRotation(e,t){let n=Math.sin(t),s=Math.cos(t);return e[0]=s,e[1]=n,e[2]=0,e[3]=-n,e[4]=s,e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}static fromScaling(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=0,e[4]=t[1],e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}static fromMat2d(e,t){return e[0]=t[0],e[1]=t[1],e[2]=0,e[3]=t[2],e[4]=t[3],e[5]=0,e[6]=t[4],e[7]=t[5],e[8]=1,e}static fromQuat(e,t){let n=t[0],s=t[1],r=t[2],a=t[3],i=n+n,c=s+s,y=r+r,d=n*i,l=s*i,L=s*c,b=r*i,k=r*c,x=r*y,M=a*i,T=a*c,m=a*y;return e[0]=1-L-x,e[3]=l-m,e[6]=b+T,e[1]=l+m,e[4]=1-d-x,e[7]=k-M,e[2]=b-T,e[5]=k+M,e[8]=1-d-L,e}static fromMat4(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[4],e[4]=t[5],e[5]=t[6],e[6]=t[8],e[7]=t[9],e[8]=t[10],e}static normalFromMat4(e,t){let n=t[0],s=t[1],r=t[2],a=t[4],i=t[5],c=t[6],y=t[8],d=t[9],l=t[10];return e[0]=i*l-c*d,e[1]=r*d-s*l,e[2]=s*c-r*i,e[3]=c*y-a*l,e[4]=n*l-r*y,e[5]=r*a-n*c,e[6]=a*d-i*y,e[7]=s*y-n*d,e[8]=n*i-s*a,e}static normalFromMat4Fast(e,t){return e}static projection(e,t,n){return e[0]=2/t,e[1]=0,e[2]=0,e[3]=0,e[4]=-2/n,e[5]=0,e[6]=-1,e[7]=1,e[8]=1,e}static frob(e){return Math.sqrt(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]+e[3]*e[3]+e[4]*e[4]+e[5]*e[5]+e[6]*e[6]+e[7]*e[7]+e[8]*e[8])}static multiplyScalar(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*n,e[5]=t[5]*n,e[6]=t[6]*n,e[7]=t[7]*n,e[8]=t[8]*n,e}static multiplyScalarAndAdd(e,t,n,s){return e[0]=t[0]+n[0]*s,e[1]=t[1]+n[1]*s,e[2]=t[2]+n[2]*s,e[3]=t[3]+n[3]*s,e[4]=t[4]+n[4]*s,e[5]=t[5]+n[5]*s,e[6]=t[6]+n[6]*s,e[7]=t[7]+n[7]*s,e[8]=t[8]+n[8]*s,e}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]&&e[8]===t[8]}static equals(e,t){let n=e[0],s=e[1],r=e[2],a=e[3],i=e[4],c=e[5],y=e[6],d=e[7],l=e[8],L=t[0],b=t[1],k=t[2],x=t[3],M=t[4],T=t[5],m=t[6],g=t[7],o=t[8];return Math.abs(n-L)<=1e-6*Math.max(1,Math.abs(n),Math.abs(L))&&Math.abs(s-b)<=1e-6*Math.max(1,Math.abs(s),Math.abs(b))&&Math.abs(r-k)<=1e-6*Math.max(1,Math.abs(r),Math.abs(k))&&Math.abs(a-x)<=1e-6*Math.max(1,Math.abs(a),Math.abs(x))&&Math.abs(i-M)<=1e-6*Math.max(1,Math.abs(i),Math.abs(M))&&Math.abs(c-T)<=1e-6*Math.max(1,Math.abs(c),Math.abs(T))&&Math.abs(y-m)<=1e-6*Math.max(1,Math.abs(y),Math.abs(m))&&Math.abs(d-g)<=1e-6*Math.max(1,Math.abs(d),Math.abs(g))&&Math.abs(l-o)<=1e-6*Math.max(1,Math.abs(l),Math.abs(o))}static str(e){return`Mat3(${e.join(", ")})`}};O.prototype.mul=O.prototype.multiply;O.mul=O.multiply;O.sub=O.subtract;O.normalFromMat4Fast=O.normalFromMat4;var P=class h extends Float64Array{static#e=new Float64Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);static#t=new Float64Array(3);constructor(...e){switch(e.length){case 16:super(e);break;case 2:super(e[0],e[1],16);break;case 1:let t=e[0];t===void 0?super(h.#e):typeof t=="number"?super([t,t,t,t,t,t,t,t,t,t,t,t,t,t,t,t]):super(t,0,16);break;default:super(h.#e);break}}get str(){return h.str(this)}copy(e){return this.set(e),this}identity(){return this.set(h.#e),this}multiply(e){return h.multiply(this,this,e)}mul(e){return this}transpose(){return h.transpose(this,this)}invert(){return h.invert(this,this)}translate(e){return h.translate(this,this,e)}rotate(e,t){return h.rotate(this,this,e,t)}scale(e){return h.scale(this,this,e)}rotateX(e){return h.rotateX(this,this,e)}rotateY(e){return h.rotateY(this,this,e)}rotateZ(e){return h.rotateZ(this,this,e)}perspectiveNO(e,t,n,s){return h.perspectiveNO(this,e,t,n,s)}perspectiveZO(e,t,n,s){return h.perspectiveZO(this,e,t,n,s)}orthoNO(e,t,n,s,r,a){return h.orthoNO(this,e,t,n,s,r,a)}orthoZO(e,t,n,s,r,a){return h.orthoZO(this,e,t,n,s,r,a)}static get BYTE_LENGTH(){return 16*Float64Array.BYTES_PER_ELEMENT}static create(){return new h}static clone(e){return new h(e)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}static fromValues(...e){return new h(...e)}static set(e,...t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}static identity(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static transpose(e,t){if(e===t){let n=t[1],s=t[2],r=t[3],a=t[6],i=t[7],c=t[11];e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=n,e[6]=t[9],e[7]=t[13],e[8]=s,e[9]=a,e[11]=t[14],e[12]=r,e[13]=i,e[14]=c}else e[0]=t[0],e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=t[1],e[5]=t[5],e[6]=t[9],e[7]=t[13],e[8]=t[2],e[9]=t[6],e[10]=t[10],e[11]=t[14],e[12]=t[3],e[13]=t[7],e[14]=t[11],e[15]=t[15];return e}static invert(e,t){let n=t[0],s=t[1],r=t[2],a=t[3],i=t[4],c=t[5],y=t[6],d=t[7],l=t[8],L=t[9],b=t[10],k=t[11],x=t[12],M=t[13],T=t[14],m=t[15],g=n*c-s*i,o=n*y-r*i,R=n*d-a*i,z=s*y-r*c,w=s*d-a*c,D=r*d-a*y,A=l*M-L*x,B=l*T-b*x,f=l*m-k*x,I=L*T-b*M,S=L*m-k*M,N=b*m-k*T,F=g*N-o*S+R*I+z*f-w*B+D*A;return F?(F=1/F,e[0]=(c*N-y*S+d*I)*F,e[1]=(r*S-s*N-a*I)*F,e[2]=(M*D-T*w+m*z)*F,e[3]=(b*w-L*D-k*z)*F,e[4]=(y*f-i*N-d*B)*F,e[5]=(n*N-r*f+a*B)*F,e[6]=(T*R-x*D-m*o)*F,e[7]=(l*D-b*R+k*o)*F,e[8]=(i*S-c*f+d*A)*F,e[9]=(s*f-n*S-a*A)*F,e[10]=(x*w-M*R+m*g)*F,e[11]=(L*R-l*w-k*g)*F,e[12]=(c*B-i*I-y*A)*F,e[13]=(n*I-s*B+r*A)*F,e[14]=(M*o-x*z-T*g)*F,e[15]=(l*z-L*o+b*g)*F,e):null}static adjoint(e,t){let n=t[0],s=t[1],r=t[2],a=t[3],i=t[4],c=t[5],y=t[6],d=t[7],l=t[8],L=t[9],b=t[10],k=t[11],x=t[12],M=t[13],T=t[14],m=t[15],g=n*c-s*i,o=n*y-r*i,R=n*d-a*i,z=s*y-r*c,w=s*d-a*c,D=r*d-a*y,A=l*M-L*x,B=l*T-b*x,f=l*m-k*x,I=L*T-b*M,S=L*m-k*M,N=b*m-k*T;return e[0]=c*N-y*S+d*I,e[1]=r*S-s*N-a*I,e[2]=M*D-T*w+m*z,e[3]=b*w-L*D-k*z,e[4]=y*f-i*N-d*B,e[5]=n*N-r*f+a*B,e[6]=T*R-x*D-m*o,e[7]=l*D-b*R+k*o,e[8]=i*S-c*f+d*A,e[9]=s*f-n*S-a*A,e[10]=x*w-M*R+m*g,e[11]=L*R-l*w-k*g,e[12]=c*B-i*I-y*A,e[13]=n*I-s*B+r*A,e[14]=M*o-x*z-T*g,e[15]=l*z-L*o+b*g,e}static determinant(e){let t=e[0],n=e[1],s=e[2],r=e[3],a=e[4],i=e[5],c=e[6],y=e[7],d=e[8],l=e[9],L=e[10],b=e[11],k=e[12],x=e[13],M=e[14],T=e[15],m=t*i-n*a,g=t*c-s*a,o=n*c-s*i,R=d*x-l*k,z=d*M-L*k,w=l*M-L*x,D=t*w-n*z+s*R,A=a*w-i*z+c*R,B=d*o-l*g+L*m,f=k*o-x*g+M*m;return y*D-r*A+T*B-b*f}static multiply(e,t,n){let s=t[0],r=t[1],a=t[2],i=t[3],c=t[4],y=t[5],d=t[6],l=t[7],L=t[8],b=t[9],k=t[10],x=t[11],M=t[12],T=t[13],m=t[14],g=t[15],o=n[0],R=n[1],z=n[2],w=n[3];return e[0]=o*s+R*c+z*L+w*M,e[1]=o*r+R*y+z*b+w*T,e[2]=o*a+R*d+z*k+w*m,e[3]=o*i+R*l+z*x+w*g,o=n[4],R=n[5],z=n[6],w=n[7],e[4]=o*s+R*c+z*L+w*M,e[5]=o*r+R*y+z*b+w*T,e[6]=o*a+R*d+z*k+w*m,e[7]=o*i+R*l+z*x+w*g,o=n[8],R=n[9],z=n[10],w=n[11],e[8]=o*s+R*c+z*L+w*M,e[9]=o*r+R*y+z*b+w*T,e[10]=o*a+R*d+z*k+w*m,e[11]=o*i+R*l+z*x+w*g,o=n[12],R=n[13],z=n[14],w=n[15],e[12]=o*s+R*c+z*L+w*M,e[13]=o*r+R*y+z*b+w*T,e[14]=o*a+R*d+z*k+w*m,e[15]=o*i+R*l+z*x+w*g,e}static mul(e,t,n){return e}static translate(e,t,n){let s=n[0],r=n[1],a=n[2];if(t===e)e[12]=t[0]*s+t[4]*r+t[8]*a+t[12],e[13]=t[1]*s+t[5]*r+t[9]*a+t[13],e[14]=t[2]*s+t[6]*r+t[10]*a+t[14],e[15]=t[3]*s+t[7]*r+t[11]*a+t[15];else{let i=t[0],c=t[1],y=t[2],d=t[3],l=t[4],L=t[5],b=t[6],k=t[7],x=t[8],M=t[9],T=t[10],m=t[11];e[0]=i,e[1]=c,e[2]=y,e[3]=d,e[4]=l,e[5]=L,e[6]=b,e[7]=k,e[8]=x,e[9]=M,e[10]=T,e[11]=m,e[12]=i*s+l*r+x*a+t[12],e[13]=c*s+L*r+M*a+t[13],e[14]=y*s+b*r+T*a+t[14],e[15]=d*s+k*r+m*a+t[15]}return e}static scale(e,t,n){let s=n[0],r=n[1],a=n[2];return e[0]=t[0]*s,e[1]=t[1]*s,e[2]=t[2]*s,e[3]=t[3]*s,e[4]=t[4]*r,e[5]=t[5]*r,e[6]=t[6]*r,e[7]=t[7]*r,e[8]=t[8]*a,e[9]=t[9]*a,e[10]=t[10]*a,e[11]=t[11]*a,e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}static rotate(e,t,n,s){let r=s[0],a=s[1],i=s[2],c=Math.sqrt(r*r+a*a+i*i);if(c<1e-6)return null;c=1/c,r*=c,a*=c,i*=c;let y=Math.sin(n),d=Math.cos(n),l=1-d,L=t[0],b=t[1],k=t[2],x=t[3],M=t[4],T=t[5],m=t[6],g=t[7],o=t[8],R=t[9],z=t[10],w=t[11],D=r*r*l+d,A=a*r*l+i*y,B=i*r*l-a*y,f=r*a*l-i*y,I=a*a*l+d,S=i*a*l+r*y,N=r*i*l+a*y,F=a*i*l-r*y,Z=i*i*l+d;return e[0]=L*D+M*A+o*B,e[1]=b*D+T*A+R*B,e[2]=k*D+m*A+z*B,e[3]=x*D+g*A+w*B,e[4]=L*f+M*I+o*S,e[5]=b*f+T*I+R*S,e[6]=k*f+m*I+z*S,e[7]=x*f+g*I+w*S,e[8]=L*N+M*F+o*Z,e[9]=b*N+T*F+R*Z,e[10]=k*N+m*F+z*Z,e[11]=x*N+g*F+w*Z,t!==e&&(e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e}static rotateX(e,t,n){let s=Math.sin(n),r=Math.cos(n),a=t[4],i=t[5],c=t[6],y=t[7],d=t[8],l=t[9],L=t[10],b=t[11];return t!==e&&(e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[4]=a*r+d*s,e[5]=i*r+l*s,e[6]=c*r+L*s,e[7]=y*r+b*s,e[8]=d*r-a*s,e[9]=l*r-i*s,e[10]=L*r-c*s,e[11]=b*r-y*s,e}static rotateY(e,t,n){let s=Math.sin(n),r=Math.cos(n),a=t[0],i=t[1],c=t[2],y=t[3],d=t[8],l=t[9],L=t[10],b=t[11];return t!==e&&(e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[0]=a*r-d*s,e[1]=i*r-l*s,e[2]=c*r-L*s,e[3]=y*r-b*s,e[8]=a*s+d*r,e[9]=i*s+l*r,e[10]=c*s+L*r,e[11]=y*s+b*r,e}static rotateZ(e,t,n){let s=Math.sin(n),r=Math.cos(n),a=t[0],i=t[1],c=t[2],y=t[3],d=t[4],l=t[5],L=t[6],b=t[7];return t!==e&&(e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[0]=a*r+d*s,e[1]=i*r+l*s,e[2]=c*r+L*s,e[3]=y*r+b*s,e[4]=d*r-a*s,e[5]=l*r-i*s,e[6]=L*r-c*s,e[7]=b*r-y*s,e}static fromTranslation(e,t){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=t[0],e[13]=t[1],e[14]=t[2],e[15]=1,e}static fromScaling(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=t[1],e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=t[2],e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static fromRotation(e,t,n){let s=n[0],r=n[1],a=n[2],i=Math.sqrt(s*s+r*r+a*a);if(i<1e-6)return null;i=1/i,s*=i,r*=i,a*=i;let c=Math.sin(t),y=Math.cos(t),d=1-y;return e[0]=s*s*d+y,e[1]=r*s*d+a*c,e[2]=a*s*d-r*c,e[3]=0,e[4]=s*r*d-a*c,e[5]=r*r*d+y,e[6]=a*r*d+s*c,e[7]=0,e[8]=s*a*d+r*c,e[9]=r*a*d-s*c,e[10]=a*a*d+y,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static fromXRotation(e,t){let n=Math.sin(t),s=Math.cos(t);return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=s,e[6]=n,e[7]=0,e[8]=0,e[9]=-n,e[10]=s,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static fromYRotation(e,t){let n=Math.sin(t),s=Math.cos(t);return e[0]=s,e[1]=0,e[2]=-n,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=n,e[9]=0,e[10]=s,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static fromZRotation(e,t){let n=Math.sin(t),s=Math.cos(t);return e[0]=s,e[1]=n,e[2]=0,e[3]=0,e[4]=-n,e[5]=s,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static fromRotationTranslation(e,t,n){let s=t[0],r=t[1],a=t[2],i=t[3],c=s+s,y=r+r,d=a+a,l=s*c,L=s*y,b=s*d,k=r*y,x=r*d,M=a*d,T=i*c,m=i*y,g=i*d;return e[0]=1-(k+M),e[1]=L+g,e[2]=b-m,e[3]=0,e[4]=L-g,e[5]=1-(l+M),e[6]=x+T,e[7]=0,e[8]=b+m,e[9]=x-T,e[10]=1-(l+k),e[11]=0,e[12]=n[0],e[13]=n[1],e[14]=n[2],e[15]=1,e}static fromQuat2(e,t){let n=-t[0],s=-t[1],r=-t[2],a=t[3],i=t[4],c=t[5],y=t[6],d=t[7],l=n*n+s*s+r*r+a*a;return l>0?(h.#t[0]=(i*a+d*n+c*r-y*s)*2/l,h.#t[1]=(c*a+d*s+y*n-i*r)*2/l,h.#t[2]=(y*a+d*r+i*s-c*n)*2/l):(h.#t[0]=(i*a+d*n+c*r-y*s)*2,h.#t[1]=(c*a+d*s+y*n-i*r)*2,h.#t[2]=(y*a+d*r+i*s-c*n)*2),h.fromRotationTranslation(e,t,h.#t),e}static normalFromMat4(e,t){let n=t[0],s=t[1],r=t[2],a=t[4],i=t[5],c=t[6],y=t[8],d=t[9],l=t[10];return e[0]=i*l-c*d,e[1]=r*d-s*l,e[2]=s*c-r*i,e[3]=0,e[4]=c*y-a*l,e[5]=n*l-r*y,e[6]=r*a-n*c,e[7]=0,e[8]=a*d-i*y,e[9]=s*y-n*d,e[10]=n*i-s*a,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static normalFromMat4Fast(e,t){return e}static getTranslation(e,t){return e[0]=t[12],e[1]=t[13],e[2]=t[14],e}static getScaling(e,t){let n=t[0],s=t[1],r=t[2],a=t[4],i=t[5],c=t[6],y=t[8],d=t[9],l=t[10];return e[0]=Math.sqrt(n*n+s*s+r*r),e[1]=Math.sqrt(a*a+i*i+c*c),e[2]=Math.sqrt(y*y+d*d+l*l),e}static getRotation(e,t){h.getScaling(h.#t,t);let n=1/h.#t[0],s=1/h.#t[1],r=1/h.#t[2],a=t[0]*n,i=t[1]*s,c=t[2]*r,y=t[4]*n,d=t[5]*s,l=t[6]*r,L=t[8]*n,b=t[9]*s,k=t[10]*r,x=a+d+k,M=0;return x>0?(M=Math.sqrt(x+1)*2,e[3]=.25*M,e[0]=(l-b)/M,e[1]=(L-c)/M,e[2]=(i-y)/M):a>d&&a>k?(M=Math.sqrt(1+a-d-k)*2,e[3]=(l-b)/M,e[0]=.25*M,e[1]=(i+y)/M,e[2]=(L+c)/M):d>k?(M=Math.sqrt(1+d-a-k)*2,e[3]=(L-c)/M,e[0]=(i+y)/M,e[1]=.25*M,e[2]=(l+b)/M):(M=Math.sqrt(1+k-a-d)*2,e[3]=(i-y)/M,e[0]=(L+c)/M,e[1]=(l+b)/M,e[2]=.25*M),e}static decompose(e,t,n,s){t[0]=s[12],t[1]=s[13],t[2]=s[14];let r=s[0],a=s[1],i=s[2],c=s[4],y=s[5],d=s[6],l=s[8],L=s[9],b=s[10];n[0]=Math.sqrt(r*r+a*a+i*i),n[1]=Math.sqrt(c*c+y*y+d*d),n[2]=Math.sqrt(l*l+L*L+b*b);let k=1/n[0],x=1/n[1],M=1/n[2],T=r*k,m=a*x,g=i*M,o=c*k,R=y*x,z=d*M,w=l*k,D=L*x,A=b*M,B=T+R+A,f=0;return B>0?(f=Math.sqrt(B+1)*2,e[3]=.25*f,e[0]=(z-D)/f,e[1]=(w-g)/f,e[2]=(m-o)/f):T>R&&T>A?(f=Math.sqrt(1+T-R-A)*2,e[3]=(z-D)/f,e[0]=.25*f,e[1]=(m+o)/f,e[2]=(w+g)/f):R>A?(f=Math.sqrt(1+R-T-A)*2,e[3]=(w-g)/f,e[0]=(m+o)/f,e[1]=.25*f,e[2]=(z+D)/f):(f=Math.sqrt(1+A-T-R)*2,e[3]=(m-o)/f,e[0]=(w+g)/f,e[1]=(z+D)/f,e[2]=.25*f),e}static fromRotationTranslationScale(e,t,n,s){let r=t[0],a=t[1],i=t[2],c=t[3],y=r+r,d=a+a,l=i+i,L=r*y,b=r*d,k=r*l,x=a*d,M=a*l,T=i*l,m=c*y,g=c*d,o=c*l,R=s[0],z=s[1],w=s[2];return e[0]=(1-(x+T))*R,e[1]=(b+o)*R,e[2]=(k-g)*R,e[3]=0,e[4]=(b-o)*z,e[5]=(1-(L+T))*z,e[6]=(M+m)*z,e[7]=0,e[8]=(k+g)*w,e[9]=(M-m)*w,e[10]=(1-(L+x))*w,e[11]=0,e[12]=n[0],e[13]=n[1],e[14]=n[2],e[15]=1,e}static fromRotationTranslationScaleOrigin(e,t,n,s,r){let a=t[0],i=t[1],c=t[2],y=t[3],d=a+a,l=i+i,L=c+c,b=a*d,k=a*l,x=a*L,M=i*l,T=i*L,m=c*L,g=y*d,o=y*l,R=y*L,z=s[0],w=s[1],D=s[2],A=r[0],B=r[1],f=r[2],I=(1-(M+m))*z,S=(k+R)*z,N=(x-o)*z,F=(k-R)*w,Z=(1-(b+m))*w,X=(T+g)*w,C=(x+o)*D,U=(T-g)*D,W=(1-(b+M))*D;return e[0]=I,e[1]=S,e[2]=N,e[3]=0,e[4]=F,e[5]=Z,e[6]=X,e[7]=0,e[8]=C,e[9]=U,e[10]=W,e[11]=0,e[12]=n[0]+A-(I*A+F*B+C*f),e[13]=n[1]+B-(S*A+Z*B+U*f),e[14]=n[2]+f-(N*A+X*B+W*f),e[15]=1,e}static fromQuat(e,t){let n=t[0],s=t[1],r=t[2],a=t[3],i=n+n,c=s+s,y=r+r,d=n*i,l=s*i,L=s*c,b=r*i,k=r*c,x=r*y,M=a*i,T=a*c,m=a*y;return e[0]=1-L-x,e[1]=l+m,e[2]=b-T,e[3]=0,e[4]=l-m,e[5]=1-d-x,e[6]=k+M,e[7]=0,e[8]=b+T,e[9]=k-M,e[10]=1-d-L,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static frustumNO(e,t,n,s,r,a,i=1/0){let c=1/(n-t),y=1/(r-s);if(e[0]=a*2*c,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=a*2*y,e[6]=0,e[7]=0,e[8]=(n+t)*c,e[9]=(r+s)*y,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,i!=null&&i!==1/0){let d=1/(a-i);e[10]=(i+a)*d,e[14]=2*i*a*d}else e[10]=-1,e[14]=-2*a;return e}static frustum(e,t,n,s,r,a,i=1/0){return e}static frustumZO(e,t,n,s,r,a,i=1/0){let c=1/(n-t),y=1/(r-s);if(e[0]=a*2*c,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=a*2*y,e[6]=0,e[7]=0,e[8]=(n+t)*c,e[9]=(r+s)*y,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,i!=null&&i!==1/0){let d=1/(a-i);e[10]=i*d,e[14]=i*a*d}else e[10]=-1,e[14]=-a;return e}static perspectiveNO(e,t,n,s,r=1/0){let a=1/Math.tan(t/2);if(e[0]=a/n,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=a,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,r!=null&&r!==1/0){let i=1/(s-r);e[10]=(r+s)*i,e[14]=2*r*s*i}else e[10]=-1,e[14]=-2*s;return e}static perspective(e,t,n,s,r=1/0){return e}static perspectiveZO(e,t,n,s,r=1/0){let a=1/Math.tan(t/2);if(e[0]=a/n,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=a,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,r!=null&&r!==1/0){let i=1/(s-r);e[10]=r*i,e[14]=r*s*i}else e[10]=-1,e[14]=-s;return e}static perspectiveFromFieldOfView(e,t,n,s){let r=Math.tan(t.upDegrees*Math.PI/180),a=Math.tan(t.downDegrees*Math.PI/180),i=Math.tan(t.leftDegrees*Math.PI/180),c=Math.tan(t.rightDegrees*Math.PI/180),y=2/(i+c),d=2/(r+a);return e[0]=y,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=d,e[6]=0,e[7]=0,e[8]=-((i-c)*y*.5),e[9]=(r-a)*d*.5,e[10]=s/(n-s),e[11]=-1,e[12]=0,e[13]=0,e[14]=s*n/(n-s),e[15]=0,e}static orthoNO(e,t,n,s,r,a,i){let c=1/(t-n),y=1/(s-r),d=1/(a-i);return e[0]=-2*c,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=-2*y,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=2*d,e[11]=0,e[12]=(t+n)*c,e[13]=(r+s)*y,e[14]=(i+a)*d,e[15]=1,e}static ortho(e,t,n,s,r,a,i){return e}static orthoZO(e,t,n,s,r,a,i){let c=1/(t-n),y=1/(s-r),d=1/(a-i);return e[0]=-2*c,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=-2*y,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=d,e[11]=0,e[12]=(t+n)*c,e[13]=(r+s)*y,e[14]=a*d,e[15]=1,e}static lookAt(e,t,n,s){let r=t[0],a=t[1],i=t[2],c=s[0],y=s[1],d=s[2],l=n[0],L=n[1],b=n[2];if(Math.abs(r-l)<1e-6&&Math.abs(a-L)<1e-6&&Math.abs(i-b)<1e-6)return h.identity(e);let k=r-l,x=a-L,M=i-b,T=1/Math.sqrt(k*k+x*x+M*M);k*=T,x*=T,M*=T;let m=y*M-d*x,g=d*k-c*M,o=c*x-y*k;T=Math.sqrt(m*m+g*g+o*o),T?(T=1/T,m*=T,g*=T,o*=T):(m=0,g=0,o=0);let R=x*o-M*g,z=M*m-k*o,w=k*g-x*m;return T=Math.sqrt(R*R+z*z+w*w),T?(T=1/T,R*=T,z*=T,w*=T):(R=0,z=0,w=0),e[0]=m,e[1]=R,e[2]=k,e[3]=0,e[4]=g,e[5]=z,e[6]=x,e[7]=0,e[8]=o,e[9]=w,e[10]=M,e[11]=0,e[12]=-(m*r+g*a+o*i),e[13]=-(R*r+z*a+w*i),e[14]=-(k*r+x*a+M*i),e[15]=1,e}static targetTo(e,t,n,s){let r=t[0],a=t[1],i=t[2],c=s[0],y=s[1],d=s[2],l=r-n[0],L=a-n[1],b=i-n[2],k=l*l+L*L+b*b;k>0&&(k=1/Math.sqrt(k),l*=k,L*=k,b*=k);let x=y*b-d*L,M=d*l-c*b,T=c*L-y*l;return k=x*x+M*M+T*T,k>0&&(k=1/Math.sqrt(k),x*=k,M*=k,T*=k),e[0]=x,e[1]=M,e[2]=T,e[3]=0,e[4]=L*T-b*M,e[5]=b*x-l*T,e[6]=l*M-L*x,e[7]=0,e[8]=l,e[9]=L,e[10]=b,e[11]=0,e[12]=r,e[13]=a,e[14]=i,e[15]=1,e}static frob(e){return Math.sqrt(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]+e[3]*e[3]+e[4]*e[4]+e[5]*e[5]+e[6]*e[6]+e[7]*e[7]+e[8]*e[8]+e[9]*e[9]+e[10]*e[10]+e[11]*e[11]+e[12]*e[12]+e[13]*e[13]+e[14]*e[14]+e[15]*e[15])}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e[4]=t[4]+n[4],e[5]=t[5]+n[5],e[6]=t[6]+n[6],e[7]=t[7]+n[7],e[8]=t[8]+n[8],e[9]=t[9]+n[9],e[10]=t[10]+n[10],e[11]=t[11]+n[11],e[12]=t[12]+n[12],e[13]=t[13]+n[13],e[14]=t[14]+n[14],e[15]=t[15]+n[15],e}static subtract(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e[4]=t[4]-n[4],e[5]=t[5]-n[5],e[6]=t[6]-n[6],e[7]=t[7]-n[7],e[8]=t[8]-n[8],e[9]=t[9]-n[9],e[10]=t[10]-n[10],e[11]=t[11]-n[11],e[12]=t[12]-n[12],e[13]=t[13]-n[13],e[14]=t[14]-n[14],e[15]=t[15]-n[15],e}static sub(e,t,n){return e}static multiplyScalar(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*n,e[5]=t[5]*n,e[6]=t[6]*n,e[7]=t[7]*n,e[8]=t[8]*n,e[9]=t[9]*n,e[10]=t[10]*n,e[11]=t[11]*n,e[12]=t[12]*n,e[13]=t[13]*n,e[14]=t[14]*n,e[15]=t[15]*n,e}static multiplyScalarAndAdd(e,t,n,s){return e[0]=t[0]+n[0]*s,e[1]=t[1]+n[1]*s,e[2]=t[2]+n[2]*s,e[3]=t[3]+n[3]*s,e[4]=t[4]+n[4]*s,e[5]=t[5]+n[5]*s,e[6]=t[6]+n[6]*s,e[7]=t[7]+n[7]*s,e[8]=t[8]+n[8]*s,e[9]=t[9]+n[9]*s,e[10]=t[10]+n[10]*s,e[11]=t[11]+n[11]*s,e[12]=t[12]+n[12]*s,e[13]=t[13]+n[13]*s,e[14]=t[14]+n[14]*s,e[15]=t[15]+n[15]*s,e}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]&&e[8]===t[8]&&e[9]===t[9]&&e[10]===t[10]&&e[11]===t[11]&&e[12]===t[12]&&e[13]===t[13]&&e[14]===t[14]&&e[15]===t[15]}static equals(e,t){let n=e[0],s=e[1],r=e[2],a=e[3],i=e[4],c=e[5],y=e[6],d=e[7],l=e[8],L=e[9],b=e[10],k=e[11],x=e[12],M=e[13],T=e[14],m=e[15],g=t[0],o=t[1],R=t[2],z=t[3],w=t[4],D=t[5],A=t[6],B=t[7],f=t[8],I=t[9],S=t[10],N=t[11],F=t[12],Z=t[13],X=t[14],C=t[15];return Math.abs(n-g)<=1e-6*Math.max(1,Math.abs(n),Math.abs(g))&&Math.abs(s-o)<=1e-6*Math.max(1,Math.abs(s),Math.abs(o))&&Math.abs(r-R)<=1e-6*Math.max(1,Math.abs(r),Math.abs(R))&&Math.abs(a-z)<=1e-6*Math.max(1,Math.abs(a),Math.abs(z))&&Math.abs(i-w)<=1e-6*Math.max(1,Math.abs(i),Math.abs(w))&&Math.abs(c-D)<=1e-6*Math.max(1,Math.abs(c),Math.abs(D))&&Math.abs(y-A)<=1e-6*Math.max(1,Math.abs(y),Math.abs(A))&&Math.abs(d-B)<=1e-6*Math.max(1,Math.abs(d),Math.abs(B))&&Math.abs(l-f)<=1e-6*Math.max(1,Math.abs(l),Math.abs(f))&&Math.abs(L-I)<=1e-6*Math.max(1,Math.abs(L),Math.abs(I))&&Math.abs(b-S)<=1e-6*Math.max(1,Math.abs(b),Math.abs(S))&&Math.abs(k-N)<=1e-6*Math.max(1,Math.abs(k),Math.abs(N))&&Math.abs(x-F)<=1e-6*Math.max(1,Math.abs(x),Math.abs(F))&&Math.abs(M-Z)<=1e-6*Math.max(1,Math.abs(M),Math.abs(Z))&&Math.abs(T-X)<=1e-6*Math.max(1,Math.abs(T),Math.abs(X))&&Math.abs(m-C)<=1e-6*Math.max(1,Math.abs(m),Math.abs(C))}static str(e){return`Mat4(${e.join(", ")})`}};P.prototype.mul=P.prototype.multiply;P.sub=P.subtract;P.mul=P.multiply;P.frustum=P.frustumNO;P.perspective=P.perspectiveNO;P.ortho=P.orthoNO;P.normalFromMat4Fast=P.normalFromMat4;var Q=class h extends Float64Array{constructor(...e){switch(e.length){case 3:super(e);break;case 2:super(e[0],e[1],3);break;case 1:{let t=e[0];t===void 0?super(3):typeof t=="number"?super([t,t,t]):super(t,0,3);break}default:super(3);break}}get x(){return this[0]}set x(e){this[0]=e}get y(){return this[1]}set y(e){this[1]=e}get z(){return this[2]}set z(e){this[2]=e}get r(){return this[0]}set r(e){this[0]=e}get g(){return this[1]}set g(e){this[1]=e}get b(){return this[2]}set b(e){this[2]=e}get magnitude(){let e=this[0],t=this[1],n=this[2];return Math.sqrt(e*e+t*t+n*n)}get mag(){return this.magnitude}get squaredMagnitude(){let e=this[0],t=this[1],n=this[2];return e*e+t*t+n*n}get sqrMag(){return this.squaredMagnitude}get str(){return h.str(this)}copy(e){return this.set(e),this}add(e){return this[0]+=e[0],this[1]+=e[1],this[2]+=e[2],this}subtract(e){return this[0]-=e[0],this[1]-=e[1],this[2]-=e[2],this}sub(e){return this}multiply(e){return this[0]*=e[0],this[1]*=e[1],this[2]*=e[2],this}mul(e){return this}divide(e){return this[0]/=e[0],this[1]/=e[1],this[2]/=e[2],this}div(e){return this}scale(e){return this[0]*=e,this[1]*=e,this[2]*=e,this}scaleAndAdd(e,t){return this[0]+=e[0]*t,this[1]+=e[1]*t,this[2]+=e[2]*t,this}distance(e){return h.distance(this,e)}dist(e){return 0}squaredDistance(e){return h.squaredDistance(this,e)}sqrDist(e){return 0}negate(){return this[0]*=-1,this[1]*=-1,this[2]*=-1,this}invert(){return this[0]=1/this[0],this[1]=1/this[1],this[2]=1/this[2],this}abs(){return this[0]=Math.abs(this[0]),this[1]=Math.abs(this[1]),this[2]=Math.abs(this[2]),this}dot(e){return this[0]*e[0]+this[1]*e[1]+this[2]*e[2]}normalize(){return h.normalize(this,this)}static get BYTE_LENGTH(){return 3*Float64Array.BYTES_PER_ELEMENT}static create(){return new h}static clone(e){return new h(e)}static magnitude(e){let t=e[0],n=e[1],s=e[2];return Math.sqrt(t*t+n*n+s*s)}static mag(e){return 0}static length(e){return 0}static len(e){return 0}static fromValues(e,t,n){return new h(e,t,n)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e}static set(e,t,n,s){return e[0]=t,e[1]=n,e[2]=s,e}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e}static subtract(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e}static sub(e,t,n){return e}static multiply(e,t,n){return e[0]=t[0]*n[0],e[1]=t[1]*n[1],e[2]=t[2]*n[2],e}static mul(e,t,n){return e}static divide(e,t,n){return e[0]=t[0]/n[0],e[1]=t[1]/n[1],e[2]=t[2]/n[2],e}static div(e,t,n){return e}static ceil(e,t){return e[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e[2]=Math.ceil(t[2]),e}static floor(e,t){return e[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e[2]=Math.floor(t[2]),e}static min(e,t,n){return e[0]=Math.min(t[0],n[0]),e[1]=Math.min(t[1],n[1]),e[2]=Math.min(t[2],n[2]),e}static max(e,t,n){return e[0]=Math.max(t[0],n[0]),e[1]=Math.max(t[1],n[1]),e[2]=Math.max(t[2],n[2]),e}static scale(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e}static scaleAndAdd(e,t,n,s){return e[0]=t[0]+n[0]*s,e[1]=t[1]+n[1]*s,e[2]=t[2]+n[2]*s,e}static distance(e,t){let n=t[0]-e[0],s=t[1]-e[1],r=t[2]-e[2];return Math.sqrt(n*n+s*s+r*r)}static dist(e,t){return 0}static squaredDistance(e,t){let n=t[0]-e[0],s=t[1]-e[1],r=t[2]-e[2];return n*n+s*s+r*r}static sqrDist(e,t){return 0}static squaredLength(e){let t=e[0],n=e[1],s=e[2];return t*t+n*n+s*s}static sqrLen(e,t){return 0}static negate(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e}static inverse(e,t){return e[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e}static abs(e,t){return e[0]=Math.abs(t[0]),e[1]=Math.abs(t[1]),e[2]=Math.abs(t[2]),e}static normalize(e,t){let n=t[0],s=t[1],r=t[2],a=n*n+s*s+r*r;return a>0&&(a=1/Math.sqrt(a)),e[0]=t[0]*a,e[1]=t[1]*a,e[2]=t[2]*a,e}static dot(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}static cross(e,t,n){let s=t[0],r=t[1],a=t[2],i=n[0],c=n[1],y=n[2];return e[0]=r*y-a*c,e[1]=a*i-s*y,e[2]=s*c-r*i,e}static lerp(e,t,n,s){let r=t[0],a=t[1],i=t[2];return e[0]=r+s*(n[0]-r),e[1]=a+s*(n[1]-a),e[2]=i+s*(n[2]-i),e}static slerp(e,t,n,s){let r=Math.acos(Math.min(Math.max(h.dot(t,n),-1),1)),a=Math.sin(r),i=Math.sin((1-s)*r)/a,c=Math.sin(s*r)/a;return e[0]=i*t[0]+c*n[0],e[1]=i*t[1]+c*n[1],e[2]=i*t[2]+c*n[2],e}static hermite(e,t,n,s,r,a){let i=a*a,c=i*(2*a-3)+1,y=i*(a-2)+a,d=i*(a-1),l=i*(3-2*a);return e[0]=t[0]*c+n[0]*y+s[0]*d+r[0]*l,e[1]=t[1]*c+n[1]*y+s[1]*d+r[1]*l,e[2]=t[2]*c+n[2]*y+s[2]*d+r[2]*l,e}static bezier(e,t,n,s,r,a){let i=1-a,c=i*i,y=a*a,d=c*i,l=3*a*c,L=3*y*i,b=y*a;return e[0]=t[0]*d+n[0]*l+s[0]*L+r[0]*b,e[1]=t[1]*d+n[1]*l+s[1]*L+r[1]*b,e[2]=t[2]*d+n[2]*l+s[2]*L+r[2]*b,e}static transformMat4(e,t,n){let s=t[0],r=t[1],a=t[2],i=n[3]*s+n[7]*r+n[11]*a+n[15]||1;return e[0]=(n[0]*s+n[4]*r+n[8]*a+n[12])/i,e[1]=(n[1]*s+n[5]*r+n[9]*a+n[13])/i,e[2]=(n[2]*s+n[6]*r+n[10]*a+n[14])/i,e}static transformMat3(e,t,n){let s=t[0],r=t[1],a=t[2];return e[0]=s*n[0]+r*n[3]+a*n[6],e[1]=s*n[1]+r*n[4]+a*n[7],e[2]=s*n[2]+r*n[5]+a*n[8],e}static transformQuat(e,t,n){let s=n[0],r=n[1],a=n[2],i=n[3]*2,c=t[0],y=t[1],d=t[2],l=r*d-a*y,L=a*c-s*d,b=s*y-r*c,k=(r*b-a*L)*2,x=(a*l-s*b)*2,M=(s*L-r*l)*2;return e[0]=c+l*i+k,e[1]=y+L*i+x,e[2]=d+b*i+M,e}static rotateX(e,t,n,s){let r=n[1],a=n[2],i=t[1]-r,c=t[2]-a;return e[0]=t[0],e[1]=i*Math.cos(s)-c*Math.sin(s)+r,e[2]=i*Math.sin(s)+c*Math.cos(s)+a,e}static rotateY(e,t,n,s){let r=n[0],a=n[2],i=t[0]-r,c=t[2]-a;return e[0]=c*Math.sin(s)+i*Math.cos(s)+r,e[1]=t[1],e[2]=c*Math.cos(s)-i*Math.sin(s)+a,e}static rotateZ(e,t,n,s){let r=n[0],a=n[1],i=t[0]-r,c=t[1]-a;return e[0]=i*Math.cos(s)-c*Math.sin(s)+r,e[1]=i*Math.sin(s)+c*Math.cos(s)+a,e[2]=n[2],e}static angle(e,t){let n=e[0],s=e[1],r=e[2],a=t[0],i=t[1],c=t[2],y=Math.sqrt((n*n+s*s+r*r)*(a*a+i*i+c*c)),d=y&&h.dot(e,t)/y;return Math.acos(Math.min(Math.max(d,-1),1))}static zero(e){return e[0]=0,e[1]=0,e[2]=0,e}static str(e){return`Vec3(${e.join(", ")})`}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]}static equals(e,t){let n=e[0],s=e[1],r=e[2],a=t[0],i=t[1],c=t[2];return Math.abs(n-a)<=1e-6*Math.max(1,Math.abs(n),Math.abs(a))&&Math.abs(s-i)<=1e-6*Math.max(1,Math.abs(s),Math.abs(i))&&Math.abs(r-c)<=1e-6*Math.max(1,Math.abs(r),Math.abs(c))}};Q.prototype.sub=Q.prototype.subtract;Q.prototype.mul=Q.prototype.multiply;Q.prototype.div=Q.prototype.divide;Q.prototype.dist=Q.prototype.distance;Q.prototype.sqrDist=Q.prototype.squaredDistance;Q.sub=Q.subtract;Q.mul=Q.multiply;Q.div=Q.divide;Q.dist=Q.distance;Q.sqrDist=Q.squaredDistance;Q.sqrLen=Q.squaredLength;Q.mag=Q.magnitude;Q.length=Q.magnitude;Q.len=Q.magnitude;var p=class h extends Float64Array{constructor(...e){switch(e.length){case 4:super(e);break;case 2:super(e[0],e[1],4);break;case 1:{let t=e[0];t===void 0?super(4):typeof t=="number"?super([t,t,t,t]):super(t,0,4);break}default:super(4);break}}get x(){return this[0]}set x(e){this[0]=e}get y(){return this[1]}set y(e){this[1]=e}get z(){return this[2]}set z(e){this[2]=e}get w(){return this[3]}set w(e){this[3]=e}get r(){return this[0]}set r(e){this[0]=e}get g(){return this[1]}set g(e){this[1]=e}get b(){return this[2]}set b(e){this[2]=e}get a(){return this[3]}set a(e){this[3]=e}get magnitude(){let e=this[0],t=this[1],n=this[2],s=this[3];return Math.sqrt(e*e+t*t+n*n+s*s)}get mag(){return this.magnitude}get str(){return h.str(this)}copy(e){return super.set(e),this}add(e){return this[0]+=e[0],this[1]+=e[1],this[2]+=e[2],this[3]+=e[3],this}subtract(e){return this[0]-=e[0],this[1]-=e[1],this[2]-=e[2],this[3]-=e[3],this}sub(e){return this}multiply(e){return this[0]*=e[0],this[1]*=e[1],this[2]*=e[2],this[3]*=e[3],this}mul(e){return this}divide(e){return this[0]/=e[0],this[1]/=e[1],this[2]/=e[2],this[3]/=e[3],this}div(e){return this}scale(e){return this[0]*=e,this[1]*=e,this[2]*=e,this[3]*=e,this}scaleAndAdd(e,t){return this[0]+=e[0]*t,this[1]+=e[1]*t,this[2]+=e[2]*t,this[3]+=e[3]*t,this}distance(e){return h.distance(this,e)}dist(e){return 0}squaredDistance(e){return h.squaredDistance(this,e)}sqrDist(e){return 0}negate(){return this[0]*=-1,this[1]*=-1,this[2]*=-1,this[3]*=-1,this}invert(){return this[0]=1/this[0],this[1]=1/this[1],this[2]=1/this[2],this[3]=1/this[3],this}abs(){return this[0]=Math.abs(this[0]),this[1]=Math.abs(this[1]),this[2]=Math.abs(this[2]),this[3]=Math.abs(this[3]),this}dot(e){return this[0]*e[0]+this[1]*e[1]+this[2]*e[2]+this[3]*e[3]}normalize(){return h.normalize(this,this)}static get BYTE_LENGTH(){return 4*Float64Array.BYTES_PER_ELEMENT}static create(){return new h}static clone(e){return new h(e)}static fromValues(e,t,n,s){return new h(e,t,n,s)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}static set(e,t,n,s,r){return e[0]=t,e[1]=n,e[2]=s,e[3]=r,e}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e}static subtract(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e}static sub(e,t,n){return e}static multiply(e,t,n){return e[0]=t[0]*n[0],e[1]=t[1]*n[1],e[2]=t[2]*n[2],e[3]=t[3]*n[3],e}static mul(e,t,n){return e}static divide(e,t,n){return e[0]=t[0]/n[0],e[1]=t[1]/n[1],e[2]=t[2]/n[2],e[3]=t[3]/n[3],e}static div(e,t,n){return e}static ceil(e,t){return e[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e[2]=Math.ceil(t[2]),e[3]=Math.ceil(t[3]),e}static floor(e,t){return e[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e[2]=Math.floor(t[2]),e[3]=Math.floor(t[3]),e}static min(e,t,n){return e[0]=Math.min(t[0],n[0]),e[1]=Math.min(t[1],n[1]),e[2]=Math.min(t[2],n[2]),e[3]=Math.min(t[3],n[3]),e}static max(e,t,n){return e[0]=Math.max(t[0],n[0]),e[1]=Math.max(t[1],n[1]),e[2]=Math.max(t[2],n[2]),e[3]=Math.max(t[3],n[3]),e}static round(e,t){return e[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e[2]=Math.round(t[2]),e[3]=Math.round(t[3]),e}static scale(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e}static scaleAndAdd(e,t,n,s){return e[0]=t[0]+n[0]*s,e[1]=t[1]+n[1]*s,e[2]=t[2]+n[2]*s,e[3]=t[3]+n[3]*s,e}static distance(e,t){let n=t[0]-e[0],s=t[1]-e[1],r=t[2]-e[2],a=t[3]-e[3];return Math.hypot(n,s,r,a)}static dist(e,t){return 0}static squaredDistance(e,t){let n=t[0]-e[0],s=t[1]-e[1],r=t[2]-e[2],a=t[3]-e[3];return n*n+s*s+r*r+a*a}static sqrDist(e,t){return 0}static magnitude(e){let t=e[0],n=e[1],s=e[2],r=e[3];return Math.sqrt(t*t+n*n+s*s+r*r)}static mag(e){return 0}static length(e){return 0}static len(e){return 0}static squaredLength(e){let t=e[0],n=e[1],s=e[2],r=e[3];return t*t+n*n+s*s+r*r}static sqrLen(e){return 0}static negate(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=-t[3],e}static inverse(e,t){return e[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e[3]=1/t[3],e}static abs(e,t){return e[0]=Math.abs(t[0]),e[1]=Math.abs(t[1]),e[2]=Math.abs(t[2]),e[3]=Math.abs(t[3]),e}static normalize(e,t){let n=t[0],s=t[1],r=t[2],a=t[3],i=n*n+s*s+r*r+a*a;return i>0&&(i=1/Math.sqrt(i)),e[0]=n*i,e[1]=s*i,e[2]=r*i,e[3]=a*i,e}static dot(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]}static cross(e,t,n,s){let r=n[0]*s[1]-n[1]*s[0],a=n[0]*s[2]-n[2]*s[0],i=n[0]*s[3]-n[3]*s[0],c=n[1]*s[2]-n[2]*s[1],y=n[1]*s[3]-n[3]*s[1],d=n[2]*s[3]-n[3]*s[2],l=t[0],L=t[1],b=t[2],k=t[3];return e[0]=L*d-b*y+k*c,e[1]=-(l*d)+b*i-k*a,e[2]=l*y-L*i+k*r,e[3]=-(l*c)+L*a-b*r,e}static lerp(e,t,n,s){let r=t[0],a=t[1],i=t[2],c=t[3];return e[0]=r+s*(n[0]-r),e[1]=a+s*(n[1]-a),e[2]=i+s*(n[2]-i),e[3]=c+s*(n[3]-c),e}static transformMat4(e,t,n){let s=t[0],r=t[1],a=t[2],i=t[3];return e[0]=n[0]*s+n[4]*r+n[8]*a+n[12]*i,e[1]=n[1]*s+n[5]*r+n[9]*a+n[13]*i,e[2]=n[2]*s+n[6]*r+n[10]*a+n[14]*i,e[3]=n[3]*s+n[7]*r+n[11]*a+n[15]*i,e}static transformQuat(e,t,n){let s=t[0],r=t[1],a=t[2],i=n[0],c=n[1],y=n[2],d=n[3],l=d*s+c*a-y*r,L=d*r+y*s-i*a,b=d*a+i*r-c*s,k=-i*s-c*r-y*a;return e[0]=l*d+k*-i+L*-y-b*-c,e[1]=L*d+k*-c+b*-i-l*-y,e[2]=b*d+k*-y+l*-c-L*-i,e[3]=t[3],e}static zero(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=0,e}static str(e){return`Vec4(${e.join(", ")})`}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]}static equals(e,t){let n=e[0],s=e[1],r=e[2],a=e[3],i=t[0],c=t[1],y=t[2],d=t[3];return Math.abs(n-i)<=1e-6*Math.max(1,Math.abs(n),Math.abs(i))&&Math.abs(s-c)<=1e-6*Math.max(1,Math.abs(s),Math.abs(c))&&Math.abs(r-y)<=1e-6*Math.max(1,Math.abs(r),Math.abs(y))&&Math.abs(a-d)<=1e-6*Math.max(1,Math.abs(a),Math.abs(d))}};p.prototype.sub=p.prototype.subtract;p.prototype.mul=p.prototype.multiply;p.prototype.div=p.prototype.divide;p.prototype.dist=p.prototype.distance;p.prototype.sqrDist=p.prototype.squaredDistance;p.sub=p.subtract;p.mul=p.multiply;p.div=p.divide;p.dist=p.distance;p.sqrDist=p.squaredDistance;p.sqrLen=p.squaredLength;p.mag=p.magnitude;p.length=p.magnitude;p.len=p.magnitude;var H=new Float64Array([0,0,0,1]),q=class h extends Float64Array{static#e="zyx";static#t=new Float64Array(4);static#r=new Float64Array(4);static#n=new Float64Array(9);static#s=new Float64Array(3);static#a=new Float64Array([1,0,0]);static#i=new Float64Array([0,1,0]);constructor(...e){switch(e.length){case 4:super(e);break;case 2:super(e[0],e[1],4);break;case 1:{let t=e[0];t===void 0?super(H):typeof t=="number"?super([t,t,t,t]):super(t,0,4);break}default:super(H);break}}get x(){return this[0]}set x(e){this[0]=e}get y(){return this[1]}set y(e){this[1]=e}get z(){return this[2]}set z(e){this[2]=e}get w(){return this[3]}set w(e){this[3]=e}get magnitude(){let e=this[0],t=this[1],n=this[2],s=this[3];return Math.sqrt(e*e+t*t+n*n+s*s)}get mag(){return this.magnitude}get str(){return h.str(this)}copy(e){return super.set(e),this}identity(){return this.set(H),this}multiply(e){return h.multiply(this,this,e)}mul(e){return this}rotateX(e){return h.rotateX(this,this,e)}rotateY(e){return h.rotateY(this,this,e)}rotateZ(e){return h.rotateZ(this,this,e)}invert(){return h.invert(this,this)}scale(e){return this[0]*=e,this[1]*=e,this[2]*=e,this[3]*=e,this}dot(e){return h.dot(this,e)}static get BYTE_LENGTH(){return 4*Float64Array.BYTES_PER_ELEMENT}static create(){return new h}static identity(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e}static setAxisAngle(e,t,n){n*=.5;let s=Math.sin(n);return e[0]=s*t[0],e[1]=s*t[1],e[2]=s*t[2],e[3]=Math.cos(n),e}static getAxisAngle(e,t){let n=Math.acos(t[3])*2,s=Math.sin(n/2);return s>1e-6?(e[0]=t[0]/s,e[1]=t[1]/s,e[2]=t[2]/s):(e[0]=1,e[1]=0,e[2]=0),n}static getAngle(e,t){let n=h.dot(e,t);return Math.acos(2*n*n-1)}static multiply(e,t,n){let s=t[0],r=t[1],a=t[2],i=t[3],c=n[0],y=n[1],d=n[2],l=n[3];return e[0]=s*l+i*c+r*d-a*y,e[1]=r*l+i*y+a*c-s*d,e[2]=a*l+i*d+s*y-r*c,e[3]=i*l-s*c-r*y-a*d,e}static rotateX(e,t,n){n*=.5;let s=t[0],r=t[1],a=t[2],i=t[3],c=Math.sin(n),y=Math.cos(n);return e[0]=s*y+i*c,e[1]=r*y+a*c,e[2]=a*y-r*c,e[3]=i*y-s*c,e}static rotateY(e,t,n){n*=.5;let s=t[0],r=t[1],a=t[2],i=t[3],c=Math.sin(n),y=Math.cos(n);return e[0]=s*y-a*c,e[1]=r*y+i*c,e[2]=a*y+s*c,e[3]=i*y-r*c,e}static rotateZ(e,t,n){n*=.5;let s=t[0],r=t[1],a=t[2],i=t[3],c=Math.sin(n),y=Math.cos(n);return e[0]=s*y+r*c,e[1]=r*y-s*c,e[2]=a*y+i*c,e[3]=i*y-a*c,e}static calculateW(e,t){let n=t[0],s=t[1],r=t[2];return e[0]=n,e[1]=s,e[2]=r,e[3]=Math.sqrt(Math.abs(1-n*n-s*s-r*r)),e}static exp(e,t){let n=t[0],s=t[1],r=t[2],a=t[3],i=Math.sqrt(n*n+s*s+r*r),c=Math.exp(a),y=i>0?c*Math.sin(i)/i:0;return e[0]=n*y,e[1]=s*y,e[2]=r*y,e[3]=c*Math.cos(i),e}static ln(e,t){let n=t[0],s=t[1],r=t[2],a=t[3],i=Math.sqrt(n*n+s*s+r*r),c=i>0?Math.atan2(i,a)/i:0;return e[0]=n*c,e[1]=s*c,e[2]=r*c,e[3]=.5*Math.log(n*n+s*s+r*r+a*a),e}static pow(e,t,n){return h.ln(e,t),h.scale(e,e,n),h.exp(e,e),e}static slerp(e,t,n,s){let r=t[0],a=t[1],i=t[2],c=t[3],y=n[0],d=n[1],l=n[2],L=n[3],b,k,x=r*y+a*d+i*l+c*L;if(x<0&&(x=-x,y=-y,d=-d,l=-l,L=-L),1-x>1e-6){let M=Math.acos(x),T=Math.sin(M);b=Math.sin((1-s)*M)/T,k=Math.sin(s*M)/T}else b=1-s,k=s;return e[0]=b*r+k*y,e[1]=b*a+k*d,e[2]=b*i+k*l,e[3]=b*c+k*L,e}static invert(e,t){let n=t[0],s=t[1],r=t[2],a=t[3],i=n*n+s*s+r*r+a*a,c=i?1/i:0;return e[0]=-n*c,e[1]=-s*c,e[2]=-r*c,e[3]=a*c,e}static conjugate(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=t[3],e}static fromMat3(e,t){let n=t[0]+t[4]+t[8],s;if(n>0)s=Math.sqrt(n+1),e[3]=.5*s,s=.5/s,e[0]=(t[5]-t[7])*s,e[1]=(t[6]-t[2])*s,e[2]=(t[1]-t[3])*s;else{let r=0;t[4]>t[0]&&(r=1),t[8]>t[r*3+r]&&(r=2);let a=(r+1)%3,i=(r+2)%3;s=Math.sqrt(t[r*3+r]-t[a*3+a]-t[i*3+i]+1),e[r]=.5*s,s=.5/s,e[3]=(t[a*3+i]-t[i*3+a])*s,e[a]=(t[a*3+r]+t[r*3+a])*s,e[i]=(t[i*3+r]+t[r*3+i])*s}return e}static fromEuler(e,t,n,s,r=h.#e){let a=.5*Math.PI/180;t*=a,n*=a,s*=a;let i=Math.sin(t),c=Math.cos(t),y=Math.sin(n),d=Math.cos(n),l=Math.sin(s),L=Math.cos(s);switch(r){case"xyz":e[0]=i*d*L+c*y*l,e[1]=c*y*L-i*d*l,e[2]=c*d*l+i*y*L,e[3]=c*d*L-i*y*l;break;case"xzy":e[0]=i*d*L-c*y*l,e[1]=c*y*L-i*d*l,e[2]=c*d*l+i*y*L,e[3]=c*d*L+i*y*l;break;case"yxz":e[0]=i*d*L+c*y*l,e[1]=c*y*L-i*d*l,e[2]=c*d*l-i*y*L,e[3]=c*d*L+i*y*l;break;case"yzx":e[0]=i*d*L+c*y*l,e[1]=c*y*L+i*d*l,e[2]=c*d*l-i*y*L,e[3]=c*d*L-i*y*l;break;case"zxy":e[0]=i*d*L-c*y*l,e[1]=c*y*L+i*d*l,e[2]=c*d*l+i*y*L,e[3]=c*d*L-i*y*l;break;case"zyx":e[0]=i*d*L-c*y*l,e[1]=c*y*L+i*d*l,e[2]=c*d*l-i*y*L,e[3]=c*d*L+i*y*l;break;default:throw new Error(`Unknown angle order ${r}`)}return e}static str(e){return`Quat(${e.join(", ")})`}static clone(e){return new h(e)}static fromValues(e,t,n,s){return new h(e,t,n,s)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}static set(e,t,n,s,r){return e}static add(e,t,n){return e}static mul(e,t,n){return e}static scale(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e}static dot(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]}static lerp(e,t,n,s){return e}static magnitude(e){return 0}static mag(e){return 0}static length(e){return 0}static len(e){return 0}static squaredLength(e){return 0}static sqrLen(e){return 0}static normalize(e,t){return e}static exactEquals(e,t){return!1}static equals(e,t){return!1}static rotationTo(e,t,n){let s=Q.dot(t,n);return s<-.999999?(Q.cross(h.#s,h.#a,t),Q.mag(h.#s)<1e-6&&Q.cross(h.#s,h.#i,t),Q.normalize(h.#s,h.#s),h.setAxisAngle(e,h.#s,Math.PI),e):s>.999999?(e[0]=0,e[1]=0,e[2]=0,e[3]=1,e):(Q.cross(h.#s,t,n),e[0]=h.#s[0],e[1]=h.#s[1],e[2]=h.#s[2],e[3]=1+s,h.normalize(e,e))}static sqlerp(e,t,n,s,r,a){return h.slerp(h.#t,t,r,a),h.slerp(h.#r,n,s,a),h.slerp(e,h.#t,h.#r,2*a*(1-a)),e}static setAxes(e,t,n,s){return h.#n[0]=n[0],h.#n[3]=n[1],h.#n[6]=n[2],h.#n[1]=s[0],h.#n[4]=s[1],h.#n[7]=s[2],h.#n[2]=-t[0],h.#n[5]=-t[1],h.#n[8]=-t[2],h.normalize(e,h.fromMat3(e,h.#n))}};q.set=p.set;q.add=p.add;q.lerp=p.lerp;q.normalize=p.normalize;q.squaredLength=p.squaredLength;q.sqrLen=p.squaredLength;q.exactEquals=p.exactEquals;q.equals=p.equals;q.magnitude=p.magnitude;q.prototype.mul=q.prototype.multiply;q.mul=q.multiply;q.mag=q.magnitude;q.length=q.magnitude;q.len=q.magnitude;var J=new Float64Array([0,0,0,1,0,0,0,0]),Y=class h extends Float64Array{static#e=new Float64Array(4);static#t=new Float64Array(3);constructor(...e){switch(e.length){case 8:super(e);break;case 2:super(e[0],e[1],8);break;case 1:{let t=e[0];t===void 0?super(J):typeof t=="number"?super([t,t,t,t,t,t,t,t]):super(t,0,8);break}default:super(J);break}}get str(){return h.str(this)}copy(e){return super.set(e),this}static get BYTE_LENGTH(){return 8*Float64Array.BYTES_PER_ELEMENT}static create(){return new h}static clone(e){return new h(e)}static fromValues(e,t,n,s,r,a,i,c){return new h(e,t,n,s,r,a,i,c)}static fromRotationTranslationValues(e,t,n,s,r,a,i){let c=r*.5,y=a*.5,d=i*.5;return new h(e,t,n,s,c*s+y*n-d*t,y*s+d*e-c*n,d*s+c*t-y*e,-c*e-y*t-d*n)}static fromRotationTranslation(e,t,n){let s=n[0]*.5,r=n[1]*.5,a=n[2]*.5,i=t[0],c=t[1],y=t[2],d=t[3];return e[0]=i,e[1]=c,e[2]=y,e[3]=d,e[4]=s*d+r*y-a*c,e[5]=r*d+a*i-s*y,e[6]=a*d+s*c-r*i,e[7]=-s*i-r*c-a*y,e}static fromTranslation(e,t){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e[4]=t[0]*.5,e[5]=t[1]*.5,e[6]=t[2]*.5,e[7]=0,e}static fromRotation(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=0,e[5]=0,e[6]=0,e[7]=0,e}static fromMat4(e,t){return P.getRotation(h.#e,t),P.getTranslation(h.#t,t),h.fromRotationTranslation(e,h.#e,h.#t)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e}static identity(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e[4]=0,e[5]=0,e[6]=0,e[7]=0,e}static set(e,t,n,s,r,a,i,c,y){return e[0]=t,e[1]=n,e[2]=s,e[3]=r,e[4]=a,e[5]=i,e[6]=c,e[7]=y,e}static getReal(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}static getDual(e,t){return e[0]=t[4],e[1]=t[5],e[2]=t[6],e[3]=t[7],e}static setReal(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}static setDual(e,t){return e[4]=t[0],e[5]=t[1],e[6]=t[2],e[7]=t[3],e}static getTranslation(e,t){let n=t[4],s=t[5],r=t[6],a=t[7],i=-t[0],c=-t[1],y=-t[2],d=t[3];return e[0]=(n*d+a*i+s*y-r*c)*2,e[1]=(s*d+a*c+r*i-n*y)*2,e[2]=(r*d+a*y+n*c-s*i)*2,e}static translate(e,t,n){let s=t[0],r=t[1],a=t[2],i=t[3],c=n[0]*.5,y=n[1]*.5,d=n[2]*.5,l=t[4],L=t[5],b=t[6],k=t[7];return e[0]=s,e[1]=r,e[2]=a,e[3]=i,e[4]=i*c+r*d-a*y+l,e[5]=i*y+a*c-s*d+L,e[6]=i*d+s*y-r*c+b,e[7]=-s*c-r*y-a*d+k,e}static rotateX(e,t,n){let s=-t[0],r=-t[1],a=-t[2],i=t[3],c=t[4],y=t[5],d=t[6],l=t[7],L=c*i+l*s+y*a-d*r,b=y*i+l*r+d*s-c*a,k=d*i+l*a+c*r-y*s,x=l*i-c*s-y*r-d*a;return q.rotateX(e,t,n),s=e[0],r=e[1],a=e[2],i=e[3],e[4]=L*i+x*s+b*a-k*r,e[5]=b*i+x*r+k*s-L*a,e[6]=k*i+x*a+L*r-b*s,e[7]=x*i-L*s-b*r-k*a,e}static rotateY(e,t,n){let s=-t[0],r=-t[1],a=-t[2],i=t[3],c=t[4],y=t[5],d=t[6],l=t[7],L=c*i+l*s+y*a-d*r,b=y*i+l*r+d*s-c*a,k=d*i+l*a+c*r-y*s,x=l*i-c*s-y*r-d*a;return q.rotateY(e,t,n),s=e[0],r=e[1],a=e[2],i=e[3],e[4]=L*i+x*s+b*a-k*r,e[5]=b*i+x*r+k*s-L*a,e[6]=k*i+x*a+L*r-b*s,e[7]=x*i-L*s-b*r-k*a,e}static rotateZ(e,t,n){let s=-t[0],r=-t[1],a=-t[2],i=t[3],c=t[4],y=t[5],d=t[6],l=t[7],L=c*i+l*s+y*a-d*r,b=y*i+l*r+d*s-c*a,k=d*i+l*a+c*r-y*s,x=l*i-c*s-y*r-d*a;return q.rotateZ(e,t,n),s=e[0],r=e[1],a=e[2],i=e[3],e[4]=L*i+x*s+b*a-k*r,e[5]=b*i+x*r+k*s-L*a,e[6]=k*i+x*a+L*r-b*s,e[7]=x*i-L*s-b*r-k*a,e}static rotateByQuatAppend(e,t,n){let s=n[0],r=n[1],a=n[2],i=n[3],c=t[0],y=t[1],d=t[2],l=t[3];return e[0]=c*i+l*s+y*a-d*r,e[1]=y*i+l*r+d*s-c*a,e[2]=d*i+l*a+c*r-y*s,e[3]=l*i-c*s-y*r-d*a,c=t[4],y=t[5],d=t[6],l=t[7],e[4]=c*i+l*s+y*a-d*r,e[5]=y*i+l*r+d*s-c*a,e[6]=d*i+l*a+c*r-y*s,e[7]=l*i-c*s-y*r-d*a,e}static rotateByQuatPrepend(e,t,n){let s=t[0],r=t[1],a=t[2],i=t[3],c=n[0],y=n[1],d=n[2],l=n[3];return e[0]=s*l+i*c+r*d-a*y,e[1]=r*l+i*y+a*c-s*d,e[2]=a*l+i*d+s*y-r*c,e[3]=i*l-s*c-r*y-a*d,c=n[4],y=n[5],d=n[6],l=n[7],e[4]=s*l+i*c+r*d-a*y,e[5]=r*l+i*y+a*c-s*d,e[6]=a*l+i*d+s*y-r*c,e[7]=i*l-s*c-r*y-a*d,e}static rotateAroundAxis(e,t,n,s){if(Math.abs(s)<1e-6)return h.copy(e,t);let r=Math.sqrt(n[0]*n[0]+n[1]*n[1]+n[2]*n[2]);s*=.5;let a=Math.sin(s),i=a*n[0]/r,c=a*n[1]/r,y=a*n[2]/r,d=Math.cos(s),l=t[0],L=t[1],b=t[2],k=t[3];e[0]=l*d+k*i+L*y-b*c,e[1]=L*d+k*c+b*i-l*y,e[2]=b*d+k*y+l*c-L*i,e[3]=k*d-l*i-L*c-b*y;let x=t[4],M=t[5],T=t[6],m=t[7];return e[4]=x*d+m*i+M*y-T*c,e[5]=M*d+m*c+T*i-x*y,e[6]=T*d+m*y+x*c-M*i,e[7]=m*d-x*i-M*c-T*y,e}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e[4]=t[4]+n[4],e[5]=t[5]+n[5],e[6]=t[6]+n[6],e[7]=t[7]+n[7],e}static multiply(e,t,n){let s=t[0],r=t[1],a=t[2],i=t[3],c=n[4],y=n[5],d=n[6],l=n[7],L=t[4],b=t[5],k=t[6],x=t[7],M=n[0],T=n[1],m=n[2],g=n[3];return e[0]=s*g+i*M+r*m-a*T,e[1]=r*g+i*T+a*M-s*m,e[2]=a*g+i*m+s*T-r*M,e[3]=i*g-s*M-r*T-a*m,e[4]=s*l+i*c+r*d-a*y+L*g+x*M+b*m-k*T,e[5]=r*l+i*y+a*c-s*d+b*g+x*T+k*M-L*m,e[6]=a*l+i*d+s*y-r*c+k*g+x*m+L*T-b*M,e[7]=i*l-s*c-r*y-a*d+x*g-L*M-b*T-k*m,e}static mul(e,t,n){return e}static scale(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*n,e[5]=t[5]*n,e[6]=t[6]*n,e[7]=t[7]*n,e}static dot(e,t){return 0}static lerp(e,t,n,s){let r=1-s;return h.dot(t,n)<0&&(s=-s),e[0]=t[0]*r+n[0]*s,e[1]=t[1]*r+n[1]*s,e[2]=t[2]*r+n[2]*s,e[3]=t[3]*r+n[3]*s,e[4]=t[4]*r+n[4]*s,e[5]=t[5]*r+n[5]*s,e[6]=t[6]*r+n[6]*s,e[7]=t[7]*r+n[7]*s,e}static invert(e,t){let n=h.squaredLength(t);return e[0]=-t[0]/n,e[1]=-t[1]/n,e[2]=-t[2]/n,e[3]=t[3]/n,e[4]=-t[4]/n,e[5]=-t[5]/n,e[6]=-t[6]/n,e[7]=t[7]/n,e}static conjugate(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=t[3],e[4]=-t[4],e[5]=-t[5],e[6]=-t[6],e[7]=t[7],e}static magnitude(e){return 0}static mag(e){return 0}static length(e){return 0}static len(e){return 0}static squaredLength(e){return 0}static sqrLen(e){return 0}static normalize(e,t){let n=h.squaredLength(t);if(n>0){n=Math.sqrt(n);let s=t[0]/n,r=t[1]/n,a=t[2]/n,i=t[3]/n,c=t[4],y=t[5],d=t[6],l=t[7],L=s*c+r*y+a*d+i*l;e[0]=s,e[1]=r,e[2]=a,e[3]=i,e[4]=(c-s*L)/n,e[5]=(y-r*L)/n,e[6]=(d-a*L)/n,e[7]=(l-i*L)/n}return e}static str(e){return`Quat2(${e.join(", ")})`}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]}static equals(e,t){let n=e[0],s=e[1],r=e[2],a=e[3],i=e[4],c=e[5],y=e[6],d=e[7],l=t[0],L=t[1],b=t[2],k=t[3],x=t[4],M=t[5],T=t[6],m=t[7];return Math.abs(n-l)<=1e-6*Math.max(1,Math.abs(n),Math.abs(l))&&Math.abs(s-L)<=1e-6*Math.max(1,Math.abs(s),Math.abs(L))&&Math.abs(r-b)<=1e-6*Math.max(1,Math.abs(r),Math.abs(b))&&Math.abs(a-k)<=1e-6*Math.max(1,Math.abs(a),Math.abs(k))&&Math.abs(i-x)<=1e-6*Math.max(1,Math.abs(i),Math.abs(x))&&Math.abs(c-M)<=1e-6*Math.max(1,Math.abs(c),Math.abs(M))&&Math.abs(y-T)<=1e-6*Math.max(1,Math.abs(y),Math.abs(T))&&Math.abs(d-m)<=1e-6*Math.max(1,Math.abs(d),Math.abs(m))}};Y.dot=q.dot;Y.squaredLength=q.squaredLength;Y.sqrLen=q.squaredLength;Y.mag=q.magnitude;Y.length=q.magnitude;Y.len=q.magnitude;Y.mul=Y.multiply;var E=class h extends Float64Array{constructor(...e){switch(e.length){case 2:{let t=e[0];typeof t=="number"?super([t,e[1]]):super(t,e[1],2);break}case 1:{let t=e[0];t===void 0?super(2):typeof t=="number"?super([t,t]):super(t,0,2);break}default:super(2);break}}get x(){return this[0]}set x(e){this[0]=e}get y(){return this[1]}set y(e){this[1]=e}get r(){return this[0]}set r(e){this[0]=e}get g(){return this[1]}set g(e){this[1]=e}get magnitude(){return Math.hypot(this[0],this[1])}get mag(){return this.magnitude}get squaredMagnitude(){let e=this[0],t=this[1];return e*e+t*t}get sqrMag(){return this.squaredMagnitude}get str(){return h.str(this)}copy(e){return this.set(e),this}add(e){return this[0]+=e[0],this[1]+=e[1],this}subtract(e){return this[0]-=e[0],this[1]-=e[1],this}sub(e){return this}multiply(e){return this[0]*=e[0],this[1]*=e[1],this}mul(e){return this}divide(e){return this[0]/=e[0],this[1]/=e[1],this}div(e){return this}scale(e){return this[0]*=e,this[1]*=e,this}scaleAndAdd(e,t){return this[0]+=e[0]*t,this[1]+=e[1]*t,this}distance(e){return h.distance(this,e)}dist(e){return 0}squaredDistance(e){return h.squaredDistance(this,e)}sqrDist(e){return 0}negate(){return this[0]*=-1,this[1]*=-1,this}invert(){return this[0]=1/this[0],this[1]=1/this[1],this}abs(){return this[0]=Math.abs(this[0]),this[1]=Math.abs(this[1]),this}dot(e){return this[0]*e[0]+this[1]*e[1]}normalize(){return h.normalize(this,this)}static get BYTE_LENGTH(){return 2*Float64Array.BYTES_PER_ELEMENT}static create(){return new h}static clone(e){return new h(e)}static fromValues(e,t){return new h(e,t)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e}static set(e,t,n){return e[0]=t,e[1]=n,e}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e}static subtract(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e}static sub(e,t,n){return e}static multiply(e,t,n){return e[0]=t[0]*n[0],e[1]=t[1]*n[1],e}static mul(e,t,n){return e}static divide(e,t,n){return e[0]=t[0]/n[0],e[1]=t[1]/n[1],e}static div(e,t,n){return e}static ceil(e,t){return e[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e}static floor(e,t){return e[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e}static min(e,t,n){return e[0]=Math.min(t[0],n[0]),e[1]=Math.min(t[1],n[1]),e}static max(e,t,n){return e[0]=Math.max(t[0],n[0]),e[1]=Math.max(t[1],n[1]),e}static round(e,t){return e[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e}static scale(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e}static scaleAndAdd(e,t,n,s){return e[0]=t[0]+n[0]*s,e[1]=t[1]+n[1]*s,e}static distance(e,t){return Math.hypot(t[0]-e[0],t[1]-e[1])}static dist(e,t){return 0}static squaredDistance(e,t){let n=t[0]-e[0],s=t[1]-e[1];return n*n+s*s}static sqrDist(e,t){return 0}static magnitude(e){let t=e[0],n=e[1];return Math.sqrt(t*t+n*n)}static mag(e){return 0}static length(e){return 0}static len(e){return 0}static squaredLength(e){let t=e[0],n=e[1];return t*t+n*n}static sqrLen(e,t){return 0}static negate(e,t){return e[0]=-t[0],e[1]=-t[1],e}static inverse(e,t){return e[0]=1/t[0],e[1]=1/t[1],e}static abs(e,t){return e[0]=Math.abs(t[0]),e[1]=Math.abs(t[1]),e}static normalize(e,t){let n=t[0],s=t[1],r=n*n+s*s;return r>0&&(r=1/Math.sqrt(r)),e[0]=t[0]*r,e[1]=t[1]*r,e}static dot(e,t){return e[0]*t[0]+e[1]*t[1]}static cross(e,t,n){let s=t[0]*n[1]-t[1]*n[0];return e[0]=e[1]=0,e[2]=s,e}static lerp(e,t,n,s){let r=t[0],a=t[1];return e[0]=r+s*(n[0]-r),e[1]=a+s*(n[1]-a),e}static transformMat2(e,t,n){let s=t[0],r=t[1];return e[0]=n[0]*s+n[2]*r,e[1]=n[1]*s+n[3]*r,e}static transformMat2d(e,t,n){let s=t[0],r=t[1];return e[0]=n[0]*s+n[2]*r+n[4],e[1]=n[1]*s+n[3]*r+n[5],e}static transformMat3(e,t,n){let s=t[0],r=t[1];return e[0]=n[0]*s+n[3]*r+n[6],e[1]=n[1]*s+n[4]*r+n[7],e}static transformMat4(e,t,n){let s=t[0],r=t[1];return e[0]=n[0]*s+n[4]*r+n[12],e[1]=n[1]*s+n[5]*r+n[13],e}static rotate(e,t,n,s){let r=t[0]-n[0],a=t[1]-n[1],i=Math.sin(s),c=Math.cos(s);return e[0]=r*c-a*i+n[0],e[1]=r*i+a*c+n[1],e}static angle(e,t){let n=e[0],s=e[1],r=t[0],a=t[1],i=Math.sqrt(n*n+s*s)*Math.sqrt(r*r+a*a),c=i&&(n*r+s*a)/i;return Math.acos(Math.min(Math.max(c,-1),1))}static zero(e){return e[0]=0,e[1]=0,e}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]}static equals(e,t){let n=e[0],s=e[1],r=t[0],a=t[1];return Math.abs(n-r)<=1e-6*Math.max(1,Math.abs(n),Math.abs(r))&&Math.abs(s-a)<=1e-6*Math.max(1,Math.abs(s),Math.abs(a))}static str(e){return`Vec2(${e.join(", ")})`}};E.prototype.sub=E.prototype.subtract;E.prototype.mul=E.prototype.multiply;E.prototype.div=E.prototype.divide;E.prototype.dist=E.prototype.distance;E.prototype.sqrDist=E.prototype.squaredDistance;E.sub=E.subtract;E.mul=E.multiply;E.div=E.divide;E.dist=E.distance;E.sqrDist=E.squaredDistance;E.sqrLen=E.squaredLength;E.mag=E.magnitude;E.length=E.magnitude;E.len=E.magnitude;var K=!1;function se(){if(K)return;let h=["xx","xy","yx","yy","xxx","xxy","xyx","xyy","yxx","yxy","yyx","yyy","xxxx","xxxy","xxyx","xxyy","xyxx","xyxy","xyyx","xyyy","yxxx","yxxy","yxyx","yxyy","yyxx","yyxy","yyyx","yyyy","rr","rg","gr","gg","rrr","rrg","rgr","rgg","grr","grg","ggr","ggg","rrrr","rrrg","rrgr","rrgg","rgrr","rgrg","rggr","rggg","grrr","grrg","grgr","grgg","ggrr","ggrg","gggr","gggg"],e=["xz","yz","zx","zy","zz","xxz","xyz","xzx","xzy","xzz","yxz","yyz","yzx","yzy","yzz","zxx","zxy","zxz","zyx","zyy","zyz","zzx","zzy","zzz","xxxz","xxyz","xxzx","xxzy","xxzz","xyxz","xyyz","xyzx","xyzy","xyzz","xzxx","xzxy","xzxz","xzyx","xzyy","xzyz","xzzx","xzzy","xzzz","yxxz","yxyz","yxzx","yxzy","yxzz","yyxz","yyyz","yyzx","yyzy","yyzz","yzxx","yzxy","yzxz","yzyx","yzyy","yzyz","yzzx","yzzy","yzzz","zxxx","zxxy","zxxz","zxyx","zxyy","zxyz","zxzx","zxzy","zxzz","zyxx","zyxy","zyxz","zyyx","zyyy","zyyz","zyzx","zyzy","zyzz","zzxx","zzxy","zzxz","zzyx","zzyy","zzyz","zzzx","zzzy","zzzz","rb","gb","br","bg","bb","rrb","rgb","rbr","rbg","rbb","grb","ggb","gbr","gbg","gbb","brr","brg","brb","bgr","bgg","bgb","bbr","bbg","bbb","rrrb","rrgb","rrbr","rrbg","rrbb","rgrb","rggb","rgbr","rgbg","rgbb","rbrr","rbrg","rbrb","rbgr","rbgg","rbgb","rbbr","rbbg","rbbb","grrb","grgb","grbr","grbg","grbb","ggrb","gggb","ggbr","ggbg","ggbb","gbrr","gbrg","gbrb","gbgr","gbgg","gbgb","gbbr","gbbg","gbbb","brrr","brrg","brrb","brgr","brgg","brgb","brbr","brbg","brbb","bgrr","bgrg","bgrb","bggr","bggg","bggb","bgbr","bgbg","bgbb","bbrr","bbrg","bbrb","bbgr","bbgg","bbgb","bbbr","bbbg","bbbb"],t=["xw","yw","zw","wx","wy","wz","ww","xxw","xyw","xzw","xwx","xwy","xwz","xww","yxw","yyw","yzw","ywx","ywy","ywz","yww","zxw","zyw","zzw","zwx","zwy","zwz","zww","wxx","wxy","wxz","wxw","wyx","wyy","wyz","wyw","wzx","wzy","wzz","wzw","wwx","wwy","wwz","www","xxxw","xxyw","xxzw","xxwx","xxwy","xxwz","xxww","xyxw","xyyw","xyzw","xywx","xywy","xywz","xyww","xzxw","xzyw","xzzw","xzwx","xzwy","xzwz","xzww","xwxx","xwxy","xwxz","xwxw","xwyx","xwyy","xwyz","xwyw","xwzx","xwzy","xwzz","xwzw","xwwx","xwwy","xwwz","xwww","yxxw","yxyw","yxzw","yxwx","yxwy","yxwz","yxww","yyxw","yyyw","yyzw","yywx","yywy","yywz","yyww","yzxw","yzyw","yzzw","yzwx","yzwy","yzwz","yzww","ywxx","ywxy","ywxz","ywxw","ywyx","ywyy","ywyz","ywyw","ywzx","ywzy","ywzz","ywzw","ywwx","ywwy","ywwz","ywww","zxxw","zxyw","zxzw","zxwx","zxwy","zxwz","zxww","zyxw","zyyw","zyzw","zywx","zywy","zywz","zyww","zzxw","zzyw","zzzw","zzwx","zzwy","zzwz","zzww","zwxx","zwxy","zwxz","zwxw","zwyx","zwyy","zwyz","zwyw","zwzx","zwzy","zwzz","zwzw","zwwx","zwwy","zwwz","zwww","wxxx","wxxy","wxxz","wxxw","wxyx","wxyy","wxyz","wxyw","wxzx","wxzy","wxzz","wxzw","wxwx","wxwy","wxwz","wxww","wyxx","wyxy","wyxz","wyxw","wyyx","wyyy","wyyz","wyyw","wyzx","wyzy","wyzz","wyzw","wywx","wywy","wywz","wyww","wzxx","wzxy","wzxz","wzxw","wzyx","wzyy","wzyz","wzyw","wzzx","wzzy","wzzz","wzzw","wzwx","wzwy","wzwz","wzww","wwxx","wwxy","wwxz","wwxw","wwyx","wwyy","wwyz","wwyw","wwzx","wwzy","wwzz","wwzw","wwwx","wwwy","wwwz","wwww","ra","ga","ba","ar","ag","ab","aa","rra","rga","rba","rar","rag","rab","raa","gra","gga","gba","gar","gag","gab","gaa","bra","bga","bba","bar","bag","bab","baa","arr","arg","arb","ara","agr","agg","agb","aga","abr","abg","abb","aba","aar","aag","aab","aaa","rrra","rrga","rrba","rrar","rrag","rrab","rraa","rgra","rgga","rgba","rgar","rgag","rgab","rgaa","rbra","rbga","rbba","rbar","rbag","rbab","rbaa","rarr","rarg","rarb","rara","ragr","ragg","ragb","raga","rabr","rabg","rabb","raba","raar","raag","raab","raaa","grra","grga","grba","grar","grag","grab","graa","ggra","ggga","ggba","ggar","ggag","ggab","ggaa","gbra","gbga","gbba","gbar","gbag","gbab","gbaa","garr","garg","garb","gara","gagr","gagg","gagb","gaga","gabr","gabg","gabb","gaba","gaar","gaag","gaab","gaaa","brra","brga","brba","brar","brag","brab","braa","bgra","bgga","bgba","bgar","bgag","bgab","bgaa","bbra","bbga","bbba","bbar","bbag","bbab","bbaa","barr","barg","barb","bara","bagr","bagg","bagb","baga","babr","babg","babb","baba","baar","baag","baab","baaa","arrr","arrg","arrb","arra","argr","argg","argb","arga","arbr","arbg","arbb","arba","arar","arag","arab","araa","agrr","agrg","agrb","agra","aggr","aggg","aggb","agga","agbr","agbg","agbb","agba","agar","agag","agab","agaa","abrr","abrg","abrb","abra","abgr","abgg","abgb","abga","abbr","abbg","abbb","abba","abar","abag","abab","abaa","aarr","aarg","aarb","aara","aagr","aagg","aagb","aaga","aabr","aabg","aabb","aaba","aaar","aaag","aaab","aaaa"],n={x:0,r:0,y:1,g:1,z:2,b:2,w:3,a:3};function s(r){switch(r.length){case 2:return function(){return new E(this[n[r[0]]],this[n[r[1]]])};case 3:return function(){return new Q(this[n[r[0]]],this[n[r[1]]],this[n[r[2]]])};case 4:return function(){return new p(this[n[r[0]]],this[n[r[1]]],this[n[r[2]]],this[n[r[3]]])}}throw new Error("Illegal swizzle length")}for(let r of h){let a=s(r);Object.defineProperty(E.prototype,r,{get:a}),Object.defineProperty(Q.prototype,r,{get:a}),Object.defineProperty(p.prototype,r,{get:a})}for(let r of e){let a=s(r);Object.defineProperty(Q.prototype,r,{get:a}),Object.defineProperty(p.prototype,r,{get:a})}for(let r of t){let a=s(r);Object.defineProperty(p.prototype,r,{get:a})}K=!0}var re=Math.PI/180,ae=180/Math.PI;function ie(h){return h*ae}function ce(h){return h*re}
//# sourceMappingURL=gl-matrix-f64.min.cjs.map
