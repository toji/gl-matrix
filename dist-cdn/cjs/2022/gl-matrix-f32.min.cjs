// gl-matrix - v4.0.0-beta.3 - A high performance matrix and vector library.
// @author Brandon Jones
// @author Colin MacKenzie IV
// @license MIT (https://github.com/toji/gl-matrix/blob/master/LICENSE.md)
var H=Object.defineProperty;var K=Object.getOwnPropertyDescriptor;var v=Object.getOwnPropertyNames;var u=Object.prototype.hasOwnProperty;var _=(h,e)=>{for(var t in e)H(h,t,{get:e[t],enumerable:!0})},ee=(h,e,t,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let s of v(e))!u.call(h,s)&&s!==t&&H(h,s,{get:()=>e[s],enumerable:!(n=K(e,s))||n.enumerable});return h};var te=h=>ee(H({},"__esModule",{value:!0}),h);var ae={};_(ae,{Mat2:()=>G,Mat2d:()=>Z,Mat3:()=>P,Mat4:()=>N,Quat:()=>q,Quat2:()=>O,Vec2:()=>A,Vec3:()=>w,Vec4:()=>z,mat2:()=>G,mat2d:()=>Z,mat3:()=>P,mat4:()=>N,quat:()=>q,quat2:()=>O,toDegree:()=>re,toRadian:()=>ie,vec2:()=>A,vec3:()=>w,vec4:()=>z});module.exports=te(ae);var G=class h extends Float32Array{static#e=new Float32Array([1,0,0,1]);constructor(...e){switch(e.length){case 4:super(e);break;case 2:super(e[0],e[1],4);break;case 1:let t=e[0];t===void 0?super(h.#e):typeof t=="number"?super([t,t,t,t]):super(t,0,4);break;default:super(h.#e);break}}get str(){return h.str(this)}copy(e){return this.set(e),this}identity(){return this.set(h.#e),this}multiply(e){return h.multiply(this,this,e)}mul(e){return this}transpose(){return h.transpose(this,this)}invert(){return h.invert(this,this)}scale(e){return h.scale(this,this,e)}rotate(e){return h.rotate(this,this,e)}static get BYTE_LENGTH(){return 4*Float32Array.BYTES_PER_ELEMENT}static create(){return new h}static clone(e){return new h(e)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}static fromValues(...e){return new h(...e)}static set(e,...t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}static identity(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e}static transpose(e,t){if(e===t){let n=t[1];e[1]=t[2],e[2]=n}else e[0]=t[0],e[1]=t[2],e[2]=t[1],e[3]=t[3];return e}static invert(e,t){let n=t[0],s=t[1],r=t[2],i=t[3],a=n*i-r*s;return a?(a=1/a,e[0]=i*a,e[1]=-s*a,e[2]=-r*a,e[3]=n*a,e):null}static adjoint(e,t){let n=t[0];return e[0]=t[3],e[1]=-t[1],e[2]=-t[2],e[3]=n,e}static determinant(e){return e[0]*e[3]-e[2]*e[1]}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e}static subtract(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e}static sub(e,t,n){return e}static multiply(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=n[0],d=n[1],l=n[2],L=n[3];return e[0]=s*c+i*d,e[1]=r*c+a*d,e[2]=s*l+i*L,e[3]=r*l+a*L,e}static mul(e,t,n){return e}static rotate(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=Math.sin(n),d=Math.cos(n);return e[0]=s*d+i*c,e[1]=r*d+a*c,e[2]=s*-c+i*d,e[3]=r*-c+a*d,e}static scale(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=n[0],d=n[1];return e[0]=s*c,e[1]=r*c,e[2]=i*d,e[3]=a*d,e}static fromRotation(e,t){let n=Math.sin(t),s=Math.cos(t);return e[0]=s,e[1]=n,e[2]=-n,e[3]=s,e}static fromScaling(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=t[1],e}static frob(e){return Math.sqrt(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]+e[3]*e[3])}static multiplyScalar(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e}static multiplyScalarAndAdd(e,t,n,s){return e[0]=t[0]+n[0]*s,e[1]=t[1]+n[1]*s,e[2]=t[2]+n[2]*s,e[3]=t[3]+n[3]*s,e}static LDU(e,t,n,s){return e[2]=s[2]/s[0],n[0]=s[0],n[1]=s[1],n[3]=s[3]-e[2]*n[1],[e,t,n]}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]}static equals(e,t){let n=e[0],s=e[1],r=e[2],i=e[3],a=t[0],c=t[1],d=t[2],l=t[3];return Math.abs(n-a)<=1e-6*Math.max(1,Math.abs(n),Math.abs(a))&&Math.abs(s-c)<=1e-6*Math.max(1,Math.abs(s),Math.abs(c))&&Math.abs(r-d)<=1e-6*Math.max(1,Math.abs(r),Math.abs(d))&&Math.abs(i-l)<=1e-6*Math.max(1,Math.abs(i),Math.abs(l))}static str(e){return`Mat2(${e.join(", ")})`}};G.prototype.mul=G.prototype.multiply;G.mul=G.multiply;G.sub=G.subtract;var Z=class h extends Float32Array{static#e=new Float32Array([1,0,0,1,0,0]);constructor(...e){switch(e.length){case 6:super(e);break;case 2:super(e[0],e[1],6);break;case 1:let t=e[0];t===void 0?super(h.#e):typeof t=="number"?super([t,t,t,t,t,t]):super(t,0,6);break;default:super(h.#e);break}}get str(){return h.str(this)}copy(e){return this.set(e),this}identity(){return this.set(h.#e),this}multiply(e){return h.multiply(this,this,e)}mul(e){return this}translate(e){return h.translate(this,this,e)}rotate(e){return h.rotate(this,this,e)}scale(e){return h.scale(this,this,e)}static get BYTE_LENGTH(){return 6*Float32Array.BYTES_PER_ELEMENT}static create(){return new h}static clone(e){return new h(e)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e}static fromValues(...e){return new h(...e)}static set(e,...t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e}static identity(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e[4]=0,e[5]=0,e}static invert(e,t){let n=t[0],s=t[1],r=t[2],i=t[3],a=t[4],c=t[5],d=n*i-s*r;return d?(d=1/d,e[0]=i*d,e[1]=-s*d,e[2]=-r*d,e[3]=n*d,e[4]=(r*c-i*a)*d,e[5]=(s*a-n*c)*d,e):null}static determinant(e){return e[0]*e[3]-e[1]*e[2]}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e[4]=t[4]+n[4],e[5]=t[5]+n[5],e}static subtract(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e[4]=t[4]-n[4],e[5]=t[5]-n[5],e}static sub(e,t,n){return e}static multiply(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=t[4],d=t[5],l=n[0],L=n[1],k=n[2],M=n[3],y=n[4],T=n[5];return e[0]=s*l+i*L,e[1]=r*l+a*L,e[2]=s*k+i*M,e[3]=r*k+a*M,e[4]=s*y+i*T+c,e[5]=r*y+a*T+d,e}static mul(e,t,n){return e}static translate(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=t[4],d=t[5],l=n[0],L=n[1];return e[0]=s,e[1]=r,e[2]=i,e[3]=a,e[4]=s*l+i*L+c,e[5]=r*l+a*L+d,e}static rotate(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=t[4],d=t[5],l=Math.sin(n),L=Math.cos(n);return e[0]=s*L+i*l,e[1]=r*L+a*l,e[2]=s*-l+i*L,e[3]=r*-l+a*L,e[4]=c,e[5]=d,e}static scale(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=t[4],d=t[5],l=n[0],L=n[1];return e[0]=s*l,e[1]=r*l,e[2]=i*L,e[3]=a*L,e[4]=c,e[5]=d,e}static fromTranslation(e,t){return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e[4]=t[0],e[5]=t[1],e}static fromRotation(e,t){let n=Math.sin(t),s=Math.cos(t);return e[0]=s,e[1]=n,e[2]=-n,e[3]=s,e[4]=0,e[5]=0,e}static fromScaling(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=t[1],e[4]=0,e[5]=0,e}static frob(e){return Math.sqrt(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]+e[3]*e[3]+e[4]*e[4]+e[5]*e[5]+1)}static multiplyScalar(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*n,e[5]=t[5]*n,e}static multiplyScalarAndAdd(e,t,n,s){return e[0]=t[0]+n[0]*s,e[1]=t[1]+n[1]*s,e[2]=t[2]+n[2]*s,e[3]=t[3]+n[3]*s,e[4]=t[4]+n[4]*s,e[5]=t[5]+n[5]*s,e}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]}static equals(e,t){let n=e[0],s=e[1],r=e[2],i=e[3],a=e[4],c=e[5],d=t[0],l=t[1],L=t[2],k=t[3],M=t[4],y=t[5];return Math.abs(n-d)<=1e-6*Math.max(1,Math.abs(n),Math.abs(d))&&Math.abs(s-l)<=1e-6*Math.max(1,Math.abs(s),Math.abs(l))&&Math.abs(r-L)<=1e-6*Math.max(1,Math.abs(r),Math.abs(L))&&Math.abs(i-k)<=1e-6*Math.max(1,Math.abs(i),Math.abs(k))&&Math.abs(a-M)<=1e-6*Math.max(1,Math.abs(a),Math.abs(M))&&Math.abs(c-y)<=1e-6*Math.max(1,Math.abs(c),Math.abs(y))}static str(e){return`Mat2d(${e.join(", ")})`}};Z.mul=Z.multiply;Z.sub=Z.subtract;var P=class h extends Float32Array{static#e=new Float32Array([1,0,0,0,1,0,0,0,1]);constructor(...e){switch(e.length){case 9:super(e);break;case 2:super(e[0],e[1],9);break;case 1:let t=e[0];t===void 0?super(h.#e):typeof t=="number"?super([t,t,t,t,t,t,t,t,t]):super(t,0,9);break;default:super(h.#e);break}}get str(){return h.str(this)}copy(e){return this.set(e),this}identity(){return this.set(h.#e),this}multiply(e){return h.multiply(this,this,e)}mul(e){return this}transpose(){return h.transpose(this,this)}invert(){return h.invert(this,this)}translate(e){return h.translate(this,this,e)}rotate(e){return h.rotate(this,this,e)}scale(e){return h.scale(this,this,e)}static get BYTE_LENGTH(){return 9*Float32Array.BYTES_PER_ELEMENT}static create(){return new h}static clone(e){return new h(e)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}static fromValues(...e){return new h(...e)}static set(e,...t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}static identity(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}static transpose(e,t){if(e===t){let n=t[1],s=t[2],r=t[5];e[1]=t[3],e[2]=t[6],e[3]=n,e[5]=t[7],e[6]=s,e[7]=r}else e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8];return e}static invert(e,t){let n=t[0],s=t[1],r=t[2],i=t[3],a=t[4],c=t[5],d=t[6],l=t[7],L=t[8],k=L*a-c*l,M=-L*i+c*d,y=l*i-a*d,T=n*k+s*M+r*y;return T?(T=1/T,e[0]=k*T,e[1]=(-L*s+r*l)*T,e[2]=(c*s-r*a)*T,e[3]=M*T,e[4]=(L*n-r*d)*T,e[5]=(-c*n+r*i)*T,e[6]=y*T,e[7]=(-l*n+s*d)*T,e[8]=(a*n-s*i)*T,e):null}static adjoint(e,t){let n=t[0],s=t[1],r=t[2],i=t[3],a=t[4],c=t[5],d=t[6],l=t[7],L=t[8];return e[0]=a*L-c*l,e[1]=r*l-s*L,e[2]=s*c-r*a,e[3]=c*d-i*L,e[4]=n*L-r*d,e[5]=r*i-n*c,e[6]=i*l-a*d,e[7]=s*d-n*l,e[8]=n*a-s*i,e}static determinant(e){let t=e[0],n=e[1],s=e[2],r=e[3],i=e[4],a=e[5],c=e[6],d=e[7],l=e[8];return t*(l*i-a*d)+n*(-l*r+a*c)+s*(d*r-i*c)}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e[4]=t[4]+n[4],e[5]=t[5]+n[5],e[6]=t[6]+n[6],e[7]=t[7]+n[7],e[8]=t[8]+n[8],e}static subtract(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e[4]=t[4]-n[4],e[5]=t[5]-n[5],e[6]=t[6]-n[6],e[7]=t[7]-n[7],e[8]=t[8]-n[8],e}static sub(e,t,n){return e}static multiply(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=t[4],d=t[5],l=t[6],L=t[7],k=t[8],M=n[0],y=n[1],T=n[2];return e[0]=M*s+y*a+T*l,e[1]=M*r+y*c+T*L,e[2]=M*i+y*d+T*k,M=n[3],y=n[4],T=n[5],e[3]=M*s+y*a+T*l,e[4]=M*r+y*c+T*L,e[5]=M*i+y*d+T*k,M=n[6],y=n[7],T=n[8],e[6]=M*s+y*a+T*l,e[7]=M*r+y*c+T*L,e[8]=M*i+y*d+T*k,e}static mul(e,t,n){return e}static translate(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=t[4],d=t[5],l=t[6],L=t[7],k=t[8],M=n[0],y=n[1];return e[0]=s,e[1]=r,e[2]=i,e[3]=a,e[4]=c,e[5]=d,e[6]=M*s+y*a+l,e[7]=M*r+y*c+L,e[8]=M*i+y*d+k,e}static rotate(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=t[4],d=t[5],l=t[6],L=t[7],k=t[8],M=Math.sin(n),y=Math.cos(n);return e[0]=y*s+M*a,e[1]=y*r+M*c,e[2]=y*i+M*d,e[3]=y*a-M*s,e[4]=y*c-M*r,e[5]=y*d-M*i,e[6]=l,e[7]=L,e[8]=k,e}static scale(e,t,n){let s=n[0],r=n[1];return e[0]=s*t[0],e[1]=s*t[1],e[2]=s*t[2],e[3]=r*t[3],e[4]=r*t[4],e[5]=r*t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}static fromTranslation(e,t){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=t[0],e[7]=t[1],e[8]=1,e}static fromRotation(e,t){let n=Math.sin(t),s=Math.cos(t);return e[0]=s,e[1]=n,e[2]=0,e[3]=-n,e[4]=s,e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}static fromScaling(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=0,e[4]=t[1],e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}static fromMat2d(e,t){return e[0]=t[0],e[1]=t[1],e[2]=0,e[3]=t[2],e[4]=t[3],e[5]=0,e[6]=t[4],e[7]=t[5],e[8]=1,e}static fromQuat(e,t){let n=t[0],s=t[1],r=t[2],i=t[3],a=n+n,c=s+s,d=r+r,l=n*a,L=s*a,k=s*c,M=r*a,y=r*c,T=r*d,m=i*a,o=i*c,R=i*d;return e[0]=1-k-T,e[3]=L-R,e[6]=M+o,e[1]=L+R,e[4]=1-l-T,e[7]=y-m,e[2]=M-o,e[5]=y+m,e[8]=1-l-k,e}static fromMat4(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[4],e[4]=t[5],e[5]=t[6],e[6]=t[8],e[7]=t[9],e[8]=t[10],e}static normalFromMat4(e,t){let n=t[0],s=t[1],r=t[2],i=t[4],a=t[5],c=t[6],d=t[8],l=t[9],L=t[10];return e[0]=a*L-c*l,e[1]=r*l-s*L,e[2]=s*c-r*a,e[3]=c*d-i*L,e[4]=n*L-r*d,e[5]=r*i-n*c,e[6]=i*l-a*d,e[7]=s*d-n*l,e[8]=n*a-s*i,e}static normalFromMat4Fast(e,t){return e}static projection(e,t,n){return e[0]=2/t,e[1]=0,e[2]=0,e[3]=0,e[4]=-2/n,e[5]=0,e[6]=-1,e[7]=1,e[8]=1,e}static frob(e){return Math.sqrt(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]+e[3]*e[3]+e[4]*e[4]+e[5]*e[5]+e[6]*e[6]+e[7]*e[7]+e[8]*e[8])}static multiplyScalar(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*n,e[5]=t[5]*n,e[6]=t[6]*n,e[7]=t[7]*n,e[8]=t[8]*n,e}static multiplyScalarAndAdd(e,t,n,s){return e[0]=t[0]+n[0]*s,e[1]=t[1]+n[1]*s,e[2]=t[2]+n[2]*s,e[3]=t[3]+n[3]*s,e[4]=t[4]+n[4]*s,e[5]=t[5]+n[5]*s,e[6]=t[6]+n[6]*s,e[7]=t[7]+n[7]*s,e[8]=t[8]+n[8]*s,e}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]&&e[8]===t[8]}static equals(e,t){let n=e[0],s=e[1],r=e[2],i=e[3],a=e[4],c=e[5],d=e[6],l=e[7],L=e[8],k=t[0],M=t[1],y=t[2],T=t[3],m=t[4],o=t[5],R=t[6],V=t[7],b=t[8];return Math.abs(n-k)<=1e-6*Math.max(1,Math.abs(n),Math.abs(k))&&Math.abs(s-M)<=1e-6*Math.max(1,Math.abs(s),Math.abs(M))&&Math.abs(r-y)<=1e-6*Math.max(1,Math.abs(r),Math.abs(y))&&Math.abs(i-T)<=1e-6*Math.max(1,Math.abs(i),Math.abs(T))&&Math.abs(a-m)<=1e-6*Math.max(1,Math.abs(a),Math.abs(m))&&Math.abs(c-o)<=1e-6*Math.max(1,Math.abs(c),Math.abs(o))&&Math.abs(d-R)<=1e-6*Math.max(1,Math.abs(d),Math.abs(R))&&Math.abs(l-V)<=1e-6*Math.max(1,Math.abs(l),Math.abs(V))&&Math.abs(L-b)<=1e-6*Math.max(1,Math.abs(L),Math.abs(b))}static str(e){return`Mat3(${e.join(", ")})`}};P.prototype.mul=P.prototype.multiply;P.mul=P.multiply;P.sub=P.subtract;P.normalFromMat4Fast=P.normalFromMat4;var N=class h extends Float32Array{static#e=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);static#t=new Float32Array(3);constructor(...e){switch(e.length){case 16:super(e);break;case 2:super(e[0],e[1],16);break;case 1:let t=e[0];t===void 0?super(h.#e):typeof t=="number"?super([t,t,t,t,t,t,t,t,t,t,t,t,t,t,t,t]):super(t,0,16);break;default:super(h.#e);break}}get str(){return h.str(this)}copy(e){return this.set(e),this}identity(){return this.set(h.#e),this}multiply(e){return h.multiply(this,this,e)}mul(e){return this}transpose(){return h.transpose(this,this)}invert(){return h.invert(this,this)}translate(e){return h.translate(this,this,e)}rotate(e,t){return h.rotate(this,this,e,t)}scale(e){return h.scale(this,this,e)}rotateX(e){return h.rotateX(this,this,e)}rotateY(e){return h.rotateY(this,this,e)}rotateZ(e){return h.rotateZ(this,this,e)}perspectiveNO(e,t,n,s){return h.perspectiveNO(this,e,t,n,s)}perspectiveZO(e,t,n,s){return h.perspectiveZO(this,e,t,n,s)}orthoNO(e,t,n,s,r,i){return h.orthoNO(this,e,t,n,s,r,i)}orthoZO(e,t,n,s,r,i){return h.orthoZO(this,e,t,n,s,r,i)}static get BYTE_LENGTH(){return 16*Float32Array.BYTES_PER_ELEMENT}static create(){return new h}static clone(e){return new h(e)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}static fromValues(...e){return new h(...e)}static set(e,...t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}static identity(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static transpose(e,t){if(e===t){let n=t[1],s=t[2],r=t[3],i=t[6],a=t[7],c=t[11];e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=n,e[6]=t[9],e[7]=t[13],e[8]=s,e[9]=i,e[11]=t[14],e[12]=r,e[13]=a,e[14]=c}else e[0]=t[0],e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=t[1],e[5]=t[5],e[6]=t[9],e[7]=t[13],e[8]=t[2],e[9]=t[6],e[10]=t[10],e[11]=t[14],e[12]=t[3],e[13]=t[7],e[14]=t[11],e[15]=t[15];return e}static invert(e,t){let n=t[0],s=t[1],r=t[2],i=t[3],a=t[4],c=t[5],d=t[6],l=t[7],L=t[8],k=t[9],M=t[10],y=t[11],T=t[12],m=t[13],o=t[14],R=t[15],V=n*c-s*a,b=n*d-r*a,x=n*l-i*a,p=s*d-r*c,f=s*l-i*c,F=r*l-i*d,E=L*m-k*T,B=L*o-M*T,Q=L*R-y*T,I=k*o-M*m,S=k*R-y*m,Y=M*R-y*o,D=V*Y-b*S+x*I+p*Q-f*B+F*E;return D?(D=1/D,e[0]=(c*Y-d*S+l*I)*D,e[1]=(r*S-s*Y-i*I)*D,e[2]=(m*F-o*f+R*p)*D,e[3]=(M*f-k*F-y*p)*D,e[4]=(d*Q-a*Y-l*B)*D,e[5]=(n*Y-r*Q+i*B)*D,e[6]=(o*x-T*F-R*b)*D,e[7]=(L*F-M*x+y*b)*D,e[8]=(a*S-c*Q+l*E)*D,e[9]=(s*Q-n*S-i*E)*D,e[10]=(T*f-m*x+R*V)*D,e[11]=(k*x-L*f-y*V)*D,e[12]=(c*B-a*I-d*E)*D,e[13]=(n*I-s*B+r*E)*D,e[14]=(m*b-T*p-o*V)*D,e[15]=(L*p-k*b+M*V)*D,e):null}static adjoint(e,t){let n=t[0],s=t[1],r=t[2],i=t[3],a=t[4],c=t[5],d=t[6],l=t[7],L=t[8],k=t[9],M=t[10],y=t[11],T=t[12],m=t[13],o=t[14],R=t[15],V=n*c-s*a,b=n*d-r*a,x=n*l-i*a,p=s*d-r*c,f=s*l-i*c,F=r*l-i*d,E=L*m-k*T,B=L*o-M*T,Q=L*R-y*T,I=k*o-M*m,S=k*R-y*m,Y=M*R-y*o;return e[0]=c*Y-d*S+l*I,e[1]=r*S-s*Y-i*I,e[2]=m*F-o*f+R*p,e[3]=M*f-k*F-y*p,e[4]=d*Q-a*Y-l*B,e[5]=n*Y-r*Q+i*B,e[6]=o*x-T*F-R*b,e[7]=L*F-M*x+y*b,e[8]=a*S-c*Q+l*E,e[9]=s*Q-n*S-i*E,e[10]=T*f-m*x+R*V,e[11]=k*x-L*f-y*V,e[12]=c*B-a*I-d*E,e[13]=n*I-s*B+r*E,e[14]=m*b-T*p-o*V,e[15]=L*p-k*b+M*V,e}static determinant(e){let t=e[0],n=e[1],s=e[2],r=e[3],i=e[4],a=e[5],c=e[6],d=e[7],l=e[8],L=e[9],k=e[10],M=e[11],y=e[12],T=e[13],m=e[14],o=e[15],R=t*a-n*i,V=t*c-s*i,b=n*c-s*a,x=l*T-L*y,p=l*m-k*y,f=L*m-k*T,F=t*f-n*p+s*x,E=i*f-a*p+c*x,B=l*b-L*V+k*R,Q=y*b-T*V+m*R;return d*F-r*E+o*B-M*Q}static multiply(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=t[4],d=t[5],l=t[6],L=t[7],k=t[8],M=t[9],y=t[10],T=t[11],m=t[12],o=t[13],R=t[14],V=t[15],b=n[0],x=n[1],p=n[2],f=n[3];return e[0]=b*s+x*c+p*k+f*m,e[1]=b*r+x*d+p*M+f*o,e[2]=b*i+x*l+p*y+f*R,e[3]=b*a+x*L+p*T+f*V,b=n[4],x=n[5],p=n[6],f=n[7],e[4]=b*s+x*c+p*k+f*m,e[5]=b*r+x*d+p*M+f*o,e[6]=b*i+x*l+p*y+f*R,e[7]=b*a+x*L+p*T+f*V,b=n[8],x=n[9],p=n[10],f=n[11],e[8]=b*s+x*c+p*k+f*m,e[9]=b*r+x*d+p*M+f*o,e[10]=b*i+x*l+p*y+f*R,e[11]=b*a+x*L+p*T+f*V,b=n[12],x=n[13],p=n[14],f=n[15],e[12]=b*s+x*c+p*k+f*m,e[13]=b*r+x*d+p*M+f*o,e[14]=b*i+x*l+p*y+f*R,e[15]=b*a+x*L+p*T+f*V,e}static mul(e,t,n){return e}static translate(e,t,n){let s=n[0],r=n[1],i=n[2];if(t===e)e[12]=t[0]*s+t[4]*r+t[8]*i+t[12],e[13]=t[1]*s+t[5]*r+t[9]*i+t[13],e[14]=t[2]*s+t[6]*r+t[10]*i+t[14],e[15]=t[3]*s+t[7]*r+t[11]*i+t[15];else{let a=t[0],c=t[1],d=t[2],l=t[3],L=t[4],k=t[5],M=t[6],y=t[7],T=t[8],m=t[9],o=t[10],R=t[11];e[0]=a,e[1]=c,e[2]=d,e[3]=l,e[4]=L,e[5]=k,e[6]=M,e[7]=y,e[8]=T,e[9]=m,e[10]=o,e[11]=R,e[12]=a*s+L*r+T*i+t[12],e[13]=c*s+k*r+m*i+t[13],e[14]=d*s+M*r+o*i+t[14],e[15]=l*s+y*r+R*i+t[15]}return e}static scale(e,t,n){let s=n[0],r=n[1],i=n[2];return e[0]=t[0]*s,e[1]=t[1]*s,e[2]=t[2]*s,e[3]=t[3]*s,e[4]=t[4]*r,e[5]=t[5]*r,e[6]=t[6]*r,e[7]=t[7]*r,e[8]=t[8]*i,e[9]=t[9]*i,e[10]=t[10]*i,e[11]=t[11]*i,e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}static rotate(e,t,n,s){let r=s[0],i=s[1],a=s[2],c=Math.sqrt(r*r+i*i+a*a);if(c<1e-6)return null;c=1/c,r*=c,i*=c,a*=c;let d=Math.sin(n),l=Math.cos(n),L=1-l,k=t[0],M=t[1],y=t[2],T=t[3],m=t[4],o=t[5],R=t[6],V=t[7],b=t[8],x=t[9],p=t[10],f=t[11],F=r*r*L+l,E=i*r*L+a*d,B=a*r*L-i*d,Q=r*i*L-a*d,I=i*i*L+l,S=a*i*L+r*d,Y=r*a*L+i*d,D=i*a*L-r*d,j=a*a*L+l;return e[0]=k*F+m*E+b*B,e[1]=M*F+o*E+x*B,e[2]=y*F+R*E+p*B,e[3]=T*F+V*E+f*B,e[4]=k*Q+m*I+b*S,e[5]=M*Q+o*I+x*S,e[6]=y*Q+R*I+p*S,e[7]=T*Q+V*I+f*S,e[8]=k*Y+m*D+b*j,e[9]=M*Y+o*D+x*j,e[10]=y*Y+R*D+p*j,e[11]=T*Y+V*D+f*j,t!==e&&(e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e}static rotateX(e,t,n){let s=Math.sin(n),r=Math.cos(n),i=t[4],a=t[5],c=t[6],d=t[7],l=t[8],L=t[9],k=t[10],M=t[11];return t!==e&&(e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[4]=i*r+l*s,e[5]=a*r+L*s,e[6]=c*r+k*s,e[7]=d*r+M*s,e[8]=l*r-i*s,e[9]=L*r-a*s,e[10]=k*r-c*s,e[11]=M*r-d*s,e}static rotateY(e,t,n){let s=Math.sin(n),r=Math.cos(n),i=t[0],a=t[1],c=t[2],d=t[3],l=t[8],L=t[9],k=t[10],M=t[11];return t!==e&&(e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[0]=i*r-l*s,e[1]=a*r-L*s,e[2]=c*r-k*s,e[3]=d*r-M*s,e[8]=i*s+l*r,e[9]=a*s+L*r,e[10]=c*s+k*r,e[11]=d*s+M*r,e}static rotateZ(e,t,n){let s=Math.sin(n),r=Math.cos(n),i=t[0],a=t[1],c=t[2],d=t[3],l=t[4],L=t[5],k=t[6],M=t[7];return t!==e&&(e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[0]=i*r+l*s,e[1]=a*r+L*s,e[2]=c*r+k*s,e[3]=d*r+M*s,e[4]=l*r-i*s,e[5]=L*r-a*s,e[6]=k*r-c*s,e[7]=M*r-d*s,e}static fromTranslation(e,t){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=t[0],e[13]=t[1],e[14]=t[2],e[15]=1,e}static fromScaling(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=t[1],e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=t[2],e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static fromRotation(e,t,n){let s=n[0],r=n[1],i=n[2],a=Math.sqrt(s*s+r*r+i*i);if(a<1e-6)return null;a=1/a,s*=a,r*=a,i*=a;let c=Math.sin(t),d=Math.cos(t),l=1-d;return e[0]=s*s*l+d,e[1]=r*s*l+i*c,e[2]=i*s*l-r*c,e[3]=0,e[4]=s*r*l-i*c,e[5]=r*r*l+d,e[6]=i*r*l+s*c,e[7]=0,e[8]=s*i*l+r*c,e[9]=r*i*l-s*c,e[10]=i*i*l+d,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static fromXRotation(e,t){let n=Math.sin(t),s=Math.cos(t);return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=s,e[6]=n,e[7]=0,e[8]=0,e[9]=-n,e[10]=s,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static fromYRotation(e,t){let n=Math.sin(t),s=Math.cos(t);return e[0]=s,e[1]=0,e[2]=-n,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=n,e[9]=0,e[10]=s,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static fromZRotation(e,t){let n=Math.sin(t),s=Math.cos(t);return e[0]=s,e[1]=n,e[2]=0,e[3]=0,e[4]=-n,e[5]=s,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static fromRotationTranslation(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=s+s,d=r+r,l=i+i,L=s*c,k=s*d,M=s*l,y=r*d,T=r*l,m=i*l,o=a*c,R=a*d,V=a*l;return e[0]=1-(y+m),e[1]=k+V,e[2]=M-R,e[3]=0,e[4]=k-V,e[5]=1-(L+m),e[6]=T+o,e[7]=0,e[8]=M+R,e[9]=T-o,e[10]=1-(L+y),e[11]=0,e[12]=n[0],e[13]=n[1],e[14]=n[2],e[15]=1,e}static fromQuat2(e,t){let n=-t[0],s=-t[1],r=-t[2],i=t[3],a=t[4],c=t[5],d=t[6],l=t[7],L=n*n+s*s+r*r+i*i;return L>0?(h.#t[0]=(a*i+l*n+c*r-d*s)*2/L,h.#t[1]=(c*i+l*s+d*n-a*r)*2/L,h.#t[2]=(d*i+l*r+a*s-c*n)*2/L):(h.#t[0]=(a*i+l*n+c*r-d*s)*2,h.#t[1]=(c*i+l*s+d*n-a*r)*2,h.#t[2]=(d*i+l*r+a*s-c*n)*2),h.fromRotationTranslation(e,t,h.#t),e}static normalFromMat4(e,t){let n=t[0],s=t[1],r=t[2],i=t[4],a=t[5],c=t[6],d=t[8],l=t[9],L=t[10];return e[0]=a*L-c*l,e[1]=r*l-s*L,e[2]=s*c-r*a,e[3]=0,e[4]=c*d-i*L,e[5]=n*L-r*d,e[6]=r*i-n*c,e[7]=0,e[8]=i*l-a*d,e[9]=s*d-n*l,e[10]=n*a-s*i,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static normalFromMat4Fast(e,t){return e}static getTranslation(e,t){return e[0]=t[12],e[1]=t[13],e[2]=t[14],e}static getScaling(e,t){let n=t[0],s=t[1],r=t[2],i=t[4],a=t[5],c=t[6],d=t[8],l=t[9],L=t[10];return e[0]=Math.sqrt(n*n+s*s+r*r),e[1]=Math.sqrt(i*i+a*a+c*c),e[2]=Math.sqrt(d*d+l*l+L*L),e}static getRotation(e,t){h.getScaling(h.#t,t);let n=1/h.#t[0],s=1/h.#t[1],r=1/h.#t[2],i=t[0]*n,a=t[1]*s,c=t[2]*r,d=t[4]*n,l=t[5]*s,L=t[6]*r,k=t[8]*n,M=t[9]*s,y=t[10]*r,T=i+l+y,m=0;return T>0?(m=Math.sqrt(T+1)*2,e[3]=.25*m,e[0]=(L-M)/m,e[1]=(k-c)/m,e[2]=(a-d)/m):i>l&&i>y?(m=Math.sqrt(1+i-l-y)*2,e[3]=(L-M)/m,e[0]=.25*m,e[1]=(a+d)/m,e[2]=(k+c)/m):l>y?(m=Math.sqrt(1+l-i-y)*2,e[3]=(k-c)/m,e[0]=(a+d)/m,e[1]=.25*m,e[2]=(L+M)/m):(m=Math.sqrt(1+y-i-l)*2,e[3]=(a-d)/m,e[0]=(k+c)/m,e[1]=(L+M)/m,e[2]=.25*m),e}static decompose(e,t,n,s){t[0]=s[12],t[1]=s[13],t[2]=s[14];let r=s[0],i=s[1],a=s[2],c=s[4],d=s[5],l=s[6],L=s[8],k=s[9],M=s[10];n[0]=Math.sqrt(r*r+i*i+a*a),n[1]=Math.sqrt(c*c+d*d+l*l),n[2]=Math.sqrt(L*L+k*k+M*M);let y=1/n[0],T=1/n[1],m=1/n[2],o=r*y,R=i*T,V=a*m,b=c*y,x=d*T,p=l*m,f=L*y,F=k*T,E=M*m,B=o+x+E,Q=0;return B>0?(Q=Math.sqrt(B+1)*2,e[3]=.25*Q,e[0]=(p-F)/Q,e[1]=(f-V)/Q,e[2]=(R-b)/Q):o>x&&o>E?(Q=Math.sqrt(1+o-x-E)*2,e[3]=(p-F)/Q,e[0]=.25*Q,e[1]=(R+b)/Q,e[2]=(f+V)/Q):x>E?(Q=Math.sqrt(1+x-o-E)*2,e[3]=(f-V)/Q,e[0]=(R+b)/Q,e[1]=.25*Q,e[2]=(p+F)/Q):(Q=Math.sqrt(1+E-o-x)*2,e[3]=(R-b)/Q,e[0]=(f+V)/Q,e[1]=(p+F)/Q,e[2]=.25*Q),e}static fromRotationTranslationScale(e,t,n,s){let r=t[0],i=t[1],a=t[2],c=t[3],d=r+r,l=i+i,L=a+a,k=r*d,M=r*l,y=r*L,T=i*l,m=i*L,o=a*L,R=c*d,V=c*l,b=c*L,x=s[0],p=s[1],f=s[2];return e[0]=(1-(T+o))*x,e[1]=(M+b)*x,e[2]=(y-V)*x,e[3]=0,e[4]=(M-b)*p,e[5]=(1-(k+o))*p,e[6]=(m+R)*p,e[7]=0,e[8]=(y+V)*f,e[9]=(m-R)*f,e[10]=(1-(k+T))*f,e[11]=0,e[12]=n[0],e[13]=n[1],e[14]=n[2],e[15]=1,e}static fromRotationTranslationScaleOrigin(e,t,n,s,r){let i=t[0],a=t[1],c=t[2],d=t[3],l=i+i,L=a+a,k=c+c,M=i*l,y=i*L,T=i*k,m=a*L,o=a*k,R=c*k,V=d*l,b=d*L,x=d*k,p=s[0],f=s[1],F=s[2],E=r[0],B=r[1],Q=r[2],I=(1-(m+R))*p,S=(y+x)*p,Y=(T-b)*p,D=(y-x)*f,j=(1-(M+R))*f,X=(o+V)*f,$=(T+b)*F,U=(o-V)*F,W=(1-(M+m))*F;return e[0]=I,e[1]=S,e[2]=Y,e[3]=0,e[4]=D,e[5]=j,e[6]=X,e[7]=0,e[8]=$,e[9]=U,e[10]=W,e[11]=0,e[12]=n[0]+E-(I*E+D*B+$*Q),e[13]=n[1]+B-(S*E+j*B+U*Q),e[14]=n[2]+Q-(Y*E+X*B+W*Q),e[15]=1,e}static fromQuat(e,t){let n=t[0],s=t[1],r=t[2],i=t[3],a=n+n,c=s+s,d=r+r,l=n*a,L=s*a,k=s*c,M=r*a,y=r*c,T=r*d,m=i*a,o=i*c,R=i*d;return e[0]=1-k-T,e[1]=L+R,e[2]=M-o,e[3]=0,e[4]=L-R,e[5]=1-l-T,e[6]=y+m,e[7]=0,e[8]=M+o,e[9]=y-m,e[10]=1-l-k,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}static frustumNO(e,t,n,s,r,i,a=1/0){let c=1/(n-t),d=1/(r-s);if(e[0]=i*2*c,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=i*2*d,e[6]=0,e[7]=0,e[8]=(n+t)*c,e[9]=(r+s)*d,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,a!=null&&a!==1/0){let l=1/(i-a);e[10]=(a+i)*l,e[14]=2*a*i*l}else e[10]=-1,e[14]=-2*i;return e}static frustum(e,t,n,s,r,i,a=1/0){return e}static frustumZO(e,t,n,s,r,i,a=1/0){let c=1/(n-t),d=1/(r-s);if(e[0]=i*2*c,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=i*2*d,e[6]=0,e[7]=0,e[8]=(n+t)*c,e[9]=(r+s)*d,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,a!=null&&a!==1/0){let l=1/(i-a);e[10]=a*l,e[14]=a*i*l}else e[10]=-1,e[14]=-i;return e}static perspectiveNO(e,t,n,s,r=1/0){let i=1/Math.tan(t/2);if(e[0]=i/n,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=i,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,r!=null&&r!==1/0){let a=1/(s-r);e[10]=(r+s)*a,e[14]=2*r*s*a}else e[10]=-1,e[14]=-2*s;return e}static perspective(e,t,n,s,r=1/0){return e}static perspectiveZO(e,t,n,s,r=1/0){let i=1/Math.tan(t/2);if(e[0]=i/n,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=i,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,r!=null&&r!==1/0){let a=1/(s-r);e[10]=r*a,e[14]=r*s*a}else e[10]=-1,e[14]=-s;return e}static perspectiveFromFieldOfView(e,t,n,s){let r=Math.tan(t.upDegrees*Math.PI/180),i=Math.tan(t.downDegrees*Math.PI/180),a=Math.tan(t.leftDegrees*Math.PI/180),c=Math.tan(t.rightDegrees*Math.PI/180),d=2/(a+c),l=2/(r+i);return e[0]=d,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=l,e[6]=0,e[7]=0,e[8]=-((a-c)*d*.5),e[9]=(r-i)*l*.5,e[10]=s/(n-s),e[11]=-1,e[12]=0,e[13]=0,e[14]=s*n/(n-s),e[15]=0,e}static orthoNO(e,t,n,s,r,i,a){let c=1/(t-n),d=1/(s-r),l=1/(i-a);return e[0]=-2*c,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=-2*d,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=2*l,e[11]=0,e[12]=(t+n)*c,e[13]=(r+s)*d,e[14]=(a+i)*l,e[15]=1,e}static ortho(e,t,n,s,r,i,a){return e}static orthoZO(e,t,n,s,r,i,a){let c=1/(t-n),d=1/(s-r),l=1/(i-a);return e[0]=-2*c,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=-2*d,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=l,e[11]=0,e[12]=(t+n)*c,e[13]=(r+s)*d,e[14]=i*l,e[15]=1,e}static lookAt(e,t,n,s){let r=t[0],i=t[1],a=t[2],c=s[0],d=s[1],l=s[2],L=n[0],k=n[1],M=n[2];if(Math.abs(r-L)<1e-6&&Math.abs(i-k)<1e-6&&Math.abs(a-M)<1e-6)return h.identity(e);let y=r-L,T=i-k,m=a-M,o=1/Math.sqrt(y*y+T*T+m*m);y*=o,T*=o,m*=o;let R=d*m-l*T,V=l*y-c*m,b=c*T-d*y;o=Math.sqrt(R*R+V*V+b*b),o?(o=1/o,R*=o,V*=o,b*=o):(R=0,V=0,b=0);let x=T*b-m*V,p=m*R-y*b,f=y*V-T*R;return o=Math.sqrt(x*x+p*p+f*f),o?(o=1/o,x*=o,p*=o,f*=o):(x=0,p=0,f=0),e[0]=R,e[1]=x,e[2]=y,e[3]=0,e[4]=V,e[5]=p,e[6]=T,e[7]=0,e[8]=b,e[9]=f,e[10]=m,e[11]=0,e[12]=-(R*r+V*i+b*a),e[13]=-(x*r+p*i+f*a),e[14]=-(y*r+T*i+m*a),e[15]=1,e}static targetTo(e,t,n,s){let r=t[0],i=t[1],a=t[2],c=s[0],d=s[1],l=s[2],L=r-n[0],k=i-n[1],M=a-n[2],y=L*L+k*k+M*M;y>0&&(y=1/Math.sqrt(y),L*=y,k*=y,M*=y);let T=d*M-l*k,m=l*L-c*M,o=c*k-d*L;return y=T*T+m*m+o*o,y>0&&(y=1/Math.sqrt(y),T*=y,m*=y,o*=y),e[0]=T,e[1]=m,e[2]=o,e[3]=0,e[4]=k*o-M*m,e[5]=M*T-L*o,e[6]=L*m-k*T,e[7]=0,e[8]=L,e[9]=k,e[10]=M,e[11]=0,e[12]=r,e[13]=i,e[14]=a,e[15]=1,e}static frob(e){return Math.sqrt(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]+e[3]*e[3]+e[4]*e[4]+e[5]*e[5]+e[6]*e[6]+e[7]*e[7]+e[8]*e[8]+e[9]*e[9]+e[10]*e[10]+e[11]*e[11]+e[12]*e[12]+e[13]*e[13]+e[14]*e[14]+e[15]*e[15])}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e[4]=t[4]+n[4],e[5]=t[5]+n[5],e[6]=t[6]+n[6],e[7]=t[7]+n[7],e[8]=t[8]+n[8],e[9]=t[9]+n[9],e[10]=t[10]+n[10],e[11]=t[11]+n[11],e[12]=t[12]+n[12],e[13]=t[13]+n[13],e[14]=t[14]+n[14],e[15]=t[15]+n[15],e}static subtract(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e[4]=t[4]-n[4],e[5]=t[5]-n[5],e[6]=t[6]-n[6],e[7]=t[7]-n[7],e[8]=t[8]-n[8],e[9]=t[9]-n[9],e[10]=t[10]-n[10],e[11]=t[11]-n[11],e[12]=t[12]-n[12],e[13]=t[13]-n[13],e[14]=t[14]-n[14],e[15]=t[15]-n[15],e}static sub(e,t,n){return e}static multiplyScalar(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*n,e[5]=t[5]*n,e[6]=t[6]*n,e[7]=t[7]*n,e[8]=t[8]*n,e[9]=t[9]*n,e[10]=t[10]*n,e[11]=t[11]*n,e[12]=t[12]*n,e[13]=t[13]*n,e[14]=t[14]*n,e[15]=t[15]*n,e}static multiplyScalarAndAdd(e,t,n,s){return e[0]=t[0]+n[0]*s,e[1]=t[1]+n[1]*s,e[2]=t[2]+n[2]*s,e[3]=t[3]+n[3]*s,e[4]=t[4]+n[4]*s,e[5]=t[5]+n[5]*s,e[6]=t[6]+n[6]*s,e[7]=t[7]+n[7]*s,e[8]=t[8]+n[8]*s,e[9]=t[9]+n[9]*s,e[10]=t[10]+n[10]*s,e[11]=t[11]+n[11]*s,e[12]=t[12]+n[12]*s,e[13]=t[13]+n[13]*s,e[14]=t[14]+n[14]*s,e[15]=t[15]+n[15]*s,e}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]&&e[8]===t[8]&&e[9]===t[9]&&e[10]===t[10]&&e[11]===t[11]&&e[12]===t[12]&&e[13]===t[13]&&e[14]===t[14]&&e[15]===t[15]}static equals(e,t){let n=e[0],s=e[1],r=e[2],i=e[3],a=e[4],c=e[5],d=e[6],l=e[7],L=e[8],k=e[9],M=e[10],y=e[11],T=e[12],m=e[13],o=e[14],R=e[15],V=t[0],b=t[1],x=t[2],p=t[3],f=t[4],F=t[5],E=t[6],B=t[7],Q=t[8],I=t[9],S=t[10],Y=t[11],D=t[12],j=t[13],X=t[14],$=t[15];return Math.abs(n-V)<=1e-6*Math.max(1,Math.abs(n),Math.abs(V))&&Math.abs(s-b)<=1e-6*Math.max(1,Math.abs(s),Math.abs(b))&&Math.abs(r-x)<=1e-6*Math.max(1,Math.abs(r),Math.abs(x))&&Math.abs(i-p)<=1e-6*Math.max(1,Math.abs(i),Math.abs(p))&&Math.abs(a-f)<=1e-6*Math.max(1,Math.abs(a),Math.abs(f))&&Math.abs(c-F)<=1e-6*Math.max(1,Math.abs(c),Math.abs(F))&&Math.abs(d-E)<=1e-6*Math.max(1,Math.abs(d),Math.abs(E))&&Math.abs(l-B)<=1e-6*Math.max(1,Math.abs(l),Math.abs(B))&&Math.abs(L-Q)<=1e-6*Math.max(1,Math.abs(L),Math.abs(Q))&&Math.abs(k-I)<=1e-6*Math.max(1,Math.abs(k),Math.abs(I))&&Math.abs(M-S)<=1e-6*Math.max(1,Math.abs(M),Math.abs(S))&&Math.abs(y-Y)<=1e-6*Math.max(1,Math.abs(y),Math.abs(Y))&&Math.abs(T-D)<=1e-6*Math.max(1,Math.abs(T),Math.abs(D))&&Math.abs(m-j)<=1e-6*Math.max(1,Math.abs(m),Math.abs(j))&&Math.abs(o-X)<=1e-6*Math.max(1,Math.abs(o),Math.abs(X))&&Math.abs(R-$)<=1e-6*Math.max(1,Math.abs(R),Math.abs($))}static str(e){return`Mat4(${e.join(", ")})`}};N.prototype.mul=N.prototype.multiply;N.sub=N.subtract;N.mul=N.multiply;N.frustum=N.frustumNO;N.perspective=N.perspectiveNO;N.ortho=N.orthoNO;N.normalFromMat4Fast=N.normalFromMat4;var w=class h extends Float32Array{constructor(...e){switch(e.length){case 3:super(e);break;case 2:super(e[0],e[1],3);break;case 1:{let t=e[0];t===void 0?super(3):typeof t=="number"?super([t,t,t]):super(t,0,3);break}default:super(3);break}}get x(){return this[0]}set x(e){this[0]=e}get y(){return this[1]}set y(e){this[1]=e}get z(){return this[2]}set z(e){this[2]=e}get r(){return this[0]}set r(e){this[0]=e}get g(){return this[1]}set g(e){this[1]=e}get b(){return this[2]}set b(e){this[2]=e}get magnitude(){let e=this[0],t=this[1],n=this[2];return Math.sqrt(e*e+t*t+n*n)}get mag(){return this.magnitude}get squaredMagnitude(){let e=this[0],t=this[1],n=this[2];return e*e+t*t+n*n}get sqrMag(){return this.squaredMagnitude}get str(){return h.str(this)}copy(e){return this.set(e),this}add(e){return this[0]+=e[0],this[1]+=e[1],this[2]+=e[2],this}subtract(e){return this[0]-=e[0],this[1]-=e[1],this[2]-=e[2],this}sub(e){return this}multiply(e){return this[0]*=e[0],this[1]*=e[1],this[2]*=e[2],this}mul(e){return this}divide(e){return this[0]/=e[0],this[1]/=e[1],this[2]/=e[2],this}div(e){return this}scale(e){return this[0]*=e,this[1]*=e,this[2]*=e,this}scaleAndAdd(e,t){return this[0]+=e[0]*t,this[1]+=e[1]*t,this[2]+=e[2]*t,this}distance(e){return h.distance(this,e)}dist(e){return 0}squaredDistance(e){return h.squaredDistance(this,e)}sqrDist(e){return 0}negate(){return this[0]*=-1,this[1]*=-1,this[2]*=-1,this}invert(){return this[0]=1/this[0],this[1]=1/this[1],this[2]=1/this[2],this}abs(){return this[0]=Math.abs(this[0]),this[1]=Math.abs(this[1]),this[2]=Math.abs(this[2]),this}dot(e){return this[0]*e[0]+this[1]*e[1]+this[2]*e[2]}normalize(){return h.normalize(this,this)}static get BYTE_LENGTH(){return 3*Float32Array.BYTES_PER_ELEMENT}static create(){return new h}static clone(e){return new h(e)}static magnitude(e){let t=e[0],n=e[1],s=e[2];return Math.sqrt(t*t+n*n+s*s)}static mag(e){return 0}static length(e){return 0}static len(e){return 0}static fromValues(e,t,n){return new h(e,t,n)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e}static set(e,t,n,s){return e[0]=t,e[1]=n,e[2]=s,e}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e}static subtract(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e}static sub(e,t,n){return e}static multiply(e,t,n){return e[0]=t[0]*n[0],e[1]=t[1]*n[1],e[2]=t[2]*n[2],e}static mul(e,t,n){return e}static divide(e,t,n){return e[0]=t[0]/n[0],e[1]=t[1]/n[1],e[2]=t[2]/n[2],e}static div(e,t,n){return e}static ceil(e,t){return e[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e[2]=Math.ceil(t[2]),e}static floor(e,t){return e[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e[2]=Math.floor(t[2]),e}static min(e,t,n){return e[0]=Math.min(t[0],n[0]),e[1]=Math.min(t[1],n[1]),e[2]=Math.min(t[2],n[2]),e}static max(e,t,n){return e[0]=Math.max(t[0],n[0]),e[1]=Math.max(t[1],n[1]),e[2]=Math.max(t[2],n[2]),e}static scale(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e}static scaleAndAdd(e,t,n,s){return e[0]=t[0]+n[0]*s,e[1]=t[1]+n[1]*s,e[2]=t[2]+n[2]*s,e}static distance(e,t){let n=t[0]-e[0],s=t[1]-e[1],r=t[2]-e[2];return Math.sqrt(n*n+s*s+r*r)}static dist(e,t){return 0}static squaredDistance(e,t){let n=t[0]-e[0],s=t[1]-e[1],r=t[2]-e[2];return n*n+s*s+r*r}static sqrDist(e,t){return 0}static squaredLength(e){let t=e[0],n=e[1],s=e[2];return t*t+n*n+s*s}static sqrLen(e,t){return 0}static negate(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e}static inverse(e,t){return e[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e}static abs(e,t){return e[0]=Math.abs(t[0]),e[1]=Math.abs(t[1]),e[2]=Math.abs(t[2]),e}static normalize(e,t){let n=t[0],s=t[1],r=t[2],i=n*n+s*s+r*r;return i>0&&(i=1/Math.sqrt(i)),e[0]=t[0]*i,e[1]=t[1]*i,e[2]=t[2]*i,e}static dot(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}static cross(e,t,n){let s=t[0],r=t[1],i=t[2],a=n[0],c=n[1],d=n[2];return e[0]=r*d-i*c,e[1]=i*a-s*d,e[2]=s*c-r*a,e}static lerp(e,t,n,s){let r=t[0],i=t[1],a=t[2];return e[0]=r+s*(n[0]-r),e[1]=i+s*(n[1]-i),e[2]=a+s*(n[2]-a),e}static slerp(e,t,n,s){let r=Math.acos(Math.min(Math.max(h.dot(t,n),-1),1)),i=Math.sin(r),a=Math.sin((1-s)*r)/i,c=Math.sin(s*r)/i;return e[0]=a*t[0]+c*n[0],e[1]=a*t[1]+c*n[1],e[2]=a*t[2]+c*n[2],e}static hermite(e,t,n,s,r,i){let a=i*i,c=a*(2*i-3)+1,d=a*(i-2)+i,l=a*(i-1),L=a*(3-2*i);return e[0]=t[0]*c+n[0]*d+s[0]*l+r[0]*L,e[1]=t[1]*c+n[1]*d+s[1]*l+r[1]*L,e[2]=t[2]*c+n[2]*d+s[2]*l+r[2]*L,e}static bezier(e,t,n,s,r,i){let a=1-i,c=a*a,d=i*i,l=c*a,L=3*i*c,k=3*d*a,M=d*i;return e[0]=t[0]*l+n[0]*L+s[0]*k+r[0]*M,e[1]=t[1]*l+n[1]*L+s[1]*k+r[1]*M,e[2]=t[2]*l+n[2]*L+s[2]*k+r[2]*M,e}static transformMat4(e,t,n){let s=t[0],r=t[1],i=t[2],a=n[3]*s+n[7]*r+n[11]*i+n[15]||1;return e[0]=(n[0]*s+n[4]*r+n[8]*i+n[12])/a,e[1]=(n[1]*s+n[5]*r+n[9]*i+n[13])/a,e[2]=(n[2]*s+n[6]*r+n[10]*i+n[14])/a,e}static transformMat3(e,t,n){let s=t[0],r=t[1],i=t[2];return e[0]=s*n[0]+r*n[3]+i*n[6],e[1]=s*n[1]+r*n[4]+i*n[7],e[2]=s*n[2]+r*n[5]+i*n[8],e}static transformQuat(e,t,n){let s=n[0],r=n[1],i=n[2],a=n[3]*2,c=t[0],d=t[1],l=t[2],L=r*l-i*d,k=i*c-s*l,M=s*d-r*c,y=(r*M-i*k)*2,T=(i*L-s*M)*2,m=(s*k-r*L)*2;return e[0]=c+L*a+y,e[1]=d+k*a+T,e[2]=l+M*a+m,e}static rotateX(e,t,n,s){let r=n[1],i=n[2],a=t[1]-r,c=t[2]-i;return e[0]=t[0],e[1]=a*Math.cos(s)-c*Math.sin(s)+r,e[2]=a*Math.sin(s)+c*Math.cos(s)+i,e}static rotateY(e,t,n,s){let r=n[0],i=n[2],a=t[0]-r,c=t[2]-i;return e[0]=c*Math.sin(s)+a*Math.cos(s)+r,e[1]=t[1],e[2]=c*Math.cos(s)-a*Math.sin(s)+i,e}static rotateZ(e,t,n,s){let r=n[0],i=n[1],a=t[0]-r,c=t[1]-i;return e[0]=a*Math.cos(s)-c*Math.sin(s)+r,e[1]=a*Math.sin(s)+c*Math.cos(s)+i,e[2]=n[2],e}static angle(e,t){let n=e[0],s=e[1],r=e[2],i=t[0],a=t[1],c=t[2],d=Math.sqrt((n*n+s*s+r*r)*(i*i+a*a+c*c)),l=d&&h.dot(e,t)/d;return Math.acos(Math.min(Math.max(l,-1),1))}static zero(e){return e[0]=0,e[1]=0,e[2]=0,e}static str(e){return`Vec3(${e.join(", ")})`}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]}static equals(e,t){let n=e[0],s=e[1],r=e[2],i=t[0],a=t[1],c=t[2];return Math.abs(n-i)<=1e-6*Math.max(1,Math.abs(n),Math.abs(i))&&Math.abs(s-a)<=1e-6*Math.max(1,Math.abs(s),Math.abs(a))&&Math.abs(r-c)<=1e-6*Math.max(1,Math.abs(r),Math.abs(c))}};w.prototype.sub=w.prototype.subtract;w.prototype.mul=w.prototype.multiply;w.prototype.div=w.prototype.divide;w.prototype.dist=w.prototype.distance;w.prototype.sqrDist=w.prototype.squaredDistance;w.sub=w.subtract;w.mul=w.multiply;w.div=w.divide;w.dist=w.distance;w.sqrDist=w.squaredDistance;w.sqrLen=w.squaredLength;w.mag=w.magnitude;w.length=w.magnitude;w.len=w.magnitude;var z=class h extends Float32Array{constructor(...e){switch(e.length){case 4:super(e);break;case 2:super(e[0],e[1],4);break;case 1:{let t=e[0];t===void 0?super(4):typeof t=="number"?super([t,t,t,t]):super(t,0,4);break}default:super(4);break}}get x(){return this[0]}set x(e){this[0]=e}get y(){return this[1]}set y(e){this[1]=e}get z(){return this[2]}set z(e){this[2]=e}get w(){return this[3]}set w(e){this[3]=e}get r(){return this[0]}set r(e){this[0]=e}get g(){return this[1]}set g(e){this[1]=e}get b(){return this[2]}set b(e){this[2]=e}get a(){return this[3]}set a(e){this[3]=e}get magnitude(){let e=this[0],t=this[1],n=this[2],s=this[3];return Math.sqrt(e*e+t*t+n*n+s*s)}get mag(){return this.magnitude}get str(){return h.str(this)}copy(e){return super.set(e),this}add(e){return this[0]+=e[0],this[1]+=e[1],this[2]+=e[2],this[3]+=e[3],this}subtract(e){return this[0]-=e[0],this[1]-=e[1],this[2]-=e[2],this[3]-=e[3],this}sub(e){return this}multiply(e){return this[0]*=e[0],this[1]*=e[1],this[2]*=e[2],this[3]*=e[3],this}mul(e){return this}divide(e){return this[0]/=e[0],this[1]/=e[1],this[2]/=e[2],this[3]/=e[3],this}div(e){return this}scale(e){return this[0]*=e,this[1]*=e,this[2]*=e,this[3]*=e,this}scaleAndAdd(e,t){return this[0]+=e[0]*t,this[1]+=e[1]*t,this[2]+=e[2]*t,this[3]+=e[3]*t,this}distance(e){return h.distance(this,e)}dist(e){return 0}squaredDistance(e){return h.squaredDistance(this,e)}sqrDist(e){return 0}negate(){return this[0]*=-1,this[1]*=-1,this[2]*=-1,this[3]*=-1,this}invert(){return this[0]=1/this[0],this[1]=1/this[1],this[2]=1/this[2],this[3]=1/this[3],this}abs(){return this[0]=Math.abs(this[0]),this[1]=Math.abs(this[1]),this[2]=Math.abs(this[2]),this[3]=Math.abs(this[3]),this}dot(e){return this[0]*e[0]+this[1]*e[1]+this[2]*e[2]+this[3]*e[3]}normalize(){return h.normalize(this,this)}static get BYTE_LENGTH(){return 4*Float32Array.BYTES_PER_ELEMENT}static create(){return new h}static clone(e){return new h(e)}static fromValues(e,t,n,s){return new h(e,t,n,s)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}static set(e,t,n,s,r){return e[0]=t,e[1]=n,e[2]=s,e[3]=r,e}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e}static subtract(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e}static sub(e,t,n){return e}static multiply(e,t,n){return e[0]=t[0]*n[0],e[1]=t[1]*n[1],e[2]=t[2]*n[2],e[3]=t[3]*n[3],e}static mul(e,t,n){return e}static divide(e,t,n){return e[0]=t[0]/n[0],e[1]=t[1]/n[1],e[2]=t[2]/n[2],e[3]=t[3]/n[3],e}static div(e,t,n){return e}static ceil(e,t){return e[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e[2]=Math.ceil(t[2]),e[3]=Math.ceil(t[3]),e}static floor(e,t){return e[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e[2]=Math.floor(t[2]),e[3]=Math.floor(t[3]),e}static min(e,t,n){return e[0]=Math.min(t[0],n[0]),e[1]=Math.min(t[1],n[1]),e[2]=Math.min(t[2],n[2]),e[3]=Math.min(t[3],n[3]),e}static max(e,t,n){return e[0]=Math.max(t[0],n[0]),e[1]=Math.max(t[1],n[1]),e[2]=Math.max(t[2],n[2]),e[3]=Math.max(t[3],n[3]),e}static round(e,t){return e[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e[2]=Math.round(t[2]),e[3]=Math.round(t[3]),e}static scale(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e}static scaleAndAdd(e,t,n,s){return e[0]=t[0]+n[0]*s,e[1]=t[1]+n[1]*s,e[2]=t[2]+n[2]*s,e[3]=t[3]+n[3]*s,e}static distance(e,t){let n=t[0]-e[0],s=t[1]-e[1],r=t[2]-e[2],i=t[3]-e[3];return Math.hypot(n,s,r,i)}static dist(e,t){return 0}static squaredDistance(e,t){let n=t[0]-e[0],s=t[1]-e[1],r=t[2]-e[2],i=t[3]-e[3];return n*n+s*s+r*r+i*i}static sqrDist(e,t){return 0}static magnitude(e){let t=e[0],n=e[1],s=e[2],r=e[3];return Math.sqrt(t*t+n*n+s*s+r*r)}static mag(e){return 0}static length(e){return 0}static len(e){return 0}static squaredLength(e){let t=e[0],n=e[1],s=e[2],r=e[3];return t*t+n*n+s*s+r*r}static sqrLen(e){return 0}static negate(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=-t[3],e}static inverse(e,t){return e[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e[3]=1/t[3],e}static abs(e,t){return e[0]=Math.abs(t[0]),e[1]=Math.abs(t[1]),e[2]=Math.abs(t[2]),e[3]=Math.abs(t[3]),e}static normalize(e,t){let n=t[0],s=t[1],r=t[2],i=t[3],a=n*n+s*s+r*r+i*i;return a>0&&(a=1/Math.sqrt(a)),e[0]=n*a,e[1]=s*a,e[2]=r*a,e[3]=i*a,e}static dot(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]}static cross(e,t,n,s){let r=n[0]*s[1]-n[1]*s[0],i=n[0]*s[2]-n[2]*s[0],a=n[0]*s[3]-n[3]*s[0],c=n[1]*s[2]-n[2]*s[1],d=n[1]*s[3]-n[3]*s[1],l=n[2]*s[3]-n[3]*s[2],L=t[0],k=t[1],M=t[2],y=t[3];return e[0]=k*l-M*d+y*c,e[1]=-(L*l)+M*a-y*i,e[2]=L*d-k*a+y*r,e[3]=-(L*c)+k*i-M*r,e}static lerp(e,t,n,s){let r=t[0],i=t[1],a=t[2],c=t[3];return e[0]=r+s*(n[0]-r),e[1]=i+s*(n[1]-i),e[2]=a+s*(n[2]-a),e[3]=c+s*(n[3]-c),e}static transformMat4(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3];return e[0]=n[0]*s+n[4]*r+n[8]*i+n[12]*a,e[1]=n[1]*s+n[5]*r+n[9]*i+n[13]*a,e[2]=n[2]*s+n[6]*r+n[10]*i+n[14]*a,e[3]=n[3]*s+n[7]*r+n[11]*i+n[15]*a,e}static transformQuat(e,t,n){let s=t[0],r=t[1],i=t[2],a=n[0],c=n[1],d=n[2],l=n[3],L=l*s+c*i-d*r,k=l*r+d*s-a*i,M=l*i+a*r-c*s,y=-a*s-c*r-d*i;return e[0]=L*l+y*-a+k*-d-M*-c,e[1]=k*l+y*-c+M*-a-L*-d,e[2]=M*l+y*-d+L*-c-k*-a,e[3]=t[3],e}static zero(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=0,e}static str(e){return`Vec4(${e.join(", ")})`}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]}static equals(e,t){let n=e[0],s=e[1],r=e[2],i=e[3],a=t[0],c=t[1],d=t[2],l=t[3];return Math.abs(n-a)<=1e-6*Math.max(1,Math.abs(n),Math.abs(a))&&Math.abs(s-c)<=1e-6*Math.max(1,Math.abs(s),Math.abs(c))&&Math.abs(r-d)<=1e-6*Math.max(1,Math.abs(r),Math.abs(d))&&Math.abs(i-l)<=1e-6*Math.max(1,Math.abs(i),Math.abs(l))}};z.prototype.sub=z.prototype.subtract;z.prototype.mul=z.prototype.multiply;z.prototype.div=z.prototype.divide;z.prototype.dist=z.prototype.distance;z.prototype.sqrDist=z.prototype.squaredDistance;z.sub=z.subtract;z.mul=z.multiply;z.div=z.divide;z.dist=z.distance;z.sqrDist=z.squaredDistance;z.sqrLen=z.squaredLength;z.mag=z.magnitude;z.length=z.magnitude;z.len=z.magnitude;var C=new Float32Array([0,0,0,1]),q=class h extends Float32Array{static#e="zyx";static#t=new Float32Array(4);static#r=new Float32Array(4);static#n=new Float32Array(9);static#s=new Float32Array(3);static#i=new Float32Array([1,0,0]);static#a=new Float32Array([0,1,0]);constructor(...e){switch(e.length){case 4:super(e);break;case 2:super(e[0],e[1],4);break;case 1:{let t=e[0];t===void 0?super(C):typeof t=="number"?super([t,t,t,t]):super(t,0,4);break}default:super(C);break}}get x(){return this[0]}set x(e){this[0]=e}get y(){return this[1]}set y(e){this[1]=e}get z(){return this[2]}set z(e){this[2]=e}get w(){return this[3]}set w(e){this[3]=e}get magnitude(){let e=this[0],t=this[1],n=this[2],s=this[3];return Math.sqrt(e*e+t*t+n*n+s*s)}get mag(){return this.magnitude}get str(){return h.str(this)}copy(e){return super.set(e),this}identity(){return this.set(C),this}multiply(e){return h.multiply(this,this,e)}mul(e){return this}rotateX(e){return h.rotateX(this,this,e)}rotateY(e){return h.rotateY(this,this,e)}rotateZ(e){return h.rotateZ(this,this,e)}invert(){return h.invert(this,this)}scale(e){return this[0]*=e,this[1]*=e,this[2]*=e,this[3]*=e,this}dot(e){return h.dot(this,e)}static get BYTE_LENGTH(){return 4*Float32Array.BYTES_PER_ELEMENT}static create(){return new h}static identity(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e}static setAxisAngle(e,t,n){n*=.5;let s=Math.sin(n);return e[0]=s*t[0],e[1]=s*t[1],e[2]=s*t[2],e[3]=Math.cos(n),e}static getAxisAngle(e,t){let n=Math.acos(t[3])*2,s=Math.sin(n/2);return s>1e-6?(e[0]=t[0]/s,e[1]=t[1]/s,e[2]=t[2]/s):(e[0]=1,e[1]=0,e[2]=0),n}static getAngle(e,t){let n=h.dot(e,t);return Math.acos(2*n*n-1)}static multiply(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=n[0],d=n[1],l=n[2],L=n[3];return e[0]=s*L+a*c+r*l-i*d,e[1]=r*L+a*d+i*c-s*l,e[2]=i*L+a*l+s*d-r*c,e[3]=a*L-s*c-r*d-i*l,e}static rotateX(e,t,n){n*=.5;let s=t[0],r=t[1],i=t[2],a=t[3],c=Math.sin(n),d=Math.cos(n);return e[0]=s*d+a*c,e[1]=r*d+i*c,e[2]=i*d-r*c,e[3]=a*d-s*c,e}static rotateY(e,t,n){n*=.5;let s=t[0],r=t[1],i=t[2],a=t[3],c=Math.sin(n),d=Math.cos(n);return e[0]=s*d-i*c,e[1]=r*d+a*c,e[2]=i*d+s*c,e[3]=a*d-r*c,e}static rotateZ(e,t,n){n*=.5;let s=t[0],r=t[1],i=t[2],a=t[3],c=Math.sin(n),d=Math.cos(n);return e[0]=s*d+r*c,e[1]=r*d-s*c,e[2]=i*d+a*c,e[3]=a*d-i*c,e}static calculateW(e,t){let n=t[0],s=t[1],r=t[2];return e[0]=n,e[1]=s,e[2]=r,e[3]=Math.sqrt(Math.abs(1-n*n-s*s-r*r)),e}static exp(e,t){let n=t[0],s=t[1],r=t[2],i=t[3],a=Math.sqrt(n*n+s*s+r*r),c=Math.exp(i),d=a>0?c*Math.sin(a)/a:0;return e[0]=n*d,e[1]=s*d,e[2]=r*d,e[3]=c*Math.cos(a),e}static ln(e,t){let n=t[0],s=t[1],r=t[2],i=t[3],a=Math.sqrt(n*n+s*s+r*r),c=a>0?Math.atan2(a,i)/a:0;return e[0]=n*c,e[1]=s*c,e[2]=r*c,e[3]=.5*Math.log(n*n+s*s+r*r+i*i),e}static pow(e,t,n){return h.ln(e,t),h.scale(e,e,n),h.exp(e,e),e}static slerp(e,t,n,s){let r=t[0],i=t[1],a=t[2],c=t[3],d=n[0],l=n[1],L=n[2],k=n[3],M,y,T=r*d+i*l+a*L+c*k;if(T<0&&(T=-T,d=-d,l=-l,L=-L,k=-k),1-T>1e-6){let m=Math.acos(T),o=Math.sin(m);M=Math.sin((1-s)*m)/o,y=Math.sin(s*m)/o}else M=1-s,y=s;return e[0]=M*r+y*d,e[1]=M*i+y*l,e[2]=M*a+y*L,e[3]=M*c+y*k,e}static invert(e,t){let n=t[0],s=t[1],r=t[2],i=t[3],a=n*n+s*s+r*r+i*i,c=a?1/a:0;return e[0]=-n*c,e[1]=-s*c,e[2]=-r*c,e[3]=i*c,e}static conjugate(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=t[3],e}static fromMat3(e,t){let n=t[0]+t[4]+t[8],s;if(n>0)s=Math.sqrt(n+1),e[3]=.5*s,s=.5/s,e[0]=(t[5]-t[7])*s,e[1]=(t[6]-t[2])*s,e[2]=(t[1]-t[3])*s;else{let r=0;t[4]>t[0]&&(r=1),t[8]>t[r*3+r]&&(r=2);let i=(r+1)%3,a=(r+2)%3;s=Math.sqrt(t[r*3+r]-t[i*3+i]-t[a*3+a]+1),e[r]=.5*s,s=.5/s,e[3]=(t[i*3+a]-t[a*3+i])*s,e[i]=(t[i*3+r]+t[r*3+i])*s,e[a]=(t[a*3+r]+t[r*3+a])*s}return e}static fromEuler(e,t,n,s,r=h.#e){let i=.5*Math.PI/180;t*=i,n*=i,s*=i;let a=Math.sin(t),c=Math.cos(t),d=Math.sin(n),l=Math.cos(n),L=Math.sin(s),k=Math.cos(s);switch(r){case"xyz":e[0]=a*l*k+c*d*L,e[1]=c*d*k-a*l*L,e[2]=c*l*L+a*d*k,e[3]=c*l*k-a*d*L;break;case"xzy":e[0]=a*l*k-c*d*L,e[1]=c*d*k-a*l*L,e[2]=c*l*L+a*d*k,e[3]=c*l*k+a*d*L;break;case"yxz":e[0]=a*l*k+c*d*L,e[1]=c*d*k-a*l*L,e[2]=c*l*L-a*d*k,e[3]=c*l*k+a*d*L;break;case"yzx":e[0]=a*l*k+c*d*L,e[1]=c*d*k+a*l*L,e[2]=c*l*L-a*d*k,e[3]=c*l*k-a*d*L;break;case"zxy":e[0]=a*l*k-c*d*L,e[1]=c*d*k+a*l*L,e[2]=c*l*L+a*d*k,e[3]=c*l*k-a*d*L;break;case"zyx":e[0]=a*l*k-c*d*L,e[1]=c*d*k+a*l*L,e[2]=c*l*L-a*d*k,e[3]=c*l*k+a*d*L;break;default:throw new Error(`Unknown angle order ${r}`)}return e}static str(e){return`Quat(${e.join(", ")})`}static clone(e){return new h(e)}static fromValues(e,t,n,s){return new h(e,t,n,s)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}static set(e,t,n,s,r){return e}static add(e,t,n){return e}static mul(e,t,n){return e}static scale(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e}static dot(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]}static lerp(e,t,n,s){return e}static magnitude(e){return 0}static mag(e){return 0}static length(e){return 0}static len(e){return 0}static squaredLength(e){return 0}static sqrLen(e){return 0}static normalize(e,t){return e}static exactEquals(e,t){return!1}static equals(e,t){return!1}static rotationTo(e,t,n){let s=w.dot(t,n);return s<-.999999?(w.cross(h.#s,h.#i,t),w.mag(h.#s)<1e-6&&w.cross(h.#s,h.#a,t),w.normalize(h.#s,h.#s),h.setAxisAngle(e,h.#s,Math.PI),e):s>.999999?(e[0]=0,e[1]=0,e[2]=0,e[3]=1,e):(w.cross(h.#s,t,n),e[0]=h.#s[0],e[1]=h.#s[1],e[2]=h.#s[2],e[3]=1+s,h.normalize(e,e))}static sqlerp(e,t,n,s,r,i){return h.slerp(h.#t,t,r,i),h.slerp(h.#r,n,s,i),h.slerp(e,h.#t,h.#r,2*i*(1-i)),e}static setAxes(e,t,n,s){return h.#n[0]=n[0],h.#n[3]=n[1],h.#n[6]=n[2],h.#n[1]=s[0],h.#n[4]=s[1],h.#n[7]=s[2],h.#n[2]=-t[0],h.#n[5]=-t[1],h.#n[8]=-t[2],h.normalize(e,h.fromMat3(e,h.#n))}};q.set=z.set;q.add=z.add;q.lerp=z.lerp;q.normalize=z.normalize;q.squaredLength=z.squaredLength;q.sqrLen=z.squaredLength;q.exactEquals=z.exactEquals;q.equals=z.equals;q.magnitude=z.magnitude;q.prototype.mul=q.prototype.multiply;q.mul=q.multiply;q.mag=q.magnitude;q.length=q.magnitude;q.len=q.magnitude;var J=new Float32Array([0,0,0,1,0,0,0,0]),O=class h extends Float32Array{static#e=new Float32Array(4);static#t=new Float32Array(3);constructor(...e){switch(e.length){case 8:super(e);break;case 2:super(e[0],e[1],8);break;case 1:{let t=e[0];t===void 0?super(J):typeof t=="number"?super([t,t,t,t,t,t,t,t]):super(t,0,8);break}default:super(J);break}}get str(){return h.str(this)}copy(e){return super.set(e),this}static get BYTE_LENGTH(){return 8*Float32Array.BYTES_PER_ELEMENT}static create(){return new h}static clone(e){return new h(e)}static fromValues(e,t,n,s,r,i,a,c){return new h(e,t,n,s,r,i,a,c)}static fromRotationTranslationValues(e,t,n,s,r,i,a){let c=r*.5,d=i*.5,l=a*.5;return new h(e,t,n,s,c*s+d*n-l*t,d*s+l*e-c*n,l*s+c*t-d*e,-c*e-d*t-l*n)}static fromRotationTranslation(e,t,n){let s=n[0]*.5,r=n[1]*.5,i=n[2]*.5,a=t[0],c=t[1],d=t[2],l=t[3];return e[0]=a,e[1]=c,e[2]=d,e[3]=l,e[4]=s*l+r*d-i*c,e[5]=r*l+i*a-s*d,e[6]=i*l+s*c-r*a,e[7]=-s*a-r*c-i*d,e}static fromTranslation(e,t){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e[4]=t[0]*.5,e[5]=t[1]*.5,e[6]=t[2]*.5,e[7]=0,e}static fromRotation(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=0,e[5]=0,e[6]=0,e[7]=0,e}static fromMat4(e,t){return N.getRotation(h.#e,t),N.getTranslation(h.#t,t),h.fromRotationTranslation(e,h.#e,h.#t)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e}static identity(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e[4]=0,e[5]=0,e[6]=0,e[7]=0,e}static set(e,t,n,s,r,i,a,c,d){return e[0]=t,e[1]=n,e[2]=s,e[3]=r,e[4]=i,e[5]=a,e[6]=c,e[7]=d,e}static getReal(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}static getDual(e,t){return e[0]=t[4],e[1]=t[5],e[2]=t[6],e[3]=t[7],e}static setReal(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}static setDual(e,t){return e[4]=t[0],e[5]=t[1],e[6]=t[2],e[7]=t[3],e}static getTranslation(e,t){let n=t[4],s=t[5],r=t[6],i=t[7],a=-t[0],c=-t[1],d=-t[2],l=t[3];return e[0]=(n*l+i*a+s*d-r*c)*2,e[1]=(s*l+i*c+r*a-n*d)*2,e[2]=(r*l+i*d+n*c-s*a)*2,e}static translate(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=n[0]*.5,d=n[1]*.5,l=n[2]*.5,L=t[4],k=t[5],M=t[6],y=t[7];return e[0]=s,e[1]=r,e[2]=i,e[3]=a,e[4]=a*c+r*l-i*d+L,e[5]=a*d+i*c-s*l+k,e[6]=a*l+s*d-r*c+M,e[7]=-s*c-r*d-i*l+y,e}static rotateX(e,t,n){let s=-t[0],r=-t[1],i=-t[2],a=t[3],c=t[4],d=t[5],l=t[6],L=t[7],k=c*a+L*s+d*i-l*r,M=d*a+L*r+l*s-c*i,y=l*a+L*i+c*r-d*s,T=L*a-c*s-d*r-l*i;return q.rotateX(e,t,n),s=e[0],r=e[1],i=e[2],a=e[3],e[4]=k*a+T*s+M*i-y*r,e[5]=M*a+T*r+y*s-k*i,e[6]=y*a+T*i+k*r-M*s,e[7]=T*a-k*s-M*r-y*i,e}static rotateY(e,t,n){let s=-t[0],r=-t[1],i=-t[2],a=t[3],c=t[4],d=t[5],l=t[6],L=t[7],k=c*a+L*s+d*i-l*r,M=d*a+L*r+l*s-c*i,y=l*a+L*i+c*r-d*s,T=L*a-c*s-d*r-l*i;return q.rotateY(e,t,n),s=e[0],r=e[1],i=e[2],a=e[3],e[4]=k*a+T*s+M*i-y*r,e[5]=M*a+T*r+y*s-k*i,e[6]=y*a+T*i+k*r-M*s,e[7]=T*a-k*s-M*r-y*i,e}static rotateZ(e,t,n){let s=-t[0],r=-t[1],i=-t[2],a=t[3],c=t[4],d=t[5],l=t[6],L=t[7],k=c*a+L*s+d*i-l*r,M=d*a+L*r+l*s-c*i,y=l*a+L*i+c*r-d*s,T=L*a-c*s-d*r-l*i;return q.rotateZ(e,t,n),s=e[0],r=e[1],i=e[2],a=e[3],e[4]=k*a+T*s+M*i-y*r,e[5]=M*a+T*r+y*s-k*i,e[6]=y*a+T*i+k*r-M*s,e[7]=T*a-k*s-M*r-y*i,e}static rotateByQuatAppend(e,t,n){let s=n[0],r=n[1],i=n[2],a=n[3],c=t[0],d=t[1],l=t[2],L=t[3];return e[0]=c*a+L*s+d*i-l*r,e[1]=d*a+L*r+l*s-c*i,e[2]=l*a+L*i+c*r-d*s,e[3]=L*a-c*s-d*r-l*i,c=t[4],d=t[5],l=t[6],L=t[7],e[4]=c*a+L*s+d*i-l*r,e[5]=d*a+L*r+l*s-c*i,e[6]=l*a+L*i+c*r-d*s,e[7]=L*a-c*s-d*r-l*i,e}static rotateByQuatPrepend(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=n[0],d=n[1],l=n[2],L=n[3];return e[0]=s*L+a*c+r*l-i*d,e[1]=r*L+a*d+i*c-s*l,e[2]=i*L+a*l+s*d-r*c,e[3]=a*L-s*c-r*d-i*l,c=n[4],d=n[5],l=n[6],L=n[7],e[4]=s*L+a*c+r*l-i*d,e[5]=r*L+a*d+i*c-s*l,e[6]=i*L+a*l+s*d-r*c,e[7]=a*L-s*c-r*d-i*l,e}static rotateAroundAxis(e,t,n,s){if(Math.abs(s)<1e-6)return h.copy(e,t);let r=Math.sqrt(n[0]*n[0]+n[1]*n[1]+n[2]*n[2]);s*=.5;let i=Math.sin(s),a=i*n[0]/r,c=i*n[1]/r,d=i*n[2]/r,l=Math.cos(s),L=t[0],k=t[1],M=t[2],y=t[3];e[0]=L*l+y*a+k*d-M*c,e[1]=k*l+y*c+M*a-L*d,e[2]=M*l+y*d+L*c-k*a,e[3]=y*l-L*a-k*c-M*d;let T=t[4],m=t[5],o=t[6],R=t[7];return e[4]=T*l+R*a+m*d-o*c,e[5]=m*l+R*c+o*a-T*d,e[6]=o*l+R*d+T*c-m*a,e[7]=R*l-T*a-m*c-o*d,e}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e[4]=t[4]+n[4],e[5]=t[5]+n[5],e[6]=t[6]+n[6],e[7]=t[7]+n[7],e}static multiply(e,t,n){let s=t[0],r=t[1],i=t[2],a=t[3],c=n[4],d=n[5],l=n[6],L=n[7],k=t[4],M=t[5],y=t[6],T=t[7],m=n[0],o=n[1],R=n[2],V=n[3];return e[0]=s*V+a*m+r*R-i*o,e[1]=r*V+a*o+i*m-s*R,e[2]=i*V+a*R+s*o-r*m,e[3]=a*V-s*m-r*o-i*R,e[4]=s*L+a*c+r*l-i*d+k*V+T*m+M*R-y*o,e[5]=r*L+a*d+i*c-s*l+M*V+T*o+y*m-k*R,e[6]=i*L+a*l+s*d-r*c+y*V+T*R+k*o-M*m,e[7]=a*L-s*c-r*d-i*l+T*V-k*m-M*o-y*R,e}static mul(e,t,n){return e}static scale(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*n,e[5]=t[5]*n,e[6]=t[6]*n,e[7]=t[7]*n,e}static dot(e,t){return 0}static lerp(e,t,n,s){let r=1-s;return h.dot(t,n)<0&&(s=-s),e[0]=t[0]*r+n[0]*s,e[1]=t[1]*r+n[1]*s,e[2]=t[2]*r+n[2]*s,e[3]=t[3]*r+n[3]*s,e[4]=t[4]*r+n[4]*s,e[5]=t[5]*r+n[5]*s,e[6]=t[6]*r+n[6]*s,e[7]=t[7]*r+n[7]*s,e}static invert(e,t){let n=h.squaredLength(t);return e[0]=-t[0]/n,e[1]=-t[1]/n,e[2]=-t[2]/n,e[3]=t[3]/n,e[4]=-t[4]/n,e[5]=-t[5]/n,e[6]=-t[6]/n,e[7]=t[7]/n,e}static conjugate(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=t[3],e[4]=-t[4],e[5]=-t[5],e[6]=-t[6],e[7]=t[7],e}static magnitude(e){return 0}static mag(e){return 0}static length(e){return 0}static len(e){return 0}static squaredLength(e){return 0}static sqrLen(e){return 0}static normalize(e,t){let n=h.squaredLength(t);if(n>0){n=Math.sqrt(n);let s=t[0]/n,r=t[1]/n,i=t[2]/n,a=t[3]/n,c=t[4],d=t[5],l=t[6],L=t[7],k=s*c+r*d+i*l+a*L;e[0]=s,e[1]=r,e[2]=i,e[3]=a,e[4]=(c-s*k)/n,e[5]=(d-r*k)/n,e[6]=(l-i*k)/n,e[7]=(L-a*k)/n}return e}static str(e){return`Quat2(${e.join(", ")})`}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]}static equals(e,t){let n=e[0],s=e[1],r=e[2],i=e[3],a=e[4],c=e[5],d=e[6],l=e[7],L=t[0],k=t[1],M=t[2],y=t[3],T=t[4],m=t[5],o=t[6],R=t[7];return Math.abs(n-L)<=1e-6*Math.max(1,Math.abs(n),Math.abs(L))&&Math.abs(s-k)<=1e-6*Math.max(1,Math.abs(s),Math.abs(k))&&Math.abs(r-M)<=1e-6*Math.max(1,Math.abs(r),Math.abs(M))&&Math.abs(i-y)<=1e-6*Math.max(1,Math.abs(i),Math.abs(y))&&Math.abs(a-T)<=1e-6*Math.max(1,Math.abs(a),Math.abs(T))&&Math.abs(c-m)<=1e-6*Math.max(1,Math.abs(c),Math.abs(m))&&Math.abs(d-o)<=1e-6*Math.max(1,Math.abs(d),Math.abs(o))&&Math.abs(l-R)<=1e-6*Math.max(1,Math.abs(l),Math.abs(R))}};O.dot=q.dot;O.squaredLength=q.squaredLength;O.sqrLen=q.squaredLength;O.mag=q.magnitude;O.length=q.magnitude;O.len=q.magnitude;O.mul=O.multiply;var A=class h extends Float32Array{constructor(...e){switch(e.length){case 2:{let t=e[0];typeof t=="number"?super([t,e[1]]):super(t,e[1],2);break}case 1:{let t=e[0];t===void 0?super(2):typeof t=="number"?super([t,t]):super(t,0,2);break}default:super(2);break}}get x(){return this[0]}set x(e){this[0]=e}get y(){return this[1]}set y(e){this[1]=e}get r(){return this[0]}set r(e){this[0]=e}get g(){return this[1]}set g(e){this[1]=e}get magnitude(){return Math.hypot(this[0],this[1])}get mag(){return this.magnitude}get squaredMagnitude(){let e=this[0],t=this[1];return e*e+t*t}get sqrMag(){return this.squaredMagnitude}get str(){return h.str(this)}copy(e){return this.set(e),this}add(e){return this[0]+=e[0],this[1]+=e[1],this}subtract(e){return this[0]-=e[0],this[1]-=e[1],this}sub(e){return this}multiply(e){return this[0]*=e[0],this[1]*=e[1],this}mul(e){return this}divide(e){return this[0]/=e[0],this[1]/=e[1],this}div(e){return this}scale(e){return this[0]*=e,this[1]*=e,this}scaleAndAdd(e,t){return this[0]+=e[0]*t,this[1]+=e[1]*t,this}distance(e){return h.distance(this,e)}dist(e){return 0}squaredDistance(e){return h.squaredDistance(this,e)}sqrDist(e){return 0}negate(){return this[0]*=-1,this[1]*=-1,this}invert(){return this[0]=1/this[0],this[1]=1/this[1],this}abs(){return this[0]=Math.abs(this[0]),this[1]=Math.abs(this[1]),this}dot(e){return this[0]*e[0]+this[1]*e[1]}normalize(){return h.normalize(this,this)}static get BYTE_LENGTH(){return 2*Float32Array.BYTES_PER_ELEMENT}static create(){return new h}static clone(e){return new h(e)}static fromValues(e,t){return new h(e,t)}static copy(e,t){return e[0]=t[0],e[1]=t[1],e}static set(e,t,n){return e[0]=t,e[1]=n,e}static add(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e}static subtract(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e}static sub(e,t,n){return e}static multiply(e,t,n){return e[0]=t[0]*n[0],e[1]=t[1]*n[1],e}static mul(e,t,n){return e}static divide(e,t,n){return e[0]=t[0]/n[0],e[1]=t[1]/n[1],e}static div(e,t,n){return e}static ceil(e,t){return e[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e}static floor(e,t){return e[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e}static min(e,t,n){return e[0]=Math.min(t[0],n[0]),e[1]=Math.min(t[1],n[1]),e}static max(e,t,n){return e[0]=Math.max(t[0],n[0]),e[1]=Math.max(t[1],n[1]),e}static round(e,t){return e[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e}static scale(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e}static scaleAndAdd(e,t,n,s){return e[0]=t[0]+n[0]*s,e[1]=t[1]+n[1]*s,e}static distance(e,t){return Math.hypot(t[0]-e[0],t[1]-e[1])}static dist(e,t){return 0}static squaredDistance(e,t){let n=t[0]-e[0],s=t[1]-e[1];return n*n+s*s}static sqrDist(e,t){return 0}static magnitude(e){let t=e[0],n=e[1];return Math.sqrt(t*t+n*n)}static mag(e){return 0}static length(e){return 0}static len(e){return 0}static squaredLength(e){let t=e[0],n=e[1];return t*t+n*n}static sqrLen(e,t){return 0}static negate(e,t){return e[0]=-t[0],e[1]=-t[1],e}static inverse(e,t){return e[0]=1/t[0],e[1]=1/t[1],e}static abs(e,t){return e[0]=Math.abs(t[0]),e[1]=Math.abs(t[1]),e}static normalize(e,t){let n=t[0],s=t[1],r=n*n+s*s;return r>0&&(r=1/Math.sqrt(r)),e[0]=t[0]*r,e[1]=t[1]*r,e}static dot(e,t){return e[0]*t[0]+e[1]*t[1]}static cross(e,t,n){let s=t[0]*n[1]-t[1]*n[0];return e[0]=e[1]=0,e[2]=s,e}static lerp(e,t,n,s){let r=t[0],i=t[1];return e[0]=r+s*(n[0]-r),e[1]=i+s*(n[1]-i),e}static transformMat2(e,t,n){let s=t[0],r=t[1];return e[0]=n[0]*s+n[2]*r,e[1]=n[1]*s+n[3]*r,e}static transformMat2d(e,t,n){let s=t[0],r=t[1];return e[0]=n[0]*s+n[2]*r+n[4],e[1]=n[1]*s+n[3]*r+n[5],e}static transformMat3(e,t,n){let s=t[0],r=t[1];return e[0]=n[0]*s+n[3]*r+n[6],e[1]=n[1]*s+n[4]*r+n[7],e}static transformMat4(e,t,n){let s=t[0],r=t[1];return e[0]=n[0]*s+n[4]*r+n[12],e[1]=n[1]*s+n[5]*r+n[13],e}static rotate(e,t,n,s){let r=t[0]-n[0],i=t[1]-n[1],a=Math.sin(s),c=Math.cos(s);return e[0]=r*c-i*a+n[0],e[1]=r*a+i*c+n[1],e}static angle(e,t){let n=e[0],s=e[1],r=t[0],i=t[1],a=Math.sqrt(n*n+s*s)*Math.sqrt(r*r+i*i),c=a&&(n*r+s*i)/a;return Math.acos(Math.min(Math.max(c,-1),1))}static zero(e){return e[0]=0,e[1]=0,e}static exactEquals(e,t){return e[0]===t[0]&&e[1]===t[1]}static equals(e,t){let n=e[0],s=e[1],r=t[0],i=t[1];return Math.abs(n-r)<=1e-6*Math.max(1,Math.abs(n),Math.abs(r))&&Math.abs(s-i)<=1e-6*Math.max(1,Math.abs(s),Math.abs(i))}static str(e){return`Vec2(${e.join(", ")})`}};A.prototype.sub=A.prototype.subtract;A.prototype.mul=A.prototype.multiply;A.prototype.div=A.prototype.divide;A.prototype.dist=A.prototype.distance;A.prototype.sqrDist=A.prototype.squaredDistance;A.sub=A.subtract;A.mul=A.multiply;A.div=A.divide;A.dist=A.distance;A.sqrDist=A.squaredDistance;A.sqrLen=A.squaredLength;A.mag=A.magnitude;A.length=A.magnitude;A.len=A.magnitude;var ne=Math.PI/180,se=180/Math.PI;function re(h){return h*se}function ie(h){return h*ne}
//# sourceMappingURL=gl-matrix-f32.min.cjs.map
