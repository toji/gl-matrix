{"google":"","tagline":"Javascript Matrix and Vector library for High Performance WebGL apps","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"glMatrix\r\n=======================\r\n\r\nJavascript has evolved into a lanugage capable of handling realtime 3D graphics, \r\nvia WebGL, and computationally intensive tasks such as physics simulations.\r\nThese types of applications demand high performance vector and matrix math,\r\nwhich is something that Javascript doesn't provide by default.\r\nglMatrix to the rescue!\r\n\r\nglMatrix is designed to perform vector and matrix operations stupidly fast! By\r\nhand-tuning each function for maximum performance and encouraging efficient\r\nusage patterns through API conventions, glMatrix will help you get the most out\r\nof your browsers Javascript engine.\r\n\r\nDocumentation\r\n----------------------\r\nDocumentation for all glMatrix functions can be found [here](http://toji.github.com/gl-matrix/docs/2.0.0)\r\n\r\nWhat's new in 2.0?\r\n-------------------------\r\nglMatrix 2.0 is the result of a lot of excellent feedback from the community,\r\nand features:\r\n\r\n - Revamped and consistent API (not backward compatible with 1.x, sorry!)\r\n - New functions for each type, based on request.\r\n - New array operations: vec(2/3/4).forEach\r\n - Even more optimizations!\r\n - A cleaner code base, broken up by type.\r\n - A more complete unit testing suite.\r\n\r\nLooking for an older version?\r\n-----------------------------\r\nYou can download previous versions of glMatrix [here](https://github.com/toji/gl-matrix/tags)\r\n\r\nA note about Matrix formatting\r\n------------------------------\r\nglMatrix is modeled after the needs of WebGL, which in turn uses matrix\r\nconventions set by [OpenGL](http://www.opengl.org/archives/resources/faq/technical/transformations.htm).\r\nSpecifically, a 4x4 matrix is an array of 16 contiguous floats with the 13th,\r\n14th, and 15th elements representing the X, Y, and Z, translation components.\r\n\r\nThis may lead to some confusion when referencing OpenGL documentation, however,\r\nwhich represents out all matrices in column-major format. This means that while\r\nin code a matrix may be typed out as:\r\n\r\n    [1, 0, 0, 0,\r\n     0, 1, 0, 0,\r\n     0, 0, 1, 0,\r\n     x, y, z, 0]\r\n\r\nThe same matrix in the [OpenGL documentation](http://www.opengl.org/sdk/docs/man2/xhtml/glTranslate.xml)\r\nis written as:\r\n\r\n    1 0 0 x\r\n    0 1 0 y\r\n    0 0 1 z\r\n    0 0 0 0\r\n\r\nPlease rest assured, however, that they are the same thing! This is not unique\r\nto glMatrix, either, as OpenGL developers have long been confused by the\r\napparent lack of consistency between the memory layout and the documentation.\r\n\r\nSorry about that, but there's not much I can do about it.","name":"Gl-matrix"}
